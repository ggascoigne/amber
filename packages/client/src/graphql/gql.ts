/* eslint-disable */
import * as types from './graphql'
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  'query getGamesBySlotForSignup($year: Int!, $slotId: Int!) {\n  games(\n    filter: {or: [{and: [{or: [{year: {equalTo: $year}}, {year: {equalTo: 0}}]}, {slotId: {equalTo: $slotId}}]}, {and: [{year: {equalTo: 0}}, {slotId: {isNull: true}}]}]}\n    orderBy: [YEAR_DESC, SLOT_ID_ASC, NAME_ASC]\n  ) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nquery getGamesBySlot($year: Int!, $slotId: Int!) {\n  games(\n    condition: {year: $year, slotId: $slotId}\n    orderBy: [SLOT_ID_ASC, NAME_ASC]\n  ) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nquery getGamesByYear($year: Int!) {\n  games(\n    filter: {or: [{and: [{or: [{year: {equalTo: $year}}, {year: {equalTo: 0}}]}]}, {and: [{year: {equalTo: 0}}]}]}\n    orderBy: [YEAR_DESC, SLOT_ID_ASC, NAME_ASC]\n  ) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n        room {\n          ...gameRoomFields\n        }\n      }\n    }\n  }\n}\n\nquery getSmallGamesByYear($year: Int!) {\n  games(condition: {year: $year}, orderBy: [SLOT_ID_ASC, NAME_ASC], first: 1) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nmutation updateGameByNodeId($input: UpdateGameByNodeIdInput!) {\n  updateGameByNodeId(input: $input) {\n    game {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nmutation updateGame($input: UpdateGameInput!) {\n  updateGame(input: $input) {\n    game {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nmutation createGame($input: CreateGameInput!) {\n  createGame(input: $input) {\n    game {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nmutation deleteGame($input: DeleteGameInput!) {\n  deleteGame(input: $input) {\n    clientMutationId\n    deletedGameNodeId\n  }\n}\n\nquery getFirstGameOfSlot($year: Int!) {\n  games(orderBy: NAME_ASC, condition: {slotId: 1, year: $year}, first: 1) {\n    nodes {\n      ...gameFields\n      gameAssignments(filter: {gm: {lessThan: 0}}) {\n        nodes {\n          nodeId\n          gm\n          member {\n            user {\n              email\n              fullName\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getGamesByAuthor($id: Int!) {\n  user(id: $id) {\n    authoredGames {\n      nodes {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nquery getGamesByYearAndAuthor($year: Int!, $id: Int!) {\n  games(condition: {authorId: $id, year: $year}) {\n    nodes {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nquery getGameById($id: Int!) {\n  game(id: $id) {\n    ...gameFields\n    ...gameGms\n  }\n}':
    types.GetGamesBySlotForSignupDocument,
  'fragment gameAssignmentFields on GameAssignment {\n  gameId\n  gm\n  memberId\n  nodeId\n  year\n}':
    types.GameAssignmentFieldsFragmentDoc,
  'query getGameAssignmentsByYear($year: Int!) {\n  gameAssignments(condition: {year: $year}) {\n    nodes {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nquery getGameAssignmentsByGameId($gameId: Int!) {\n  gameAssignments(condition: {gameId: $gameId}) {\n    nodes {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nquery getGameAssignmentsByMemberId($memberId: Int!) {\n  gameAssignments(condition: {memberId: $memberId}) {\n    nodes {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nmutation updateGameAssignmentByNodeId($input: UpdateGameAssignmentByNodeIdInput!) {\n  updateGameAssignmentByNodeId(input: $input) {\n    gameAssignment {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nmutation createGameAssignment($input: CreateGameAssignmentInput!) {\n  createGameAssignment(input: $input) {\n    gameAssignment {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nmutation deleteGameAssignment($input: DeleteGameAssignmentByNodeIdInput!) {\n  deleteGameAssignmentByNodeId(input: $input) {\n    clientMutationId\n    deletedGameAssignmentNodeId\n  }\n}\n\nquery getSchedule($memberId: Int!) {\n  gameAssignments(\n    condition: {memberId: $memberId}\n    filter: {gm: {greaterThanOrEqualTo: 0}}\n  ) {\n    nodes {\n      game {\n        ...gameFields\n        gameAssignments(filter: {gm: {greaterThanOrEqualTo: 0}}) {\n          nodes {\n            ...assignmentFields\n          }\n        }\n      }\n      ...gameAssignmentFields\n    }\n  }\n}':
    types.GetGameAssignmentsByYearDocument,
  'fragment gameSubmissionFields on GameSubmission {\n  id\n  memberId\n  message\n  nodeId\n  year\n}\n\nfragment gameChoiceFields on GameChoice {\n  gameId\n  id\n  memberId\n  nodeId\n  rank\n  returningPlayer\n  slotId\n  year\n}\n\nmutation createGameChoices($year: Int!, $slots: Int!, $memberId: Int!) {\n  createBareSlotChoices(\n    input: {memberId: $memberId, yearNo: $year, noSlots: $slots}\n  ) {\n    clientMutationId\n  }\n}\n\nquery getGameChoices($year: Int!, $memberId: Int!) {\n  gameSubmissions(condition: {memberId: $memberId, year: $year}) {\n    nodes {\n      ...gameSubmissionFields\n    }\n  }\n  gameChoices(condition: {memberId: $memberId, year: $year}) {\n    nodes {\n      ...gameChoiceFields\n    }\n  }\n}\n\nquery readGameChoice($id: Int!) {\n  gameChoice(id: $id) {\n    ...gameChoiceFields\n  }\n}\n\nmutation createGameSubmission($input: CreateGameSubmissionInput!) {\n  createGameSubmission(input: $input) {\n    clientMutationId\n    gameSubmission {\n      ...gameSubmissionFields\n    }\n  }\n}\n\nmutation updateGameSubmissionByNodeId($input: UpdateGameSubmissionByNodeIdInput!) {\n  updateGameSubmissionByNodeId(input: $input) {\n    clientMutationId\n    gameSubmission {\n      ...gameSubmissionFields\n    }\n  }\n}\n\nmutation createGameChoice($input: CreateGameChoiceInput!) {\n  createGameChoice(input: $input) {\n    clientMutationId\n    gameChoice {\n      ...gameChoiceFields\n    }\n  }\n}\n\nmutation updateGameChoiceByNodeId($input: UpdateGameChoiceByNodeIdInput!) {\n  updateGameChoiceByNodeId(input: $input) {\n    clientMutationId\n    gameChoice {\n      ...gameChoiceFields\n    }\n  }\n}':
    types.GameSubmissionFieldsFragmentDoc,
  'fragment gameFields on Game {\n  nodeId\n  id\n  name\n  gmNames\n  description\n  genre\n  type\n  setting\n  charInstructions\n  playerMax\n  playerMin\n  playerPreference\n  returningPlayers\n  playersContactGm\n  gameContactEmail\n  estimatedLength\n  slotPreference\n  lateStart\n  lateFinish\n  slotConflicts\n  message\n  slotId\n  teenFriendly\n  year\n  full\n  roomId\n  room {\n    description\n  }\n}\n\nfragment assignmentFields on GameAssignment {\n  ...gameAssignmentFields\n  member {\n    user {\n      email\n      fullName\n    }\n  }\n}\n\nfragment gameGms on Game {\n  gameAssignments(filter: {gm: {lessThan: 0}}) {\n    nodes {\n      ...assignmentFields\n    }\n  }\n}':
    types.GameFieldsFragmentDoc,
  'fragment gameRoomFields on Room {\n  id\n  description\n  size\n  type\n  updated\n}\n\nquery getGameRooms {\n  rooms {\n    nodes {\n      ...gameRoomFields\n    }\n  }\n}\n\nmutation updateGameRoom($input: UpdateRoomInput!) {\n  updateRoom(input: $input) {\n    room {\n      ...gameRoomFields\n    }\n  }\n}\n\nmutation createGameRoom($input: CreateRoomInput!) {\n  createRoom(input: $input) {\n    room {\n      ...gameRoomFields\n    }\n  }\n}\n\nmutation deleteGameRoom($input: DeleteRoomInput!) {\n  deleteRoom(input: $input) {\n    clientMutationId\n    deletedRoomNodeId\n  }\n}\n\nquery getGameRoomAndGames($year: Int) {\n  rooms {\n    nodes {\n      id\n      description\n      games(condition: {year: $year}, orderBy: SLOT_ID_ASC) {\n        nodes {\n          id\n          name\n          slotId\n          gmNames\n        }\n      }\n    }\n  }\n}':
    types.GameRoomFieldsFragmentDoc,
  'fragment hotelRoomFields on HotelRoom {\n  id\n  nodeId\n  description\n  gamingRoom\n  bathroomType\n  occupancy\n  rate\n  type\n  quantity\n}\n\nquery getHotelRooms {\n  hotelRooms {\n    edges {\n      node {\n        ...hotelRoomFields\n      }\n    }\n  }\n}\n\nmutation updateHotelRoomByNodeId($input: UpdateHotelRoomByNodeIdInput!) {\n  updateHotelRoomByNodeId(input: $input) {\n    hotelRoom {\n      ...hotelRoomFields\n    }\n  }\n}\n\nmutation createHotelRoom($input: CreateHotelRoomInput!) {\n  createHotelRoom(input: $input) {\n    hotelRoom {\n      ...hotelRoomFields\n    }\n  }\n}\n\nmutation deleteHotelRoom($input: DeleteHotelRoomInput!) {\n  deleteHotelRoom(input: $input) {\n    clientMutationId\n    deletedHotelRoomNodeId\n  }\n}':
    types.HotelRoomFieldsFragmentDoc,
  'fragment hotelRoomDetailsFields on HotelRoomDetail {\n  id\n  nodeId\n  name\n  roomType\n  comment\n  reservedFor\n  bathroomType\n  gamingRoom\n  enabled\n  formattedRoomType\n  internalRoomType\n  reserved\n}\n\nquery getHotelRoomDetails {\n  hotelRoomDetails {\n    edges {\n      node {\n        ...hotelRoomDetailsFields\n      }\n    }\n  }\n}\n\nmutation updateHotelRoomDetailByNodeId($input: UpdateHotelRoomDetailByNodeIdInput!) {\n  updateHotelRoomDetailByNodeId(input: $input) {\n    hotelRoomDetail {\n      ...hotelRoomDetailsFields\n    }\n  }\n}\n\nmutation createHotelRoomDetail($input: CreateHotelRoomDetailInput!) {\n  createHotelRoomDetail(input: $input) {\n    hotelRoomDetail {\n      ...hotelRoomDetailsFields\n    }\n  }\n}\n\nmutation deleteHotelRoomDetail($input: DeleteHotelRoomDetailInput!) {\n  deleteHotelRoomDetail(input: $input) {\n    clientMutationId\n    deletedHotelRoomDetailNodeId\n  }\n}':
    types.HotelRoomDetailsFieldsFragmentDoc,
  'fragment lookupFields on Lookup {\n  nodeId\n  id\n  realm\n}': types.LookupFieldsFragmentDoc,
  'fragment lookupValuesFields on LookupValue {\n  nodeId\n  id\n  code\n  sequencer\n  value\n}':
    types.LookupValuesFieldsFragmentDoc,
  'query getLookups {\n  lookups(orderBy: REALM_ASC) {\n    edges {\n      node {\n        ...lookupFields\n        lookupValues(orderBy: SEQUENCER_ASC) {\n          nodes {\n            ...lookupValuesFields\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getLookupValues($realm: String!) {\n  lookups(condition: {realm: $realm}) {\n    edges {\n      node {\n        ...lookupFields\n        lookupValues(orderBy: VALUE_ASC) {\n          nodes {\n            ...lookupValuesFields\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getSingleLookupValue($realm: String!, $code: String!) {\n  lookups(condition: {realm: $realm}) {\n    edges {\n      node {\n        ...lookupFields\n        lookupValues(condition: {code: $code}) {\n          nodes {\n            ...lookupValuesFields\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation updateLookupByNodeId($input: UpdateLookupByNodeIdInput!) {\n  updateLookupByNodeId(input: $input) {\n    lookup {\n      ...lookupFields\n    }\n  }\n}\n\nmutation createLookup($input: CreateLookupInput!) {\n  createLookup(input: $input) {\n    lookup {\n      ...lookupFields\n    }\n  }\n}\n\nmutation deleteLookup($input: DeleteLookupInput!) {\n  deleteLookup(input: $input) {\n    clientMutationId\n    deletedLookupNodeId\n  }\n}\n\nmutation updateLookupValueByNodeId($input: UpdateLookupValueByNodeIdInput!) {\n  updateLookupValueByNodeId(input: $input) {\n    lookupValue {\n      ...lookupValuesFields\n    }\n  }\n}\n\nmutation createLookupValue($input: CreateLookupValueInput!) {\n  createLookupValue(input: $input) {\n    lookupValue {\n      ...lookupValuesFields\n    }\n  }\n}\n\nmutation deleteLookupValue($input: DeleteLookupValueInput!) {\n  deleteLookupValue(input: $input) {\n    clientMutationId\n    deletedLookupValueNodeId\n  }\n}':
    types.GetLookupsDocument,
  'query getMembershipByYearAndId($year: Int!, $userId: Int!) {\n  memberships(condition: {userId: $userId, year: $year}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nquery getMembershipsByYear($year: Int!) {\n  memberships(condition: {year: $year}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nquery getMembershipRoomsByYear($year: Int!) {\n  memberships(condition: {year: $year}) {\n    nodes {\n      hotelRoom {\n        id\n        type\n        gamingRoom\n        bathroomType\n      }\n    }\n  }\n}\n\nquery getMembershipsById($id: Int!) {\n  memberships(condition: {id: $id}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nquery getMembershipByYearAndRoom($year: Int!, $hotelRoomId: Int!) {\n  memberships(condition: {year: $year, hotelRoomId: $hotelRoomId}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nmutation updateMembershipByNodeId($input: UpdateMembershipByNodeIdInput!) {\n  updateMembershipByNodeId(input: $input) {\n    membership {\n      ...membershipFields\n    }\n  }\n}\n\nmutation createMembership($input: CreateMembershipInput!) {\n  createMembership(input: $input) {\n    membership {\n      ...membershipFields\n    }\n  }\n}\n\nmutation deleteMembership($input: DeleteMembershipInput!) {\n  deleteMembership(input: $input) {\n    clientMutationId\n    deletedMembershipNodeId\n  }\n}\n\nquery getAllMembersBy($year: Int!, $query: String!) {\n  users(orderBy: LAST_NAME_ASC, filter: {fullName: {includesInsensitive: $query}}) {\n    nodes {\n      ...userFields\n      memberships(condition: {attending: true, year: $year}) {\n        nodes {\n          ...membershipFields\n        }\n      }\n    }\n  }\n}':
    types.GetMembershipByYearAndIdDocument,
  'fragment membershipFields on Membership {\n  nodeId\n  id\n  arrivalDate\n  attendance\n  attending\n  hotelRoomId\n  departureDate\n  interestLevel\n  message\n  offerSubsidy\n  requestOldPrice\n  roomPreferenceAndNotes\n  roomingPreferences\n  roomingWith\n  userId\n  volunteer\n  year\n  slotsAttending\n  user {\n    ...userAndProfileFields\n  }\n  hotelRoom {\n    type\n  }\n}':
    types.MembershipFieldsFragmentDoc,
  'fragment settingFields on Setting {\n  nodeId\n  id\n  code\n  type\n  value\n}\n\nquery getSettings {\n  settings {\n    nodes {\n      ...settingFields\n    }\n  }\n}\n\nmutation createSetting($input: CreateSettingInput!) {\n  createSetting(input: $input) {\n    setting {\n      ...settingFields\n    }\n  }\n}\n\nmutation deleteSetting($input: DeleteSettingInput!) {\n  deleteSetting(input: $input) {\n    clientMutationId\n    deletedSettingNodeId\n  }\n}\n\nmutation updateSettingByNodeId($input: UpdateSettingByNodeIdInput!) {\n  updateSettingByNodeId(input: $input) {\n    setting {\n      ...settingFields\n    }\n  }\n}':
    types.SettingFieldsFragmentDoc,
  'query getSlots {\n  slots {\n    nodes {\n      ...slotFields\n    }\n  }\n}': types.GetSlotsDocument,
  'fragment slotFields on Slot {\n  nodeId\n  id\n  slot\n  day\n  length\n  time\n}': types.SlotFieldsFragmentDoc,
  'query getStripe {\n  stripes {\n    nodes {\n      id\n      data\n    }\n  }\n}\n\nmutation createStripe($input: CreateStripeInput!) {\n  createStripe(input: $input) {\n    clientMutationId\n  }\n}':
    types.GetStripeDocument,
  'query getTransaction {\n  transactions {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByYear($year: Int!) {\n  transactions(condition: {year: $year}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByUser($userId: Int!) {\n  transactions(condition: {userId: $userId}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByYearAndUser($year: Int!, $userId: Int!) {\n  transactions(condition: {year: $year, userId: $userId}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByYearAndMember($year: Int!, $memberId: Int!) {\n  transactions(condition: {year: $year, memberId: $memberId}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nmutation createTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      ...transactionFields\n    }\n  }\n}\n\nmutation deleteTransaction($input: DeleteTransactionInput!) {\n  deleteTransaction(input: $input) {\n    clientMutationId\n    deletedTransactionNodeId\n  }\n}\n\nmutation updateTransactionByNodeId($input: UpdateTransactionByNodeIdInput!) {\n  updateTransactionByNodeId(input: $input) {\n    transaction {\n      ...transactionFields\n    }\n  }\n}':
    types.GetTransactionDocument,
  'fragment transactionFields on Transaction {\n  id\n  nodeId\n  userId\n  memberId\n  amount\n  origin\n  stripe\n  timestamp\n  year\n  notes\n  data\n  user {\n    fullName\n  }\n  userByOrigin {\n    fullName\n  }\n  member {\n    year\n  }\n}':
    types.TransactionFieldsFragmentDoc,
  'query getUserByEmail($email: String!) {\n  userByEmail(email: $email) {\n    ...userAndProfileFields\n  }\n}\n\nquery getUserById($id: Int!) {\n  user(id: $id) {\n    ...userFields\n  }\n}\n\nmutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    user {\n      ...userFields\n    }\n  }\n}\n\nquery getAllUsers {\n  users(orderBy: LAST_NAME_ASC) {\n    nodes {\n      ...userFields\n    }\n  }\n}\n\nquery getAllUsersAndProfiles {\n  users(orderBy: LAST_NAME_ASC) {\n    nodes {\n      ...userAndProfileFields\n    }\n  }\n}\n\nquery getAllUsersBy($query: String!) {\n  users(orderBy: LAST_NAME_ASC, filter: {fullName: {includesInsensitive: $query}}) {\n    nodes {\n      ...userFields\n      memberships(condition: {attending: true}) {\n        nodes {\n          id\n          year\n        }\n      }\n    }\n  }\n}\n\nmutation createProfile($input: CreateProfileInput!) {\n  createProfile(input: $input) {\n    clientMutationId\n  }\n}\n\nmutation updateProfileByNodeId($input: UpdateProfileByNodeIdInput!) {\n  updateProfileByNodeId(input: $input) {\n    clientMutationId\n  }\n}':
    types.GetUserByEmailDocument,
  'fragment userFields on User {\n  nodeId\n  id\n  email\n  fullName\n  firstName\n  lastName\n  displayName\n  balance\n}\n\nfragment profileFields on Profile {\n  nodeId\n  userId\n  phoneNumber\n  snailMailAddress\n}\n\nfragment userAndProfileFields on User {\n  ...userFields\n  profiles {\n    nodes {\n      ...profileFields\n    }\n  }\n}':
    types.UserFieldsFragmentDoc,
}

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query getGamesBySlotForSignup($year: Int!, $slotId: Int!) {\n  games(\n    filter: {or: [{and: [{or: [{year: {equalTo: $year}}, {year: {equalTo: 0}}]}, {slotId: {equalTo: $slotId}}]}, {and: [{year: {equalTo: 0}}, {slotId: {isNull: true}}]}]}\n    orderBy: [YEAR_DESC, SLOT_ID_ASC, NAME_ASC]\n  ) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nquery getGamesBySlot($year: Int!, $slotId: Int!) {\n  games(\n    condition: {year: $year, slotId: $slotId}\n    orderBy: [SLOT_ID_ASC, NAME_ASC]\n  ) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nquery getGamesByYear($year: Int!) {\n  games(\n    filter: {or: [{and: [{or: [{year: {equalTo: $year}}, {year: {equalTo: 0}}]}]}, {and: [{year: {equalTo: 0}}]}]}\n    orderBy: [YEAR_DESC, SLOT_ID_ASC, NAME_ASC]\n  ) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n        room {\n          ...gameRoomFields\n        }\n      }\n    }\n  }\n}\n\nquery getSmallGamesByYear($year: Int!) {\n  games(condition: {year: $year}, orderBy: [SLOT_ID_ASC, NAME_ASC], first: 1) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nmutation updateGameByNodeId($input: UpdateGameByNodeIdInput!) {\n  updateGameByNodeId(input: $input) {\n    game {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nmutation updateGame($input: UpdateGameInput!) {\n  updateGame(input: $input) {\n    game {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nmutation createGame($input: CreateGameInput!) {\n  createGame(input: $input) {\n    game {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nmutation deleteGame($input: DeleteGameInput!) {\n  deleteGame(input: $input) {\n    clientMutationId\n    deletedGameNodeId\n  }\n}\n\nquery getFirstGameOfSlot($year: Int!) {\n  games(orderBy: NAME_ASC, condition: {slotId: 1, year: $year}, first: 1) {\n    nodes {\n      ...gameFields\n      gameAssignments(filter: {gm: {lessThan: 0}}) {\n        nodes {\n          nodeId\n          gm\n          member {\n            user {\n              email\n              fullName\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getGamesByAuthor($id: Int!) {\n  user(id: $id) {\n    authoredGames {\n      nodes {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nquery getGamesByYearAndAuthor($year: Int!, $id: Int!) {\n  games(condition: {authorId: $id, year: $year}) {\n    nodes {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nquery getGameById($id: Int!) {\n  game(id: $id) {\n    ...gameFields\n    ...gameGms\n  }\n}',
): (typeof documents)['query getGamesBySlotForSignup($year: Int!, $slotId: Int!) {\n  games(\n    filter: {or: [{and: [{or: [{year: {equalTo: $year}}, {year: {equalTo: 0}}]}, {slotId: {equalTo: $slotId}}]}, {and: [{year: {equalTo: 0}}, {slotId: {isNull: true}}]}]}\n    orderBy: [YEAR_DESC, SLOT_ID_ASC, NAME_ASC]\n  ) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nquery getGamesBySlot($year: Int!, $slotId: Int!) {\n  games(\n    condition: {year: $year, slotId: $slotId}\n    orderBy: [SLOT_ID_ASC, NAME_ASC]\n  ) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nquery getGamesByYear($year: Int!) {\n  games(\n    filter: {or: [{and: [{or: [{year: {equalTo: $year}}, {year: {equalTo: 0}}]}]}, {and: [{year: {equalTo: 0}}]}]}\n    orderBy: [YEAR_DESC, SLOT_ID_ASC, NAME_ASC]\n  ) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n        room {\n          ...gameRoomFields\n        }\n      }\n    }\n  }\n}\n\nquery getSmallGamesByYear($year: Int!) {\n  games(condition: {year: $year}, orderBy: [SLOT_ID_ASC, NAME_ASC], first: 1) {\n    edges {\n      node {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nmutation updateGameByNodeId($input: UpdateGameByNodeIdInput!) {\n  updateGameByNodeId(input: $input) {\n    game {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nmutation updateGame($input: UpdateGameInput!) {\n  updateGame(input: $input) {\n    game {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nmutation createGame($input: CreateGameInput!) {\n  createGame(input: $input) {\n    game {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nmutation deleteGame($input: DeleteGameInput!) {\n  deleteGame(input: $input) {\n    clientMutationId\n    deletedGameNodeId\n  }\n}\n\nquery getFirstGameOfSlot($year: Int!) {\n  games(orderBy: NAME_ASC, condition: {slotId: 1, year: $year}, first: 1) {\n    nodes {\n      ...gameFields\n      gameAssignments(filter: {gm: {lessThan: 0}}) {\n        nodes {\n          nodeId\n          gm\n          member {\n            user {\n              email\n              fullName\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getGamesByAuthor($id: Int!) {\n  user(id: $id) {\n    authoredGames {\n      nodes {\n        ...gameFields\n        ...gameGms\n      }\n    }\n  }\n}\n\nquery getGamesByYearAndAuthor($year: Int!, $id: Int!) {\n  games(condition: {authorId: $id, year: $year}) {\n    nodes {\n      ...gameFields\n      ...gameGms\n    }\n  }\n}\n\nquery getGameById($id: Int!) {\n  game(id: $id) {\n    ...gameFields\n    ...gameGms\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment gameAssignmentFields on GameAssignment {\n  gameId\n  gm\n  memberId\n  nodeId\n  year\n}',
): (typeof documents)['fragment gameAssignmentFields on GameAssignment {\n  gameId\n  gm\n  memberId\n  nodeId\n  year\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query getGameAssignmentsByYear($year: Int!) {\n  gameAssignments(condition: {year: $year}) {\n    nodes {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nquery getGameAssignmentsByGameId($gameId: Int!) {\n  gameAssignments(condition: {gameId: $gameId}) {\n    nodes {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nquery getGameAssignmentsByMemberId($memberId: Int!) {\n  gameAssignments(condition: {memberId: $memberId}) {\n    nodes {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nmutation updateGameAssignmentByNodeId($input: UpdateGameAssignmentByNodeIdInput!) {\n  updateGameAssignmentByNodeId(input: $input) {\n    gameAssignment {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nmutation createGameAssignment($input: CreateGameAssignmentInput!) {\n  createGameAssignment(input: $input) {\n    gameAssignment {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nmutation deleteGameAssignment($input: DeleteGameAssignmentByNodeIdInput!) {\n  deleteGameAssignmentByNodeId(input: $input) {\n    clientMutationId\n    deletedGameAssignmentNodeId\n  }\n}\n\nquery getSchedule($memberId: Int!) {\n  gameAssignments(\n    condition: {memberId: $memberId}\n    filter: {gm: {greaterThanOrEqualTo: 0}}\n  ) {\n    nodes {\n      game {\n        ...gameFields\n        gameAssignments(filter: {gm: {greaterThanOrEqualTo: 0}}) {\n          nodes {\n            ...assignmentFields\n          }\n        }\n      }\n      ...gameAssignmentFields\n    }\n  }\n}',
): (typeof documents)['query getGameAssignmentsByYear($year: Int!) {\n  gameAssignments(condition: {year: $year}) {\n    nodes {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nquery getGameAssignmentsByGameId($gameId: Int!) {\n  gameAssignments(condition: {gameId: $gameId}) {\n    nodes {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nquery getGameAssignmentsByMemberId($memberId: Int!) {\n  gameAssignments(condition: {memberId: $memberId}) {\n    nodes {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nmutation updateGameAssignmentByNodeId($input: UpdateGameAssignmentByNodeIdInput!) {\n  updateGameAssignmentByNodeId(input: $input) {\n    gameAssignment {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nmutation createGameAssignment($input: CreateGameAssignmentInput!) {\n  createGameAssignment(input: $input) {\n    gameAssignment {\n      ...gameAssignmentFields\n    }\n  }\n}\n\nmutation deleteGameAssignment($input: DeleteGameAssignmentByNodeIdInput!) {\n  deleteGameAssignmentByNodeId(input: $input) {\n    clientMutationId\n    deletedGameAssignmentNodeId\n  }\n}\n\nquery getSchedule($memberId: Int!) {\n  gameAssignments(\n    condition: {memberId: $memberId}\n    filter: {gm: {greaterThanOrEqualTo: 0}}\n  ) {\n    nodes {\n      game {\n        ...gameFields\n        gameAssignments(filter: {gm: {greaterThanOrEqualTo: 0}}) {\n          nodes {\n            ...assignmentFields\n          }\n        }\n      }\n      ...gameAssignmentFields\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment gameSubmissionFields on GameSubmission {\n  id\n  memberId\n  message\n  nodeId\n  year\n}\n\nfragment gameChoiceFields on GameChoice {\n  gameId\n  id\n  memberId\n  nodeId\n  rank\n  returningPlayer\n  slotId\n  year\n}\n\nmutation createGameChoices($year: Int!, $slots: Int!, $memberId: Int!) {\n  createBareSlotChoices(\n    input: {memberId: $memberId, yearNo: $year, noSlots: $slots}\n  ) {\n    clientMutationId\n  }\n}\n\nquery getGameChoices($year: Int!, $memberId: Int!) {\n  gameSubmissions(condition: {memberId: $memberId, year: $year}) {\n    nodes {\n      ...gameSubmissionFields\n    }\n  }\n  gameChoices(condition: {memberId: $memberId, year: $year}) {\n    nodes {\n      ...gameChoiceFields\n    }\n  }\n}\n\nquery readGameChoice($id: Int!) {\n  gameChoice(id: $id) {\n    ...gameChoiceFields\n  }\n}\n\nmutation createGameSubmission($input: CreateGameSubmissionInput!) {\n  createGameSubmission(input: $input) {\n    clientMutationId\n    gameSubmission {\n      ...gameSubmissionFields\n    }\n  }\n}\n\nmutation updateGameSubmissionByNodeId($input: UpdateGameSubmissionByNodeIdInput!) {\n  updateGameSubmissionByNodeId(input: $input) {\n    clientMutationId\n    gameSubmission {\n      ...gameSubmissionFields\n    }\n  }\n}\n\nmutation createGameChoice($input: CreateGameChoiceInput!) {\n  createGameChoice(input: $input) {\n    clientMutationId\n    gameChoice {\n      ...gameChoiceFields\n    }\n  }\n}\n\nmutation updateGameChoiceByNodeId($input: UpdateGameChoiceByNodeIdInput!) {\n  updateGameChoiceByNodeId(input: $input) {\n    clientMutationId\n    gameChoice {\n      ...gameChoiceFields\n    }\n  }\n}',
): (typeof documents)['fragment gameSubmissionFields on GameSubmission {\n  id\n  memberId\n  message\n  nodeId\n  year\n}\n\nfragment gameChoiceFields on GameChoice {\n  gameId\n  id\n  memberId\n  nodeId\n  rank\n  returningPlayer\n  slotId\n  year\n}\n\nmutation createGameChoices($year: Int!, $slots: Int!, $memberId: Int!) {\n  createBareSlotChoices(\n    input: {memberId: $memberId, yearNo: $year, noSlots: $slots}\n  ) {\n    clientMutationId\n  }\n}\n\nquery getGameChoices($year: Int!, $memberId: Int!) {\n  gameSubmissions(condition: {memberId: $memberId, year: $year}) {\n    nodes {\n      ...gameSubmissionFields\n    }\n  }\n  gameChoices(condition: {memberId: $memberId, year: $year}) {\n    nodes {\n      ...gameChoiceFields\n    }\n  }\n}\n\nquery readGameChoice($id: Int!) {\n  gameChoice(id: $id) {\n    ...gameChoiceFields\n  }\n}\n\nmutation createGameSubmission($input: CreateGameSubmissionInput!) {\n  createGameSubmission(input: $input) {\n    clientMutationId\n    gameSubmission {\n      ...gameSubmissionFields\n    }\n  }\n}\n\nmutation updateGameSubmissionByNodeId($input: UpdateGameSubmissionByNodeIdInput!) {\n  updateGameSubmissionByNodeId(input: $input) {\n    clientMutationId\n    gameSubmission {\n      ...gameSubmissionFields\n    }\n  }\n}\n\nmutation createGameChoice($input: CreateGameChoiceInput!) {\n  createGameChoice(input: $input) {\n    clientMutationId\n    gameChoice {\n      ...gameChoiceFields\n    }\n  }\n}\n\nmutation updateGameChoiceByNodeId($input: UpdateGameChoiceByNodeIdInput!) {\n  updateGameChoiceByNodeId(input: $input) {\n    clientMutationId\n    gameChoice {\n      ...gameChoiceFields\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment gameFields on Game {\n  nodeId\n  id\n  name\n  gmNames\n  description\n  genre\n  type\n  setting\n  charInstructions\n  playerMax\n  playerMin\n  playerPreference\n  returningPlayers\n  playersContactGm\n  gameContactEmail\n  estimatedLength\n  slotPreference\n  lateStart\n  lateFinish\n  slotConflicts\n  message\n  slotId\n  teenFriendly\n  year\n  full\n  roomId\n  room {\n    description\n  }\n}\n\nfragment assignmentFields on GameAssignment {\n  ...gameAssignmentFields\n  member {\n    user {\n      email\n      fullName\n    }\n  }\n}\n\nfragment gameGms on Game {\n  gameAssignments(filter: {gm: {lessThan: 0}}) {\n    nodes {\n      ...assignmentFields\n    }\n  }\n}',
): (typeof documents)['fragment gameFields on Game {\n  nodeId\n  id\n  name\n  gmNames\n  description\n  genre\n  type\n  setting\n  charInstructions\n  playerMax\n  playerMin\n  playerPreference\n  returningPlayers\n  playersContactGm\n  gameContactEmail\n  estimatedLength\n  slotPreference\n  lateStart\n  lateFinish\n  slotConflicts\n  message\n  slotId\n  teenFriendly\n  year\n  full\n  roomId\n  room {\n    description\n  }\n}\n\nfragment assignmentFields on GameAssignment {\n  ...gameAssignmentFields\n  member {\n    user {\n      email\n      fullName\n    }\n  }\n}\n\nfragment gameGms on Game {\n  gameAssignments(filter: {gm: {lessThan: 0}}) {\n    nodes {\n      ...assignmentFields\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment gameRoomFields on Room {\n  id\n  description\n  size\n  type\n  updated\n}\n\nquery getGameRooms {\n  rooms {\n    nodes {\n      ...gameRoomFields\n    }\n  }\n}\n\nmutation updateGameRoom($input: UpdateRoomInput!) {\n  updateRoom(input: $input) {\n    room {\n      ...gameRoomFields\n    }\n  }\n}\n\nmutation createGameRoom($input: CreateRoomInput!) {\n  createRoom(input: $input) {\n    room {\n      ...gameRoomFields\n    }\n  }\n}\n\nmutation deleteGameRoom($input: DeleteRoomInput!) {\n  deleteRoom(input: $input) {\n    clientMutationId\n    deletedRoomNodeId\n  }\n}\n\nquery getGameRoomAndGames($year: Int) {\n  rooms {\n    nodes {\n      id\n      description\n      games(condition: {year: $year}, orderBy: SLOT_ID_ASC) {\n        nodes {\n          id\n          name\n          slotId\n          gmNames\n        }\n      }\n    }\n  }\n}',
): (typeof documents)['fragment gameRoomFields on Room {\n  id\n  description\n  size\n  type\n  updated\n}\n\nquery getGameRooms {\n  rooms {\n    nodes {\n      ...gameRoomFields\n    }\n  }\n}\n\nmutation updateGameRoom($input: UpdateRoomInput!) {\n  updateRoom(input: $input) {\n    room {\n      ...gameRoomFields\n    }\n  }\n}\n\nmutation createGameRoom($input: CreateRoomInput!) {\n  createRoom(input: $input) {\n    room {\n      ...gameRoomFields\n    }\n  }\n}\n\nmutation deleteGameRoom($input: DeleteRoomInput!) {\n  deleteRoom(input: $input) {\n    clientMutationId\n    deletedRoomNodeId\n  }\n}\n\nquery getGameRoomAndGames($year: Int) {\n  rooms {\n    nodes {\n      id\n      description\n      games(condition: {year: $year}, orderBy: SLOT_ID_ASC) {\n        nodes {\n          id\n          name\n          slotId\n          gmNames\n        }\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment hotelRoomFields on HotelRoom {\n  id\n  nodeId\n  description\n  gamingRoom\n  bathroomType\n  occupancy\n  rate\n  type\n  quantity\n}\n\nquery getHotelRooms {\n  hotelRooms {\n    edges {\n      node {\n        ...hotelRoomFields\n      }\n    }\n  }\n}\n\nmutation updateHotelRoomByNodeId($input: UpdateHotelRoomByNodeIdInput!) {\n  updateHotelRoomByNodeId(input: $input) {\n    hotelRoom {\n      ...hotelRoomFields\n    }\n  }\n}\n\nmutation createHotelRoom($input: CreateHotelRoomInput!) {\n  createHotelRoom(input: $input) {\n    hotelRoom {\n      ...hotelRoomFields\n    }\n  }\n}\n\nmutation deleteHotelRoom($input: DeleteHotelRoomInput!) {\n  deleteHotelRoom(input: $input) {\n    clientMutationId\n    deletedHotelRoomNodeId\n  }\n}',
): (typeof documents)['fragment hotelRoomFields on HotelRoom {\n  id\n  nodeId\n  description\n  gamingRoom\n  bathroomType\n  occupancy\n  rate\n  type\n  quantity\n}\n\nquery getHotelRooms {\n  hotelRooms {\n    edges {\n      node {\n        ...hotelRoomFields\n      }\n    }\n  }\n}\n\nmutation updateHotelRoomByNodeId($input: UpdateHotelRoomByNodeIdInput!) {\n  updateHotelRoomByNodeId(input: $input) {\n    hotelRoom {\n      ...hotelRoomFields\n    }\n  }\n}\n\nmutation createHotelRoom($input: CreateHotelRoomInput!) {\n  createHotelRoom(input: $input) {\n    hotelRoom {\n      ...hotelRoomFields\n    }\n  }\n}\n\nmutation deleteHotelRoom($input: DeleteHotelRoomInput!) {\n  deleteHotelRoom(input: $input) {\n    clientMutationId\n    deletedHotelRoomNodeId\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment hotelRoomDetailsFields on HotelRoomDetail {\n  id\n  nodeId\n  name\n  roomType\n  comment\n  reservedFor\n  bathroomType\n  gamingRoom\n  enabled\n  formattedRoomType\n  internalRoomType\n  reserved\n}\n\nquery getHotelRoomDetails {\n  hotelRoomDetails {\n    edges {\n      node {\n        ...hotelRoomDetailsFields\n      }\n    }\n  }\n}\n\nmutation updateHotelRoomDetailByNodeId($input: UpdateHotelRoomDetailByNodeIdInput!) {\n  updateHotelRoomDetailByNodeId(input: $input) {\n    hotelRoomDetail {\n      ...hotelRoomDetailsFields\n    }\n  }\n}\n\nmutation createHotelRoomDetail($input: CreateHotelRoomDetailInput!) {\n  createHotelRoomDetail(input: $input) {\n    hotelRoomDetail {\n      ...hotelRoomDetailsFields\n    }\n  }\n}\n\nmutation deleteHotelRoomDetail($input: DeleteHotelRoomDetailInput!) {\n  deleteHotelRoomDetail(input: $input) {\n    clientMutationId\n    deletedHotelRoomDetailNodeId\n  }\n}',
): (typeof documents)['fragment hotelRoomDetailsFields on HotelRoomDetail {\n  id\n  nodeId\n  name\n  roomType\n  comment\n  reservedFor\n  bathroomType\n  gamingRoom\n  enabled\n  formattedRoomType\n  internalRoomType\n  reserved\n}\n\nquery getHotelRoomDetails {\n  hotelRoomDetails {\n    edges {\n      node {\n        ...hotelRoomDetailsFields\n      }\n    }\n  }\n}\n\nmutation updateHotelRoomDetailByNodeId($input: UpdateHotelRoomDetailByNodeIdInput!) {\n  updateHotelRoomDetailByNodeId(input: $input) {\n    hotelRoomDetail {\n      ...hotelRoomDetailsFields\n    }\n  }\n}\n\nmutation createHotelRoomDetail($input: CreateHotelRoomDetailInput!) {\n  createHotelRoomDetail(input: $input) {\n    hotelRoomDetail {\n      ...hotelRoomDetailsFields\n    }\n  }\n}\n\nmutation deleteHotelRoomDetail($input: DeleteHotelRoomDetailInput!) {\n  deleteHotelRoomDetail(input: $input) {\n    clientMutationId\n    deletedHotelRoomDetailNodeId\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment lookupFields on Lookup {\n  nodeId\n  id\n  realm\n}',
): (typeof documents)['fragment lookupFields on Lookup {\n  nodeId\n  id\n  realm\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment lookupValuesFields on LookupValue {\n  nodeId\n  id\n  code\n  sequencer\n  value\n}',
): (typeof documents)['fragment lookupValuesFields on LookupValue {\n  nodeId\n  id\n  code\n  sequencer\n  value\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query getLookups {\n  lookups(orderBy: REALM_ASC) {\n    edges {\n      node {\n        ...lookupFields\n        lookupValues(orderBy: SEQUENCER_ASC) {\n          nodes {\n            ...lookupValuesFields\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getLookupValues($realm: String!) {\n  lookups(condition: {realm: $realm}) {\n    edges {\n      node {\n        ...lookupFields\n        lookupValues(orderBy: VALUE_ASC) {\n          nodes {\n            ...lookupValuesFields\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getSingleLookupValue($realm: String!, $code: String!) {\n  lookups(condition: {realm: $realm}) {\n    edges {\n      node {\n        ...lookupFields\n        lookupValues(condition: {code: $code}) {\n          nodes {\n            ...lookupValuesFields\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation updateLookupByNodeId($input: UpdateLookupByNodeIdInput!) {\n  updateLookupByNodeId(input: $input) {\n    lookup {\n      ...lookupFields\n    }\n  }\n}\n\nmutation createLookup($input: CreateLookupInput!) {\n  createLookup(input: $input) {\n    lookup {\n      ...lookupFields\n    }\n  }\n}\n\nmutation deleteLookup($input: DeleteLookupInput!) {\n  deleteLookup(input: $input) {\n    clientMutationId\n    deletedLookupNodeId\n  }\n}\n\nmutation updateLookupValueByNodeId($input: UpdateLookupValueByNodeIdInput!) {\n  updateLookupValueByNodeId(input: $input) {\n    lookupValue {\n      ...lookupValuesFields\n    }\n  }\n}\n\nmutation createLookupValue($input: CreateLookupValueInput!) {\n  createLookupValue(input: $input) {\n    lookupValue {\n      ...lookupValuesFields\n    }\n  }\n}\n\nmutation deleteLookupValue($input: DeleteLookupValueInput!) {\n  deleteLookupValue(input: $input) {\n    clientMutationId\n    deletedLookupValueNodeId\n  }\n}',
): (typeof documents)['query getLookups {\n  lookups(orderBy: REALM_ASC) {\n    edges {\n      node {\n        ...lookupFields\n        lookupValues(orderBy: SEQUENCER_ASC) {\n          nodes {\n            ...lookupValuesFields\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getLookupValues($realm: String!) {\n  lookups(condition: {realm: $realm}) {\n    edges {\n      node {\n        ...lookupFields\n        lookupValues(orderBy: VALUE_ASC) {\n          nodes {\n            ...lookupValuesFields\n          }\n        }\n      }\n    }\n  }\n}\n\nquery getSingleLookupValue($realm: String!, $code: String!) {\n  lookups(condition: {realm: $realm}) {\n    edges {\n      node {\n        ...lookupFields\n        lookupValues(condition: {code: $code}) {\n          nodes {\n            ...lookupValuesFields\n          }\n        }\n      }\n    }\n  }\n}\n\nmutation updateLookupByNodeId($input: UpdateLookupByNodeIdInput!) {\n  updateLookupByNodeId(input: $input) {\n    lookup {\n      ...lookupFields\n    }\n  }\n}\n\nmutation createLookup($input: CreateLookupInput!) {\n  createLookup(input: $input) {\n    lookup {\n      ...lookupFields\n    }\n  }\n}\n\nmutation deleteLookup($input: DeleteLookupInput!) {\n  deleteLookup(input: $input) {\n    clientMutationId\n    deletedLookupNodeId\n  }\n}\n\nmutation updateLookupValueByNodeId($input: UpdateLookupValueByNodeIdInput!) {\n  updateLookupValueByNodeId(input: $input) {\n    lookupValue {\n      ...lookupValuesFields\n    }\n  }\n}\n\nmutation createLookupValue($input: CreateLookupValueInput!) {\n  createLookupValue(input: $input) {\n    lookupValue {\n      ...lookupValuesFields\n    }\n  }\n}\n\nmutation deleteLookupValue($input: DeleteLookupValueInput!) {\n  deleteLookupValue(input: $input) {\n    clientMutationId\n    deletedLookupValueNodeId\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query getMembershipByYearAndId($year: Int!, $userId: Int!) {\n  memberships(condition: {userId: $userId, year: $year}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nquery getMembershipsByYear($year: Int!) {\n  memberships(condition: {year: $year}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nquery getMembershipRoomsByYear($year: Int!) {\n  memberships(condition: {year: $year}) {\n    nodes {\n      hotelRoom {\n        id\n        type\n        gamingRoom\n        bathroomType\n      }\n    }\n  }\n}\n\nquery getMembershipsById($id: Int!) {\n  memberships(condition: {id: $id}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nquery getMembershipByYearAndRoom($year: Int!, $hotelRoomId: Int!) {\n  memberships(condition: {year: $year, hotelRoomId: $hotelRoomId}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nmutation updateMembershipByNodeId($input: UpdateMembershipByNodeIdInput!) {\n  updateMembershipByNodeId(input: $input) {\n    membership {\n      ...membershipFields\n    }\n  }\n}\n\nmutation createMembership($input: CreateMembershipInput!) {\n  createMembership(input: $input) {\n    membership {\n      ...membershipFields\n    }\n  }\n}\n\nmutation deleteMembership($input: DeleteMembershipInput!) {\n  deleteMembership(input: $input) {\n    clientMutationId\n    deletedMembershipNodeId\n  }\n}\n\nquery getAllMembersBy($year: Int!, $query: String!) {\n  users(orderBy: LAST_NAME_ASC, filter: {fullName: {includesInsensitive: $query}}) {\n    nodes {\n      ...userFields\n      memberships(condition: {attending: true, year: $year}) {\n        nodes {\n          ...membershipFields\n        }\n      }\n    }\n  }\n}',
): (typeof documents)['query getMembershipByYearAndId($year: Int!, $userId: Int!) {\n  memberships(condition: {userId: $userId, year: $year}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nquery getMembershipsByYear($year: Int!) {\n  memberships(condition: {year: $year}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nquery getMembershipRoomsByYear($year: Int!) {\n  memberships(condition: {year: $year}) {\n    nodes {\n      hotelRoom {\n        id\n        type\n        gamingRoom\n        bathroomType\n      }\n    }\n  }\n}\n\nquery getMembershipsById($id: Int!) {\n  memberships(condition: {id: $id}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nquery getMembershipByYearAndRoom($year: Int!, $hotelRoomId: Int!) {\n  memberships(condition: {year: $year, hotelRoomId: $hotelRoomId}) {\n    nodes {\n      ...membershipFields\n    }\n  }\n}\n\nmutation updateMembershipByNodeId($input: UpdateMembershipByNodeIdInput!) {\n  updateMembershipByNodeId(input: $input) {\n    membership {\n      ...membershipFields\n    }\n  }\n}\n\nmutation createMembership($input: CreateMembershipInput!) {\n  createMembership(input: $input) {\n    membership {\n      ...membershipFields\n    }\n  }\n}\n\nmutation deleteMembership($input: DeleteMembershipInput!) {\n  deleteMembership(input: $input) {\n    clientMutationId\n    deletedMembershipNodeId\n  }\n}\n\nquery getAllMembersBy($year: Int!, $query: String!) {\n  users(orderBy: LAST_NAME_ASC, filter: {fullName: {includesInsensitive: $query}}) {\n    nodes {\n      ...userFields\n      memberships(condition: {attending: true, year: $year}) {\n        nodes {\n          ...membershipFields\n        }\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment membershipFields on Membership {\n  nodeId\n  id\n  arrivalDate\n  attendance\n  attending\n  hotelRoomId\n  departureDate\n  interestLevel\n  message\n  offerSubsidy\n  requestOldPrice\n  roomPreferenceAndNotes\n  roomingPreferences\n  roomingWith\n  userId\n  volunteer\n  year\n  slotsAttending\n  user {\n    ...userAndProfileFields\n  }\n  hotelRoom {\n    type\n  }\n}',
): (typeof documents)['fragment membershipFields on Membership {\n  nodeId\n  id\n  arrivalDate\n  attendance\n  attending\n  hotelRoomId\n  departureDate\n  interestLevel\n  message\n  offerSubsidy\n  requestOldPrice\n  roomPreferenceAndNotes\n  roomingPreferences\n  roomingWith\n  userId\n  volunteer\n  year\n  slotsAttending\n  user {\n    ...userAndProfileFields\n  }\n  hotelRoom {\n    type\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment settingFields on Setting {\n  nodeId\n  id\n  code\n  type\n  value\n}\n\nquery getSettings {\n  settings {\n    nodes {\n      ...settingFields\n    }\n  }\n}\n\nmutation createSetting($input: CreateSettingInput!) {\n  createSetting(input: $input) {\n    setting {\n      ...settingFields\n    }\n  }\n}\n\nmutation deleteSetting($input: DeleteSettingInput!) {\n  deleteSetting(input: $input) {\n    clientMutationId\n    deletedSettingNodeId\n  }\n}\n\nmutation updateSettingByNodeId($input: UpdateSettingByNodeIdInput!) {\n  updateSettingByNodeId(input: $input) {\n    setting {\n      ...settingFields\n    }\n  }\n}',
): (typeof documents)['fragment settingFields on Setting {\n  nodeId\n  id\n  code\n  type\n  value\n}\n\nquery getSettings {\n  settings {\n    nodes {\n      ...settingFields\n    }\n  }\n}\n\nmutation createSetting($input: CreateSettingInput!) {\n  createSetting(input: $input) {\n    setting {\n      ...settingFields\n    }\n  }\n}\n\nmutation deleteSetting($input: DeleteSettingInput!) {\n  deleteSetting(input: $input) {\n    clientMutationId\n    deletedSettingNodeId\n  }\n}\n\nmutation updateSettingByNodeId($input: UpdateSettingByNodeIdInput!) {\n  updateSettingByNodeId(input: $input) {\n    setting {\n      ...settingFields\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query getSlots {\n  slots {\n    nodes {\n      ...slotFields\n    }\n  }\n}',
): (typeof documents)['query getSlots {\n  slots {\n    nodes {\n      ...slotFields\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment slotFields on Slot {\n  nodeId\n  id\n  slot\n  day\n  length\n  time\n}',
): (typeof documents)['fragment slotFields on Slot {\n  nodeId\n  id\n  slot\n  day\n  length\n  time\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query getStripe {\n  stripes {\n    nodes {\n      id\n      data\n    }\n  }\n}\n\nmutation createStripe($input: CreateStripeInput!) {\n  createStripe(input: $input) {\n    clientMutationId\n  }\n}',
): (typeof documents)['query getStripe {\n  stripes {\n    nodes {\n      id\n      data\n    }\n  }\n}\n\nmutation createStripe($input: CreateStripeInput!) {\n  createStripe(input: $input) {\n    clientMutationId\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query getTransaction {\n  transactions {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByYear($year: Int!) {\n  transactions(condition: {year: $year}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByUser($userId: Int!) {\n  transactions(condition: {userId: $userId}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByYearAndUser($year: Int!, $userId: Int!) {\n  transactions(condition: {year: $year, userId: $userId}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByYearAndMember($year: Int!, $memberId: Int!) {\n  transactions(condition: {year: $year, memberId: $memberId}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nmutation createTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      ...transactionFields\n    }\n  }\n}\n\nmutation deleteTransaction($input: DeleteTransactionInput!) {\n  deleteTransaction(input: $input) {\n    clientMutationId\n    deletedTransactionNodeId\n  }\n}\n\nmutation updateTransactionByNodeId($input: UpdateTransactionByNodeIdInput!) {\n  updateTransactionByNodeId(input: $input) {\n    transaction {\n      ...transactionFields\n    }\n  }\n}',
): (typeof documents)['query getTransaction {\n  transactions {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByYear($year: Int!) {\n  transactions(condition: {year: $year}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByUser($userId: Int!) {\n  transactions(condition: {userId: $userId}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByYearAndUser($year: Int!, $userId: Int!) {\n  transactions(condition: {year: $year, userId: $userId}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nquery getTransactionByYearAndMember($year: Int!, $memberId: Int!) {\n  transactions(condition: {year: $year, memberId: $memberId}) {\n    nodes {\n      ...transactionFields\n    }\n  }\n}\n\nmutation createTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      ...transactionFields\n    }\n  }\n}\n\nmutation deleteTransaction($input: DeleteTransactionInput!) {\n  deleteTransaction(input: $input) {\n    clientMutationId\n    deletedTransactionNodeId\n  }\n}\n\nmutation updateTransactionByNodeId($input: UpdateTransactionByNodeIdInput!) {\n  updateTransactionByNodeId(input: $input) {\n    transaction {\n      ...transactionFields\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment transactionFields on Transaction {\n  id\n  nodeId\n  userId\n  memberId\n  amount\n  origin\n  stripe\n  timestamp\n  year\n  notes\n  data\n  user {\n    fullName\n  }\n  userByOrigin {\n    fullName\n  }\n  member {\n    year\n  }\n}',
): (typeof documents)['fragment transactionFields on Transaction {\n  id\n  nodeId\n  userId\n  memberId\n  amount\n  origin\n  stripe\n  timestamp\n  year\n  notes\n  data\n  user {\n    fullName\n  }\n  userByOrigin {\n    fullName\n  }\n  member {\n    year\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query getUserByEmail($email: String!) {\n  userByEmail(email: $email) {\n    ...userAndProfileFields\n  }\n}\n\nquery getUserById($id: Int!) {\n  user(id: $id) {\n    ...userFields\n  }\n}\n\nmutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    user {\n      ...userFields\n    }\n  }\n}\n\nquery getAllUsers {\n  users(orderBy: LAST_NAME_ASC) {\n    nodes {\n      ...userFields\n    }\n  }\n}\n\nquery getAllUsersAndProfiles {\n  users(orderBy: LAST_NAME_ASC) {\n    nodes {\n      ...userAndProfileFields\n    }\n  }\n}\n\nquery getAllUsersBy($query: String!) {\n  users(orderBy: LAST_NAME_ASC, filter: {fullName: {includesInsensitive: $query}}) {\n    nodes {\n      ...userFields\n      memberships(condition: {attending: true}) {\n        nodes {\n          id\n          year\n        }\n      }\n    }\n  }\n}\n\nmutation createProfile($input: CreateProfileInput!) {\n  createProfile(input: $input) {\n    clientMutationId\n  }\n}\n\nmutation updateProfileByNodeId($input: UpdateProfileByNodeIdInput!) {\n  updateProfileByNodeId(input: $input) {\n    clientMutationId\n  }\n}',
): (typeof documents)['query getUserByEmail($email: String!) {\n  userByEmail(email: $email) {\n    ...userAndProfileFields\n  }\n}\n\nquery getUserById($id: Int!) {\n  user(id: $id) {\n    ...userFields\n  }\n}\n\nmutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    user {\n      ...userFields\n    }\n  }\n}\n\nquery getAllUsers {\n  users(orderBy: LAST_NAME_ASC) {\n    nodes {\n      ...userFields\n    }\n  }\n}\n\nquery getAllUsersAndProfiles {\n  users(orderBy: LAST_NAME_ASC) {\n    nodes {\n      ...userAndProfileFields\n    }\n  }\n}\n\nquery getAllUsersBy($query: String!) {\n  users(orderBy: LAST_NAME_ASC, filter: {fullName: {includesInsensitive: $query}}) {\n    nodes {\n      ...userFields\n      memberships(condition: {attending: true}) {\n        nodes {\n          id\n          year\n        }\n      }\n    }\n  }\n}\n\nmutation createProfile($input: CreateProfileInput!) {\n  createProfile(input: $input) {\n    clientMutationId\n  }\n}\n\nmutation updateProfileByNodeId($input: UpdateProfileByNodeIdInput!) {\n  updateProfileByNodeId(input: $input) {\n    clientMutationId\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment userFields on User {\n  nodeId\n  id\n  email\n  fullName\n  firstName\n  lastName\n  displayName\n  balance\n}\n\nfragment profileFields on Profile {\n  nodeId\n  userId\n  phoneNumber\n  snailMailAddress\n}\n\nfragment userAndProfileFields on User {\n  ...userFields\n  profiles {\n    nodes {\n      ...profileFields\n    }\n  }\n}',
): (typeof documents)['fragment userFields on User {\n  nodeId\n  id\n  email\n  fullName\n  firstName\n  lastName\n  displayName\n  balance\n}\n\nfragment profileFields on Profile {\n  nodeId\n  userId\n  phoneNumber\n  snailMailAddress\n}\n\nfragment userAndProfileFields on User {\n  ...userFields\n  profiles {\n    nodes {\n      ...profileFields\n    }\n  }\n}']

export function graphql(source: string) {
  return (documents as any)[source] ?? {}
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<
  infer TType,
  any
>
  ? TType
  : never
