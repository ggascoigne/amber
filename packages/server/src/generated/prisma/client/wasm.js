
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  description: 'description',
  lateFinish: 'lateFinish',
  lateStart: 'lateStart',
  name: 'name',
  playerMax: 'playerMax',
  playerMin: 'playerMin',
  roomId: 'roomId',
  shortName: 'shortName',
  slotId: 'slotId',
  charInstructions: 'charInstructions',
  estimatedLength: 'estimatedLength',
  gameContactEmail: 'gameContactEmail',
  genre: 'genre',
  gmNames: 'gmNames',
  message: 'message',
  playerPreference: 'playerPreference',
  playersContactGm: 'playersContactGm',
  returningPlayers: 'returningPlayers',
  setting: 'setting',
  slotConflicts: 'slotConflicts',
  slotPreference: 'slotPreference',
  teenFriendly: 'teenFriendly',
  type: 'type',
  year: 'year',
  authorId: 'authorId',
  full: 'full'
};

exports.Prisma.GameAssignmentScalarFieldEnum = {
  memberId: 'memberId',
  gameId: 'gameId',
  gm: 'gm',
  year: 'year'
};

exports.Prisma.GameChoiceScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId',
  memberId: 'memberId',
  rank: 'rank',
  slotId: 'slotId',
  year: 'year',
  returningPlayer: 'returningPlayer'
};

exports.Prisma.GameSubmissionScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  message: 'message',
  year: 'year'
};

exports.Prisma.HotelRoomScalarFieldEnum = {
  id: 'id',
  description: 'description',
  gamingRoom: 'gamingRoom',
  occupancy: 'occupancy',
  quantity: 'quantity',
  rate: 'rate',
  bathroomType: 'bathroomType',
  type: 'type'
};

exports.Prisma.HotelRoomDetailsScalarFieldEnum = {
  id: 'id',
  version: 'version',
  bathroomType: 'bathroomType',
  comment: 'comment',
  enabled: 'enabled',
  gamingRoom: 'gamingRoom',
  internalRoomType: 'internalRoomType',
  name: 'name',
  reserved: 'reserved',
  reservedFor: 'reservedFor',
  roomType: 'roomType',
  formattedRoomType: 'formattedRoomType'
};

exports.Prisma.KnexMigrationsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  batch: 'batch',
  migrationTime: 'migrationTime'
};

exports.Prisma.KnexMigrationsLockScalarFieldEnum = {
  index: 'index',
  isLocked: 'isLocked'
};

exports.Prisma.LookupScalarFieldEnum = {
  id: 'id',
  codeMaximum: 'codeMaximum',
  codeMinimum: 'codeMinimum',
  codeScale: 'codeScale',
  codeType: 'codeType',
  internationalize: 'internationalize',
  ordering: 'ordering',
  realm: 'realm',
  valueMaximum: 'valueMaximum',
  valueMinimum: 'valueMinimum',
  valueScale: 'valueScale',
  valueType: 'valueType'
};

exports.Prisma.LookupValueScalarFieldEnum = {
  id: 'id',
  code: 'code',
  lookupId: 'lookupId',
  numericSequencer: 'numericSequencer',
  sequencer: 'sequencer',
  stringSequencer: 'stringSequencer',
  value: 'value'
};

exports.Prisma.MembershipScalarFieldEnum = {
  id: 'id',
  arrivalDate: 'arrivalDate',
  attendance: 'attendance',
  attending: 'attending',
  departureDate: 'departureDate',
  hotelRoomId: 'hotelRoomId',
  interestLevel: 'interestLevel',
  message: 'message',
  roomPreferenceAndNotes: 'roomPreferenceAndNotes',
  roomingPreferences: 'roomingPreferences',
  roomingWith: 'roomingWith',
  userId: 'userId',
  volunteer: 'volunteer',
  year: 'year',
  offerSubsidy: 'offerSubsidy',
  requestOldPrice: 'requestOldPrice',
  slotsAttending: 'slotsAttending'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  snailMailAddress: 'snailMailAddress',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  authority: 'authority'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  description: 'description',
  size: 'size',
  type: 'type',
  updated: 'updated'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  code: 'code',
  type: 'type',
  value: 'value'
};

exports.Prisma.ShirtOrderScalarFieldEnum = {
  id: 'id',
  deliveryMethod: 'deliveryMethod',
  message: 'message',
  userId: 'userId',
  year: 'year'
};

exports.Prisma.ShirtOrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  quantity: 'quantity',
  size: 'size',
  style: 'style',
  itemsIdx: 'itemsIdx'
};

exports.Prisma.SlotScalarFieldEnum = {
  id: 'id',
  slot: 'slot',
  day: 'day',
  formattedDate: 'formattedDate',
  length: 'length',
  time: 'time'
};

exports.Prisma.StripeScalarFieldEnum = {
  id: 'id',
  data: 'data'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  memberId: 'memberId',
  year: 'year',
  timestamp: 'timestamp',
  amount: 'amount',
  origin: 'origin',
  stripe: 'stripe',
  notes: 'notes',
  data: 'data'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  fullName: 'fullName',
  firstName: 'firstName',
  lastName: 'lastName',
  displayName: 'displayName',
  balance: 'balance'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  roleId: 'roleId',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Game: 'Game',
  GameAssignment: 'GameAssignment',
  GameChoice: 'GameChoice',
  GameSubmission: 'GameSubmission',
  HotelRoom: 'HotelRoom',
  HotelRoomDetails: 'HotelRoomDetails',
  KnexMigrations: 'KnexMigrations',
  KnexMigrationsLock: 'KnexMigrationsLock',
  Lookup: 'Lookup',
  LookupValue: 'LookupValue',
  Membership: 'Membership',
  Profile: 'Profile',
  Role: 'Role',
  Room: 'Room',
  Setting: 'Setting',
  ShirtOrder: 'ShirtOrder',
  ShirtOrderItem: 'ShirtOrderItem',
  Slot: 'Slot',
  Stripe: 'Stripe',
  Transactions: 'Transactions',
  User: 'User',
  UserRole: 'UserRole'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
