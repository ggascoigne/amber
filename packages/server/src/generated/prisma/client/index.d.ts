
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Game
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model GameAssignment
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type GameAssignment = $Result.DefaultSelection<Prisma.$GameAssignmentPayload>
/**
 * Model GameChoice
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type GameChoice = $Result.DefaultSelection<Prisma.$GameChoicePayload>
/**
 * Model GameSubmission
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type GameSubmission = $Result.DefaultSelection<Prisma.$GameSubmissionPayload>
/**
 * Model HotelRoom
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type HotelRoom = $Result.DefaultSelection<Prisma.$HotelRoomPayload>
/**
 * Model HotelRoomDetails
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type HotelRoomDetails = $Result.DefaultSelection<Prisma.$HotelRoomDetailsPayload>
/**
 * Model KnexMigrations
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type KnexMigrations = $Result.DefaultSelection<Prisma.$KnexMigrationsPayload>
/**
 * Model KnexMigrationsLock
 * 
 */
export type KnexMigrationsLock = $Result.DefaultSelection<Prisma.$KnexMigrationsLockPayload>
/**
 * Model Lookup
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type Lookup = $Result.DefaultSelection<Prisma.$LookupPayload>
/**
 * Model LookupValue
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type LookupValue = $Result.DefaultSelection<Prisma.$LookupValuePayload>
/**
 * Model Membership
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type Membership = $Result.DefaultSelection<Prisma.$MembershipPayload>
/**
 * Model Profile
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Role
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Room
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type Room = $Result.DefaultSelection<Prisma.$RoomPayload>
/**
 * Model Setting
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type Setting = $Result.DefaultSelection<Prisma.$SettingPayload>
/**
 * Model ShirtOrder
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type ShirtOrder = $Result.DefaultSelection<Prisma.$ShirtOrderPayload>
/**
 * Model ShirtOrderItem
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type ShirtOrderItem = $Result.DefaultSelection<Prisma.$ShirtOrderItemPayload>
/**
 * Model Slot
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type Slot = $Result.DefaultSelection<Prisma.$SlotPayload>
/**
 * Model Stripe
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type Stripe = $Result.DefaultSelection<Prisma.$StripePayload>
/**
 * Model Transactions
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type Transactions = $Result.DefaultSelection<Prisma.$TransactionsPayload>
/**
 * Model User
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserRole
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Games
 * const games = await prisma.game.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Games
   * const games = await prisma.game.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Executes a typed SQL query and returns a typed result
   * @example
   * ```
   * import { myQuery } from '@prisma/client/sql'
   * 
   * const result = await prisma.$queryRawTyped(myQuery())
   * ```
   */
  $queryRawTyped<T>(typedSql: runtime.TypedSql<unknown[], T>): Prisma.PrismaPromise<T[]>

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameAssignment`: Exposes CRUD operations for the **GameAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameAssignments
    * const gameAssignments = await prisma.gameAssignment.findMany()
    * ```
    */
  get gameAssignment(): Prisma.GameAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameChoice`: Exposes CRUD operations for the **GameChoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameChoices
    * const gameChoices = await prisma.gameChoice.findMany()
    * ```
    */
  get gameChoice(): Prisma.GameChoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameSubmission`: Exposes CRUD operations for the **GameSubmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameSubmissions
    * const gameSubmissions = await prisma.gameSubmission.findMany()
    * ```
    */
  get gameSubmission(): Prisma.GameSubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hotelRoom`: Exposes CRUD operations for the **HotelRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HotelRooms
    * const hotelRooms = await prisma.hotelRoom.findMany()
    * ```
    */
  get hotelRoom(): Prisma.HotelRoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hotelRoomDetails`: Exposes CRUD operations for the **HotelRoomDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HotelRoomDetails
    * const hotelRoomDetails = await prisma.hotelRoomDetails.findMany()
    * ```
    */
  get hotelRoomDetails(): Prisma.HotelRoomDetailsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.knexMigrations`: Exposes CRUD operations for the **KnexMigrations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KnexMigrations
    * const knexMigrations = await prisma.knexMigrations.findMany()
    * ```
    */
  get knexMigrations(): Prisma.KnexMigrationsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.knexMigrationsLock`: Exposes CRUD operations for the **KnexMigrationsLock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KnexMigrationsLocks
    * const knexMigrationsLocks = await prisma.knexMigrationsLock.findMany()
    * ```
    */
  get knexMigrationsLock(): Prisma.KnexMigrationsLockDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lookup`: Exposes CRUD operations for the **Lookup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lookups
    * const lookups = await prisma.lookup.findMany()
    * ```
    */
  get lookup(): Prisma.LookupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lookupValue`: Exposes CRUD operations for the **LookupValue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LookupValues
    * const lookupValues = await prisma.lookupValue.findMany()
    * ```
    */
  get lookupValue(): Prisma.LookupValueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.membership`: Exposes CRUD operations for the **Membership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Memberships
    * const memberships = await prisma.membership.findMany()
    * ```
    */
  get membership(): Prisma.MembershipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.setting.findMany()
    * ```
    */
  get setting(): Prisma.SettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shirtOrder`: Exposes CRUD operations for the **ShirtOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShirtOrders
    * const shirtOrders = await prisma.shirtOrder.findMany()
    * ```
    */
  get shirtOrder(): Prisma.ShirtOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shirtOrderItem`: Exposes CRUD operations for the **ShirtOrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShirtOrderItems
    * const shirtOrderItems = await prisma.shirtOrderItem.findMany()
    * ```
    */
  get shirtOrderItem(): Prisma.ShirtOrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.slot`: Exposes CRUD operations for the **Slot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Slots
    * const slots = await prisma.slot.findMany()
    * ```
    */
  get slot(): Prisma.SlotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stripe`: Exposes CRUD operations for the **Stripe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stripes
    * const stripes = await prisma.stripe.findMany()
    * ```
    */
  get stripe(): Prisma.StripeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transactions`: Exposes CRUD operations for the **Transactions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transactions.findMany()
    * ```
    */
  get transactions(): Prisma.TransactionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Game: 'Game',
    GameAssignment: 'GameAssignment',
    GameChoice: 'GameChoice',
    GameSubmission: 'GameSubmission',
    HotelRoom: 'HotelRoom',
    HotelRoomDetails: 'HotelRoomDetails',
    KnexMigrations: 'KnexMigrations',
    KnexMigrationsLock: 'KnexMigrationsLock',
    Lookup: 'Lookup',
    LookupValue: 'LookupValue',
    Membership: 'Membership',
    Profile: 'Profile',
    Role: 'Role',
    Room: 'Room',
    Setting: 'Setting',
    ShirtOrder: 'ShirtOrder',
    ShirtOrderItem: 'ShirtOrderItem',
    Slot: 'Slot',
    Stripe: 'Stripe',
    Transactions: 'Transactions',
    User: 'User',
    UserRole: 'UserRole'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "game" | "gameAssignment" | "gameChoice" | "gameSubmission" | "hotelRoom" | "hotelRoomDetails" | "knexMigrations" | "knexMigrationsLock" | "lookup" | "lookupValue" | "membership" | "profile" | "role" | "room" | "setting" | "shirtOrder" | "shirtOrderItem" | "slot" | "stripe" | "transactions" | "user" | "userRole"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      GameAssignment: {
        payload: Prisma.$GameAssignmentPayload<ExtArgs>
        fields: Prisma.GameAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameAssignmentPayload>
          }
          findFirst: {
            args: Prisma.GameAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameAssignmentPayload>
          }
          findMany: {
            args: Prisma.GameAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameAssignmentPayload>[]
          }
          create: {
            args: Prisma.GameAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameAssignmentPayload>
          }
          createMany: {
            args: Prisma.GameAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameAssignmentPayload>[]
          }
          delete: {
            args: Prisma.GameAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameAssignmentPayload>
          }
          update: {
            args: Prisma.GameAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.GameAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.GameAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameAssignmentPayload>
          }
          aggregate: {
            args: Prisma.GameAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameAssignment>
          }
          groupBy: {
            args: Prisma.GameAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<GameAssignmentCountAggregateOutputType> | number
          }
        }
      }
      GameChoice: {
        payload: Prisma.$GameChoicePayload<ExtArgs>
        fields: Prisma.GameChoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameChoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameChoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChoicePayload>
          }
          findFirst: {
            args: Prisma.GameChoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameChoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChoicePayload>
          }
          findMany: {
            args: Prisma.GameChoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChoicePayload>[]
          }
          create: {
            args: Prisma.GameChoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChoicePayload>
          }
          createMany: {
            args: Prisma.GameChoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameChoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChoicePayload>[]
          }
          delete: {
            args: Prisma.GameChoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChoicePayload>
          }
          update: {
            args: Prisma.GameChoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChoicePayload>
          }
          deleteMany: {
            args: Prisma.GameChoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameChoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameChoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChoicePayload>[]
          }
          upsert: {
            args: Prisma.GameChoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameChoicePayload>
          }
          aggregate: {
            args: Prisma.GameChoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameChoice>
          }
          groupBy: {
            args: Prisma.GameChoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameChoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameChoiceCountArgs<ExtArgs>
            result: $Utils.Optional<GameChoiceCountAggregateOutputType> | number
          }
        }
      }
      GameSubmission: {
        payload: Prisma.$GameSubmissionPayload<ExtArgs>
        fields: Prisma.GameSubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameSubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameSubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSubmissionPayload>
          }
          findFirst: {
            args: Prisma.GameSubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameSubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSubmissionPayload>
          }
          findMany: {
            args: Prisma.GameSubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSubmissionPayload>[]
          }
          create: {
            args: Prisma.GameSubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSubmissionPayload>
          }
          createMany: {
            args: Prisma.GameSubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameSubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSubmissionPayload>[]
          }
          delete: {
            args: Prisma.GameSubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSubmissionPayload>
          }
          update: {
            args: Prisma.GameSubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSubmissionPayload>
          }
          deleteMany: {
            args: Prisma.GameSubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameSubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameSubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSubmissionPayload>[]
          }
          upsert: {
            args: Prisma.GameSubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSubmissionPayload>
          }
          aggregate: {
            args: Prisma.GameSubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameSubmission>
          }
          groupBy: {
            args: Prisma.GameSubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameSubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameSubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<GameSubmissionCountAggregateOutputType> | number
          }
        }
      }
      HotelRoom: {
        payload: Prisma.$HotelRoomPayload<ExtArgs>
        fields: Prisma.HotelRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HotelRoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HotelRoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomPayload>
          }
          findFirst: {
            args: Prisma.HotelRoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HotelRoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomPayload>
          }
          findMany: {
            args: Prisma.HotelRoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomPayload>[]
          }
          create: {
            args: Prisma.HotelRoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomPayload>
          }
          createMany: {
            args: Prisma.HotelRoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HotelRoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomPayload>[]
          }
          delete: {
            args: Prisma.HotelRoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomPayload>
          }
          update: {
            args: Prisma.HotelRoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomPayload>
          }
          deleteMany: {
            args: Prisma.HotelRoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HotelRoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HotelRoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomPayload>[]
          }
          upsert: {
            args: Prisma.HotelRoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomPayload>
          }
          aggregate: {
            args: Prisma.HotelRoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHotelRoom>
          }
          groupBy: {
            args: Prisma.HotelRoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<HotelRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.HotelRoomCountArgs<ExtArgs>
            result: $Utils.Optional<HotelRoomCountAggregateOutputType> | number
          }
        }
      }
      HotelRoomDetails: {
        payload: Prisma.$HotelRoomDetailsPayload<ExtArgs>
        fields: Prisma.HotelRoomDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HotelRoomDetailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HotelRoomDetailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomDetailsPayload>
          }
          findFirst: {
            args: Prisma.HotelRoomDetailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HotelRoomDetailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomDetailsPayload>
          }
          findMany: {
            args: Prisma.HotelRoomDetailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomDetailsPayload>[]
          }
          create: {
            args: Prisma.HotelRoomDetailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomDetailsPayload>
          }
          createMany: {
            args: Prisma.HotelRoomDetailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HotelRoomDetailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomDetailsPayload>[]
          }
          delete: {
            args: Prisma.HotelRoomDetailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomDetailsPayload>
          }
          update: {
            args: Prisma.HotelRoomDetailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomDetailsPayload>
          }
          deleteMany: {
            args: Prisma.HotelRoomDetailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HotelRoomDetailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HotelRoomDetailsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomDetailsPayload>[]
          }
          upsert: {
            args: Prisma.HotelRoomDetailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelRoomDetailsPayload>
          }
          aggregate: {
            args: Prisma.HotelRoomDetailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHotelRoomDetails>
          }
          groupBy: {
            args: Prisma.HotelRoomDetailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<HotelRoomDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.HotelRoomDetailsCountArgs<ExtArgs>
            result: $Utils.Optional<HotelRoomDetailsCountAggregateOutputType> | number
          }
        }
      }
      KnexMigrations: {
        payload: Prisma.$KnexMigrationsPayload<ExtArgs>
        fields: Prisma.KnexMigrationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KnexMigrationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KnexMigrationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsPayload>
          }
          findFirst: {
            args: Prisma.KnexMigrationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KnexMigrationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsPayload>
          }
          findMany: {
            args: Prisma.KnexMigrationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsPayload>[]
          }
          create: {
            args: Prisma.KnexMigrationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsPayload>
          }
          createMany: {
            args: Prisma.KnexMigrationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KnexMigrationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsPayload>[]
          }
          delete: {
            args: Prisma.KnexMigrationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsPayload>
          }
          update: {
            args: Prisma.KnexMigrationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsPayload>
          }
          deleteMany: {
            args: Prisma.KnexMigrationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KnexMigrationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KnexMigrationsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsPayload>[]
          }
          upsert: {
            args: Prisma.KnexMigrationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsPayload>
          }
          aggregate: {
            args: Prisma.KnexMigrationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKnexMigrations>
          }
          groupBy: {
            args: Prisma.KnexMigrationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<KnexMigrationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.KnexMigrationsCountArgs<ExtArgs>
            result: $Utils.Optional<KnexMigrationsCountAggregateOutputType> | number
          }
        }
      }
      KnexMigrationsLock: {
        payload: Prisma.$KnexMigrationsLockPayload<ExtArgs>
        fields: Prisma.KnexMigrationsLockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KnexMigrationsLockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsLockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KnexMigrationsLockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsLockPayload>
          }
          findFirst: {
            args: Prisma.KnexMigrationsLockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsLockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KnexMigrationsLockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsLockPayload>
          }
          findMany: {
            args: Prisma.KnexMigrationsLockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsLockPayload>[]
          }
          create: {
            args: Prisma.KnexMigrationsLockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsLockPayload>
          }
          createMany: {
            args: Prisma.KnexMigrationsLockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KnexMigrationsLockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsLockPayload>[]
          }
          delete: {
            args: Prisma.KnexMigrationsLockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsLockPayload>
          }
          update: {
            args: Prisma.KnexMigrationsLockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsLockPayload>
          }
          deleteMany: {
            args: Prisma.KnexMigrationsLockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KnexMigrationsLockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KnexMigrationsLockUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsLockPayload>[]
          }
          upsert: {
            args: Prisma.KnexMigrationsLockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnexMigrationsLockPayload>
          }
          aggregate: {
            args: Prisma.KnexMigrationsLockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKnexMigrationsLock>
          }
          groupBy: {
            args: Prisma.KnexMigrationsLockGroupByArgs<ExtArgs>
            result: $Utils.Optional<KnexMigrationsLockGroupByOutputType>[]
          }
          count: {
            args: Prisma.KnexMigrationsLockCountArgs<ExtArgs>
            result: $Utils.Optional<KnexMigrationsLockCountAggregateOutputType> | number
          }
        }
      }
      Lookup: {
        payload: Prisma.$LookupPayload<ExtArgs>
        fields: Prisma.LookupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LookupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LookupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupPayload>
          }
          findFirst: {
            args: Prisma.LookupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LookupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupPayload>
          }
          findMany: {
            args: Prisma.LookupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupPayload>[]
          }
          create: {
            args: Prisma.LookupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupPayload>
          }
          createMany: {
            args: Prisma.LookupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LookupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupPayload>[]
          }
          delete: {
            args: Prisma.LookupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupPayload>
          }
          update: {
            args: Prisma.LookupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupPayload>
          }
          deleteMany: {
            args: Prisma.LookupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LookupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LookupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupPayload>[]
          }
          upsert: {
            args: Prisma.LookupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupPayload>
          }
          aggregate: {
            args: Prisma.LookupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLookup>
          }
          groupBy: {
            args: Prisma.LookupGroupByArgs<ExtArgs>
            result: $Utils.Optional<LookupGroupByOutputType>[]
          }
          count: {
            args: Prisma.LookupCountArgs<ExtArgs>
            result: $Utils.Optional<LookupCountAggregateOutputType> | number
          }
        }
      }
      LookupValue: {
        payload: Prisma.$LookupValuePayload<ExtArgs>
        fields: Prisma.LookupValueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LookupValueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupValuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LookupValueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupValuePayload>
          }
          findFirst: {
            args: Prisma.LookupValueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupValuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LookupValueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupValuePayload>
          }
          findMany: {
            args: Prisma.LookupValueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupValuePayload>[]
          }
          create: {
            args: Prisma.LookupValueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupValuePayload>
          }
          createMany: {
            args: Prisma.LookupValueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LookupValueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupValuePayload>[]
          }
          delete: {
            args: Prisma.LookupValueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupValuePayload>
          }
          update: {
            args: Prisma.LookupValueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupValuePayload>
          }
          deleteMany: {
            args: Prisma.LookupValueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LookupValueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LookupValueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupValuePayload>[]
          }
          upsert: {
            args: Prisma.LookupValueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupValuePayload>
          }
          aggregate: {
            args: Prisma.LookupValueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLookupValue>
          }
          groupBy: {
            args: Prisma.LookupValueGroupByArgs<ExtArgs>
            result: $Utils.Optional<LookupValueGroupByOutputType>[]
          }
          count: {
            args: Prisma.LookupValueCountArgs<ExtArgs>
            result: $Utils.Optional<LookupValueCountAggregateOutputType> | number
          }
        }
      }
      Membership: {
        payload: Prisma.$MembershipPayload<ExtArgs>
        fields: Prisma.MembershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MembershipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MembershipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembershipPayload>
          }
          findFirst: {
            args: Prisma.MembershipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MembershipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembershipPayload>
          }
          findMany: {
            args: Prisma.MembershipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembershipPayload>[]
          }
          create: {
            args: Prisma.MembershipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembershipPayload>
          }
          createMany: {
            args: Prisma.MembershipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MembershipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembershipPayload>[]
          }
          delete: {
            args: Prisma.MembershipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembershipPayload>
          }
          update: {
            args: Prisma.MembershipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembershipPayload>
          }
          deleteMany: {
            args: Prisma.MembershipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MembershipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MembershipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembershipPayload>[]
          }
          upsert: {
            args: Prisma.MembershipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembershipPayload>
          }
          aggregate: {
            args: Prisma.MembershipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMembership>
          }
          groupBy: {
            args: Prisma.MembershipGroupByArgs<ExtArgs>
            result: $Utils.Optional<MembershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.MembershipCountArgs<ExtArgs>
            result: $Utils.Optional<MembershipCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Room: {
        payload: Prisma.$RoomPayload<ExtArgs>
        fields: Prisma.RoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findFirst: {
            args: Prisma.RoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findMany: {
            args: Prisma.RoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          create: {
            args: Prisma.RoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          createMany: {
            args: Prisma.RoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          delete: {
            args: Prisma.RoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          update: {
            args: Prisma.RoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          deleteMany: {
            args: Prisma.RoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          upsert: {
            args: Prisma.RoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          aggregate: {
            args: Prisma.RoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoom>
          }
          groupBy: {
            args: Prisma.RoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomCountArgs<ExtArgs>
            result: $Utils.Optional<RoomCountAggregateOutputType> | number
          }
        }
      }
      Setting: {
        payload: Prisma.$SettingPayload<ExtArgs>
        fields: Prisma.SettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findFirst: {
            args: Prisma.SettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findMany: {
            args: Prisma.SettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          create: {
            args: Prisma.SettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          createMany: {
            args: Prisma.SettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          delete: {
            args: Prisma.SettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          update: {
            args: Prisma.SettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          deleteMany: {
            args: Prisma.SettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          upsert: {
            args: Prisma.SettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          aggregate: {
            args: Prisma.SettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetting>
          }
          groupBy: {
            args: Prisma.SettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingCountArgs<ExtArgs>
            result: $Utils.Optional<SettingCountAggregateOutputType> | number
          }
        }
      }
      ShirtOrder: {
        payload: Prisma.$ShirtOrderPayload<ExtArgs>
        fields: Prisma.ShirtOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShirtOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShirtOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderPayload>
          }
          findFirst: {
            args: Prisma.ShirtOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShirtOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderPayload>
          }
          findMany: {
            args: Prisma.ShirtOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderPayload>[]
          }
          create: {
            args: Prisma.ShirtOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderPayload>
          }
          createMany: {
            args: Prisma.ShirtOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShirtOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderPayload>[]
          }
          delete: {
            args: Prisma.ShirtOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderPayload>
          }
          update: {
            args: Prisma.ShirtOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderPayload>
          }
          deleteMany: {
            args: Prisma.ShirtOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShirtOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShirtOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderPayload>[]
          }
          upsert: {
            args: Prisma.ShirtOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderPayload>
          }
          aggregate: {
            args: Prisma.ShirtOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShirtOrder>
          }
          groupBy: {
            args: Prisma.ShirtOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShirtOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShirtOrderCountArgs<ExtArgs>
            result: $Utils.Optional<ShirtOrderCountAggregateOutputType> | number
          }
        }
      }
      ShirtOrderItem: {
        payload: Prisma.$ShirtOrderItemPayload<ExtArgs>
        fields: Prisma.ShirtOrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShirtOrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShirtOrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderItemPayload>
          }
          findFirst: {
            args: Prisma.ShirtOrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShirtOrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderItemPayload>
          }
          findMany: {
            args: Prisma.ShirtOrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderItemPayload>[]
          }
          create: {
            args: Prisma.ShirtOrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderItemPayload>
          }
          createMany: {
            args: Prisma.ShirtOrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShirtOrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderItemPayload>[]
          }
          delete: {
            args: Prisma.ShirtOrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderItemPayload>
          }
          update: {
            args: Prisma.ShirtOrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderItemPayload>
          }
          deleteMany: {
            args: Prisma.ShirtOrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShirtOrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShirtOrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderItemPayload>[]
          }
          upsert: {
            args: Prisma.ShirtOrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShirtOrderItemPayload>
          }
          aggregate: {
            args: Prisma.ShirtOrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShirtOrderItem>
          }
          groupBy: {
            args: Prisma.ShirtOrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShirtOrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShirtOrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<ShirtOrderItemCountAggregateOutputType> | number
          }
        }
      }
      Slot: {
        payload: Prisma.$SlotPayload<ExtArgs>
        fields: Prisma.SlotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SlotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SlotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlotPayload>
          }
          findFirst: {
            args: Prisma.SlotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SlotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlotPayload>
          }
          findMany: {
            args: Prisma.SlotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlotPayload>[]
          }
          create: {
            args: Prisma.SlotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlotPayload>
          }
          createMany: {
            args: Prisma.SlotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SlotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlotPayload>[]
          }
          delete: {
            args: Prisma.SlotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlotPayload>
          }
          update: {
            args: Prisma.SlotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlotPayload>
          }
          deleteMany: {
            args: Prisma.SlotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SlotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SlotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlotPayload>[]
          }
          upsert: {
            args: Prisma.SlotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlotPayload>
          }
          aggregate: {
            args: Prisma.SlotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSlot>
          }
          groupBy: {
            args: Prisma.SlotGroupByArgs<ExtArgs>
            result: $Utils.Optional<SlotGroupByOutputType>[]
          }
          count: {
            args: Prisma.SlotCountArgs<ExtArgs>
            result: $Utils.Optional<SlotCountAggregateOutputType> | number
          }
        }
      }
      Stripe: {
        payload: Prisma.$StripePayload<ExtArgs>
        fields: Prisma.StripeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StripeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StripeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          findFirst: {
            args: Prisma.StripeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StripeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          findMany: {
            args: Prisma.StripeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>[]
          }
          create: {
            args: Prisma.StripeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          createMany: {
            args: Prisma.StripeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StripeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>[]
          }
          delete: {
            args: Prisma.StripeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          update: {
            args: Prisma.StripeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          deleteMany: {
            args: Prisma.StripeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StripeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StripeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>[]
          }
          upsert: {
            args: Prisma.StripeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          aggregate: {
            args: Prisma.StripeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStripe>
          }
          groupBy: {
            args: Prisma.StripeGroupByArgs<ExtArgs>
            result: $Utils.Optional<StripeGroupByOutputType>[]
          }
          count: {
            args: Prisma.StripeCountArgs<ExtArgs>
            result: $Utils.Optional<StripeCountAggregateOutputType> | number
          }
        }
      }
      Transactions: {
        payload: Prisma.$TransactionsPayload<ExtArgs>
        fields: Prisma.TransactionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          findFirst: {
            args: Prisma.TransactionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          findMany: {
            args: Prisma.TransactionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>[]
          }
          create: {
            args: Prisma.TransactionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          createMany: {
            args: Prisma.TransactionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>[]
          }
          delete: {
            args: Prisma.TransactionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          update: {
            args: Prisma.TransactionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          deleteMany: {
            args: Prisma.TransactionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>[]
          }
          upsert: {
            args: Prisma.TransactionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionsPayload>
          }
          aggregate: {
            args: Prisma.TransactionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactions>
          }
          groupBy: {
            args: Prisma.TransactionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionsCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionsCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserRoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRawTyped: {
          args: runtime.UnknownTypedSql,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    game?: GameOmit
    gameAssignment?: GameAssignmentOmit
    gameChoice?: GameChoiceOmit
    gameSubmission?: GameSubmissionOmit
    hotelRoom?: HotelRoomOmit
    hotelRoomDetails?: HotelRoomDetailsOmit
    knexMigrations?: KnexMigrationsOmit
    knexMigrationsLock?: KnexMigrationsLockOmit
    lookup?: LookupOmit
    lookupValue?: LookupValueOmit
    membership?: MembershipOmit
    profile?: ProfileOmit
    role?: RoleOmit
    room?: RoomOmit
    setting?: SettingOmit
    shirtOrder?: ShirtOrderOmit
    shirtOrderItem?: ShirtOrderItemOmit
    slot?: SlotOmit
    stripe?: StripeOmit
    transactions?: TransactionsOmit
    user?: UserOmit
    userRole?: UserRoleOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    gameAssignment: number
    gameChoice: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameAssignment?: boolean | GameCountOutputTypeCountGameAssignmentArgs
    gameChoice?: boolean | GameCountOutputTypeCountGameChoiceArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGameAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameAssignmentWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGameChoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameChoiceWhereInput
  }


  /**
   * Count Type HotelRoomCountOutputType
   */

  export type HotelRoomCountOutputType = {
    membership: number
  }

  export type HotelRoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membership?: boolean | HotelRoomCountOutputTypeCountMembershipArgs
  }

  // Custom InputTypes
  /**
   * HotelRoomCountOutputType without action
   */
  export type HotelRoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomCountOutputType
     */
    select?: HotelRoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HotelRoomCountOutputType without action
   */
  export type HotelRoomCountOutputTypeCountMembershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MembershipWhereInput
  }


  /**
   * Count Type LookupCountOutputType
   */

  export type LookupCountOutputType = {
    lookupValue: number
  }

  export type LookupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lookupValue?: boolean | LookupCountOutputTypeCountLookupValueArgs
  }

  // Custom InputTypes
  /**
   * LookupCountOutputType without action
   */
  export type LookupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupCountOutputType
     */
    select?: LookupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LookupCountOutputType without action
   */
  export type LookupCountOutputTypeCountLookupValueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LookupValueWhereInput
  }


  /**
   * Count Type MembershipCountOutputType
   */

  export type MembershipCountOutputType = {
    gameAssignment: number
    gameChoice: number
    gameSubmission: number
    transactions: number
  }

  export type MembershipCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameAssignment?: boolean | MembershipCountOutputTypeCountGameAssignmentArgs
    gameChoice?: boolean | MembershipCountOutputTypeCountGameChoiceArgs
    gameSubmission?: boolean | MembershipCountOutputTypeCountGameSubmissionArgs
    transactions?: boolean | MembershipCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * MembershipCountOutputType without action
   */
  export type MembershipCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MembershipCountOutputType
     */
    select?: MembershipCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MembershipCountOutputType without action
   */
  export type MembershipCountOutputTypeCountGameAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameAssignmentWhereInput
  }

  /**
   * MembershipCountOutputType without action
   */
  export type MembershipCountOutputTypeCountGameChoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameChoiceWhereInput
  }

  /**
   * MembershipCountOutputType without action
   */
  export type MembershipCountOutputTypeCountGameSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSubmissionWhereInput
  }

  /**
   * MembershipCountOutputType without action
   */
  export type MembershipCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionsWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    userRole: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRole?: boolean | RoleCountOutputTypeCountUserRoleArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUserRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }


  /**
   * Count Type RoomCountOutputType
   */

  export type RoomCountOutputType = {
    game: number
  }

  export type RoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | RoomCountOutputTypeCountGameArgs
  }

  // Custom InputTypes
  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     */
    select?: RoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountGameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * Count Type ShirtOrderCountOutputType
   */

  export type ShirtOrderCountOutputType = {
    shirtOrderItem: number
  }

  export type ShirtOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shirtOrderItem?: boolean | ShirtOrderCountOutputTypeCountShirtOrderItemArgs
  }

  // Custom InputTypes
  /**
   * ShirtOrderCountOutputType without action
   */
  export type ShirtOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderCountOutputType
     */
    select?: ShirtOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShirtOrderCountOutputType without action
   */
  export type ShirtOrderCountOutputTypeCountShirtOrderItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShirtOrderItemWhereInput
  }


  /**
   * Count Type SlotCountOutputType
   */

  export type SlotCountOutputType = {
    game: number
    gameChoice: number
  }

  export type SlotCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | SlotCountOutputTypeCountGameArgs
    gameChoice?: boolean | SlotCountOutputTypeCountGameChoiceArgs
  }

  // Custom InputTypes
  /**
   * SlotCountOutputType without action
   */
  export type SlotCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlotCountOutputType
     */
    select?: SlotCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SlotCountOutputType without action
   */
  export type SlotCountOutputTypeCountGameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }

  /**
   * SlotCountOutputType without action
   */
  export type SlotCountOutputTypeCountGameChoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameChoiceWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    game: number
    membership: number
    profile: number
    shirtOrder: number
    transactionsTransactionsOriginTouser: number
    transactionsTransactionsUserIdTouser: number
    userRole: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | UserCountOutputTypeCountGameArgs
    membership?: boolean | UserCountOutputTypeCountMembershipArgs
    profile?: boolean | UserCountOutputTypeCountProfileArgs
    shirtOrder?: boolean | UserCountOutputTypeCountShirtOrderArgs
    transactionsTransactionsOriginTouser?: boolean | UserCountOutputTypeCountTransactionsTransactionsOriginTouserArgs
    transactionsTransactionsUserIdTouser?: boolean | UserCountOutputTypeCountTransactionsTransactionsUserIdTouserArgs
    userRole?: boolean | UserCountOutputTypeCountUserRoleArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMembershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MembershipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShirtOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShirtOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsTransactionsOriginTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsTransactionsUserIdTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
    playerMax: number | null
    playerMin: number | null
    roomId: number | null
    slotId: number | null
    slotPreference: number | null
    year: number | null
    authorId: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
    playerMax: number | null
    playerMin: number | null
    roomId: number | null
    slotId: number | null
    slotPreference: number | null
    year: number | null
    authorId: number | null
  }

  export type GameMinAggregateOutputType = {
    id: number | null
    description: string | null
    lateFinish: boolean | null
    lateStart: string | null
    name: string | null
    playerMax: number | null
    playerMin: number | null
    roomId: number | null
    shortName: string | null
    slotId: number | null
    charInstructions: string | null
    estimatedLength: string | null
    gameContactEmail: string | null
    genre: string | null
    gmNames: string | null
    message: string | null
    playerPreference: string | null
    playersContactGm: boolean | null
    returningPlayers: string | null
    setting: string | null
    slotConflicts: string | null
    slotPreference: number | null
    teenFriendly: boolean | null
    type: string | null
    year: number | null
    authorId: number | null
    full: boolean | null
  }

  export type GameMaxAggregateOutputType = {
    id: number | null
    description: string | null
    lateFinish: boolean | null
    lateStart: string | null
    name: string | null
    playerMax: number | null
    playerMin: number | null
    roomId: number | null
    shortName: string | null
    slotId: number | null
    charInstructions: string | null
    estimatedLength: string | null
    gameContactEmail: string | null
    genre: string | null
    gmNames: string | null
    message: string | null
    playerPreference: string | null
    playersContactGm: boolean | null
    returningPlayers: string | null
    setting: string | null
    slotConflicts: string | null
    slotPreference: number | null
    teenFriendly: boolean | null
    type: string | null
    year: number | null
    authorId: number | null
    full: boolean | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    description: number
    lateFinish: number
    lateStart: number
    name: number
    playerMax: number
    playerMin: number
    roomId: number
    shortName: number
    slotId: number
    charInstructions: number
    estimatedLength: number
    gameContactEmail: number
    genre: number
    gmNames: number
    message: number
    playerPreference: number
    playersContactGm: number
    returningPlayers: number
    setting: number
    slotConflicts: number
    slotPreference: number
    teenFriendly: number
    type: number
    year: number
    authorId: number
    full: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
    playerMax?: true
    playerMin?: true
    roomId?: true
    slotId?: true
    slotPreference?: true
    year?: true
    authorId?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
    playerMax?: true
    playerMin?: true
    roomId?: true
    slotId?: true
    slotPreference?: true
    year?: true
    authorId?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    description?: true
    lateFinish?: true
    lateStart?: true
    name?: true
    playerMax?: true
    playerMin?: true
    roomId?: true
    shortName?: true
    slotId?: true
    charInstructions?: true
    estimatedLength?: true
    gameContactEmail?: true
    genre?: true
    gmNames?: true
    message?: true
    playerPreference?: true
    playersContactGm?: true
    returningPlayers?: true
    setting?: true
    slotConflicts?: true
    slotPreference?: true
    teenFriendly?: true
    type?: true
    year?: true
    authorId?: true
    full?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    description?: true
    lateFinish?: true
    lateStart?: true
    name?: true
    playerMax?: true
    playerMin?: true
    roomId?: true
    shortName?: true
    slotId?: true
    charInstructions?: true
    estimatedLength?: true
    gameContactEmail?: true
    genre?: true
    gmNames?: true
    message?: true
    playerPreference?: true
    playersContactGm?: true
    returningPlayers?: true
    setting?: true
    slotConflicts?: true
    slotPreference?: true
    teenFriendly?: true
    type?: true
    year?: true
    authorId?: true
    full?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    description?: true
    lateFinish?: true
    lateStart?: true
    name?: true
    playerMax?: true
    playerMin?: true
    roomId?: true
    shortName?: true
    slotId?: true
    charInstructions?: true
    estimatedLength?: true
    gameContactEmail?: true
    genre?: true
    gmNames?: true
    message?: true
    playerPreference?: true
    playersContactGm?: true
    returningPlayers?: true
    setting?: true
    slotConflicts?: true
    slotPreference?: true
    teenFriendly?: true
    type?: true
    year?: true
    authorId?: true
    full?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: number
    description: string
    lateFinish: boolean | null
    lateStart: string | null
    name: string
    playerMax: number
    playerMin: number
    roomId: number | null
    shortName: string | null
    slotId: number | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    authorId: number | null
    full: boolean | null
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    lateFinish?: boolean
    lateStart?: boolean
    name?: boolean
    playerMax?: boolean
    playerMin?: boolean
    roomId?: boolean
    shortName?: boolean
    slotId?: boolean
    charInstructions?: boolean
    estimatedLength?: boolean
    gameContactEmail?: boolean
    genre?: boolean
    gmNames?: boolean
    message?: boolean
    playerPreference?: boolean
    playersContactGm?: boolean
    returningPlayers?: boolean
    setting?: boolean
    slotConflicts?: boolean
    slotPreference?: boolean
    teenFriendly?: boolean
    type?: boolean
    year?: boolean
    authorId?: boolean
    full?: boolean
    user?: boolean | Game$userArgs<ExtArgs>
    room?: boolean | Game$roomArgs<ExtArgs>
    slot?: boolean | Game$slotArgs<ExtArgs>
    gameAssignment?: boolean | Game$gameAssignmentArgs<ExtArgs>
    gameChoice?: boolean | Game$gameChoiceArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    lateFinish?: boolean
    lateStart?: boolean
    name?: boolean
    playerMax?: boolean
    playerMin?: boolean
    roomId?: boolean
    shortName?: boolean
    slotId?: boolean
    charInstructions?: boolean
    estimatedLength?: boolean
    gameContactEmail?: boolean
    genre?: boolean
    gmNames?: boolean
    message?: boolean
    playerPreference?: boolean
    playersContactGm?: boolean
    returningPlayers?: boolean
    setting?: boolean
    slotConflicts?: boolean
    slotPreference?: boolean
    teenFriendly?: boolean
    type?: boolean
    year?: boolean
    authorId?: boolean
    full?: boolean
    user?: boolean | Game$userArgs<ExtArgs>
    room?: boolean | Game$roomArgs<ExtArgs>
    slot?: boolean | Game$slotArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    lateFinish?: boolean
    lateStart?: boolean
    name?: boolean
    playerMax?: boolean
    playerMin?: boolean
    roomId?: boolean
    shortName?: boolean
    slotId?: boolean
    charInstructions?: boolean
    estimatedLength?: boolean
    gameContactEmail?: boolean
    genre?: boolean
    gmNames?: boolean
    message?: boolean
    playerPreference?: boolean
    playersContactGm?: boolean
    returningPlayers?: boolean
    setting?: boolean
    slotConflicts?: boolean
    slotPreference?: boolean
    teenFriendly?: boolean
    type?: boolean
    year?: boolean
    authorId?: boolean
    full?: boolean
    user?: boolean | Game$userArgs<ExtArgs>
    room?: boolean | Game$roomArgs<ExtArgs>
    slot?: boolean | Game$slotArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    description?: boolean
    lateFinish?: boolean
    lateStart?: boolean
    name?: boolean
    playerMax?: boolean
    playerMin?: boolean
    roomId?: boolean
    shortName?: boolean
    slotId?: boolean
    charInstructions?: boolean
    estimatedLength?: boolean
    gameContactEmail?: boolean
    genre?: boolean
    gmNames?: boolean
    message?: boolean
    playerPreference?: boolean
    playersContactGm?: boolean
    returningPlayers?: boolean
    setting?: boolean
    slotConflicts?: boolean
    slotPreference?: boolean
    teenFriendly?: boolean
    type?: boolean
    year?: boolean
    authorId?: boolean
    full?: boolean
  }

  export type GameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "lateFinish" | "lateStart" | "name" | "playerMax" | "playerMin" | "roomId" | "shortName" | "slotId" | "charInstructions" | "estimatedLength" | "gameContactEmail" | "genre" | "gmNames" | "message" | "playerPreference" | "playersContactGm" | "returningPlayers" | "setting" | "slotConflicts" | "slotPreference" | "teenFriendly" | "type" | "year" | "authorId" | "full", ExtArgs["result"]["game"]>
  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Game$userArgs<ExtArgs>
    room?: boolean | Game$roomArgs<ExtArgs>
    slot?: boolean | Game$slotArgs<ExtArgs>
    gameAssignment?: boolean | Game$gameAssignmentArgs<ExtArgs>
    gameChoice?: boolean | Game$gameChoiceArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Game$userArgs<ExtArgs>
    room?: boolean | Game$roomArgs<ExtArgs>
    slot?: boolean | Game$slotArgs<ExtArgs>
  }
  export type GameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Game$userArgs<ExtArgs>
    room?: boolean | Game$roomArgs<ExtArgs>
    slot?: boolean | Game$slotArgs<ExtArgs>
  }

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      room: Prisma.$RoomPayload<ExtArgs> | null
      slot: Prisma.$SlotPayload<ExtArgs> | null
      gameAssignment: Prisma.$GameAssignmentPayload<ExtArgs>[]
      gameChoice: Prisma.$GameChoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string
      lateFinish: boolean | null
      lateStart: string | null
      name: string
      playerMax: number
      playerMin: number
      roomId: number | null
      shortName: string | null
      slotId: number | null
      charInstructions: string
      estimatedLength: string
      gameContactEmail: string
      genre: string
      gmNames: string | null
      message: string
      playerPreference: string
      playersContactGm: boolean
      returningPlayers: string
      setting: string
      slotConflicts: string
      slotPreference: number
      teenFriendly: boolean
      type: string
      year: number
      authorId: number | null
      full: boolean | null
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games and returns the data updated in the database.
     * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Game$userArgs<ExtArgs> = {}>(args?: Subset<T, Game$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    room<T extends Game$roomArgs<ExtArgs> = {}>(args?: Subset<T, Game$roomArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    slot<T extends Game$slotArgs<ExtArgs> = {}>(args?: Subset<T, Game$slotArgs<ExtArgs>>): Prisma__SlotClient<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    gameAssignment<T extends Game$gameAssignmentArgs<ExtArgs> = {}>(args?: Subset<T, Game$gameAssignmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gameChoice<T extends Game$gameChoiceArgs<ExtArgs> = {}>(args?: Subset<T, Game$gameChoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'Int'>
    readonly description: FieldRef<"Game", 'String'>
    readonly lateFinish: FieldRef<"Game", 'Boolean'>
    readonly lateStart: FieldRef<"Game", 'String'>
    readonly name: FieldRef<"Game", 'String'>
    readonly playerMax: FieldRef<"Game", 'Int'>
    readonly playerMin: FieldRef<"Game", 'Int'>
    readonly roomId: FieldRef<"Game", 'Int'>
    readonly shortName: FieldRef<"Game", 'String'>
    readonly slotId: FieldRef<"Game", 'Int'>
    readonly charInstructions: FieldRef<"Game", 'String'>
    readonly estimatedLength: FieldRef<"Game", 'String'>
    readonly gameContactEmail: FieldRef<"Game", 'String'>
    readonly genre: FieldRef<"Game", 'String'>
    readonly gmNames: FieldRef<"Game", 'String'>
    readonly message: FieldRef<"Game", 'String'>
    readonly playerPreference: FieldRef<"Game", 'String'>
    readonly playersContactGm: FieldRef<"Game", 'Boolean'>
    readonly returningPlayers: FieldRef<"Game", 'String'>
    readonly setting: FieldRef<"Game", 'String'>
    readonly slotConflicts: FieldRef<"Game", 'String'>
    readonly slotPreference: FieldRef<"Game", 'Int'>
    readonly teenFriendly: FieldRef<"Game", 'Boolean'>
    readonly type: FieldRef<"Game", 'String'>
    readonly year: FieldRef<"Game", 'Int'>
    readonly authorId: FieldRef<"Game", 'Int'>
    readonly full: FieldRef<"Game", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game updateManyAndReturn
   */
  export type GameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to delete.
     */
    limit?: number
  }

  /**
   * Game.user
   */
  export type Game$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Game.room
   */
  export type Game$roomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
  }

  /**
   * Game.slot
   */
  export type Game$slotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlotInclude<ExtArgs> | null
    where?: SlotWhereInput
  }

  /**
   * Game.gameAssignment
   */
  export type Game$gameAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
    where?: GameAssignmentWhereInput
    orderBy?: GameAssignmentOrderByWithRelationInput | GameAssignmentOrderByWithRelationInput[]
    cursor?: GameAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameAssignmentScalarFieldEnum | GameAssignmentScalarFieldEnum[]
  }

  /**
   * Game.gameChoice
   */
  export type Game$gameChoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    where?: GameChoiceWhereInput
    orderBy?: GameChoiceOrderByWithRelationInput | GameChoiceOrderByWithRelationInput[]
    cursor?: GameChoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameChoiceScalarFieldEnum | GameChoiceScalarFieldEnum[]
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model GameAssignment
   */

  export type AggregateGameAssignment = {
    _count: GameAssignmentCountAggregateOutputType | null
    _avg: GameAssignmentAvgAggregateOutputType | null
    _sum: GameAssignmentSumAggregateOutputType | null
    _min: GameAssignmentMinAggregateOutputType | null
    _max: GameAssignmentMaxAggregateOutputType | null
  }

  export type GameAssignmentAvgAggregateOutputType = {
    memberId: number | null
    gameId: number | null
    gm: number | null
    year: number | null
  }

  export type GameAssignmentSumAggregateOutputType = {
    memberId: number | null
    gameId: number | null
    gm: number | null
    year: number | null
  }

  export type GameAssignmentMinAggregateOutputType = {
    memberId: number | null
    gameId: number | null
    gm: number | null
    year: number | null
  }

  export type GameAssignmentMaxAggregateOutputType = {
    memberId: number | null
    gameId: number | null
    gm: number | null
    year: number | null
  }

  export type GameAssignmentCountAggregateOutputType = {
    memberId: number
    gameId: number
    gm: number
    year: number
    _all: number
  }


  export type GameAssignmentAvgAggregateInputType = {
    memberId?: true
    gameId?: true
    gm?: true
    year?: true
  }

  export type GameAssignmentSumAggregateInputType = {
    memberId?: true
    gameId?: true
    gm?: true
    year?: true
  }

  export type GameAssignmentMinAggregateInputType = {
    memberId?: true
    gameId?: true
    gm?: true
    year?: true
  }

  export type GameAssignmentMaxAggregateInputType = {
    memberId?: true
    gameId?: true
    gm?: true
    year?: true
  }

  export type GameAssignmentCountAggregateInputType = {
    memberId?: true
    gameId?: true
    gm?: true
    year?: true
    _all?: true
  }

  export type GameAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameAssignment to aggregate.
     */
    where?: GameAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameAssignments to fetch.
     */
    orderBy?: GameAssignmentOrderByWithRelationInput | GameAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameAssignments
    **/
    _count?: true | GameAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameAssignmentMaxAggregateInputType
  }

  export type GetGameAssignmentAggregateType<T extends GameAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateGameAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameAssignment[P]>
      : GetScalarType<T[P], AggregateGameAssignment[P]>
  }




  export type GameAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameAssignmentWhereInput
    orderBy?: GameAssignmentOrderByWithAggregationInput | GameAssignmentOrderByWithAggregationInput[]
    by: GameAssignmentScalarFieldEnum[] | GameAssignmentScalarFieldEnum
    having?: GameAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameAssignmentCountAggregateInputType | true
    _avg?: GameAssignmentAvgAggregateInputType
    _sum?: GameAssignmentSumAggregateInputType
    _min?: GameAssignmentMinAggregateInputType
    _max?: GameAssignmentMaxAggregateInputType
  }

  export type GameAssignmentGroupByOutputType = {
    memberId: number
    gameId: number
    gm: number
    year: number
    _count: GameAssignmentCountAggregateOutputType | null
    _avg: GameAssignmentAvgAggregateOutputType | null
    _sum: GameAssignmentSumAggregateOutputType | null
    _min: GameAssignmentMinAggregateOutputType | null
    _max: GameAssignmentMaxAggregateOutputType | null
  }

  type GetGameAssignmentGroupByPayload<T extends GameAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], GameAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type GameAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    memberId?: boolean
    gameId?: boolean
    gm?: boolean
    year?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameAssignment"]>

  export type GameAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    memberId?: boolean
    gameId?: boolean
    gm?: boolean
    year?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameAssignment"]>

  export type GameAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    memberId?: boolean
    gameId?: boolean
    gm?: boolean
    year?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameAssignment"]>

  export type GameAssignmentSelectScalar = {
    memberId?: boolean
    gameId?: boolean
    gm?: boolean
    year?: boolean
  }

  export type GameAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"memberId" | "gameId" | "gm" | "year", ExtArgs["result"]["gameAssignment"]>
  export type GameAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }
  export type GameAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }
  export type GameAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }

  export type $GameAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameAssignment"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      membership: Prisma.$MembershipPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      memberId: number
      gameId: number
      gm: number
      year: number
    }, ExtArgs["result"]["gameAssignment"]>
    composites: {}
  }

  type GameAssignmentGetPayload<S extends boolean | null | undefined | GameAssignmentDefaultArgs> = $Result.GetResult<Prisma.$GameAssignmentPayload, S>

  type GameAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameAssignmentCountAggregateInputType | true
    }

  export interface GameAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameAssignment'], meta: { name: 'GameAssignment' } }
    /**
     * Find zero or one GameAssignment that matches the filter.
     * @param {GameAssignmentFindUniqueArgs} args - Arguments to find a GameAssignment
     * @example
     * // Get one GameAssignment
     * const gameAssignment = await prisma.gameAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameAssignmentFindUniqueArgs>(args: SelectSubset<T, GameAssignmentFindUniqueArgs<ExtArgs>>): Prisma__GameAssignmentClient<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameAssignmentFindUniqueOrThrowArgs} args - Arguments to find a GameAssignment
     * @example
     * // Get one GameAssignment
     * const gameAssignment = await prisma.gameAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, GameAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameAssignmentClient<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAssignmentFindFirstArgs} args - Arguments to find a GameAssignment
     * @example
     * // Get one GameAssignment
     * const gameAssignment = await prisma.gameAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameAssignmentFindFirstArgs>(args?: SelectSubset<T, GameAssignmentFindFirstArgs<ExtArgs>>): Prisma__GameAssignmentClient<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAssignmentFindFirstOrThrowArgs} args - Arguments to find a GameAssignment
     * @example
     * // Get one GameAssignment
     * const gameAssignment = await prisma.gameAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, GameAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameAssignmentClient<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameAssignments
     * const gameAssignments = await prisma.gameAssignment.findMany()
     * 
     * // Get first 10 GameAssignments
     * const gameAssignments = await prisma.gameAssignment.findMany({ take: 10 })
     * 
     * // Only select the `memberId`
     * const gameAssignmentWithMemberIdOnly = await prisma.gameAssignment.findMany({ select: { memberId: true } })
     * 
     */
    findMany<T extends GameAssignmentFindManyArgs>(args?: SelectSubset<T, GameAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameAssignment.
     * @param {GameAssignmentCreateArgs} args - Arguments to create a GameAssignment.
     * @example
     * // Create one GameAssignment
     * const GameAssignment = await prisma.gameAssignment.create({
     *   data: {
     *     // ... data to create a GameAssignment
     *   }
     * })
     * 
     */
    create<T extends GameAssignmentCreateArgs>(args: SelectSubset<T, GameAssignmentCreateArgs<ExtArgs>>): Prisma__GameAssignmentClient<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameAssignments.
     * @param {GameAssignmentCreateManyArgs} args - Arguments to create many GameAssignments.
     * @example
     * // Create many GameAssignments
     * const gameAssignment = await prisma.gameAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameAssignmentCreateManyArgs>(args?: SelectSubset<T, GameAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameAssignments and returns the data saved in the database.
     * @param {GameAssignmentCreateManyAndReturnArgs} args - Arguments to create many GameAssignments.
     * @example
     * // Create many GameAssignments
     * const gameAssignment = await prisma.gameAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameAssignments and only return the `memberId`
     * const gameAssignmentWithMemberIdOnly = await prisma.gameAssignment.createManyAndReturn({
     *   select: { memberId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, GameAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameAssignment.
     * @param {GameAssignmentDeleteArgs} args - Arguments to delete one GameAssignment.
     * @example
     * // Delete one GameAssignment
     * const GameAssignment = await prisma.gameAssignment.delete({
     *   where: {
     *     // ... filter to delete one GameAssignment
     *   }
     * })
     * 
     */
    delete<T extends GameAssignmentDeleteArgs>(args: SelectSubset<T, GameAssignmentDeleteArgs<ExtArgs>>): Prisma__GameAssignmentClient<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameAssignment.
     * @param {GameAssignmentUpdateArgs} args - Arguments to update one GameAssignment.
     * @example
     * // Update one GameAssignment
     * const gameAssignment = await prisma.gameAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameAssignmentUpdateArgs>(args: SelectSubset<T, GameAssignmentUpdateArgs<ExtArgs>>): Prisma__GameAssignmentClient<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameAssignments.
     * @param {GameAssignmentDeleteManyArgs} args - Arguments to filter GameAssignments to delete.
     * @example
     * // Delete a few GameAssignments
     * const { count } = await prisma.gameAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameAssignmentDeleteManyArgs>(args?: SelectSubset<T, GameAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameAssignments
     * const gameAssignment = await prisma.gameAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameAssignmentUpdateManyArgs>(args: SelectSubset<T, GameAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameAssignments and returns the data updated in the database.
     * @param {GameAssignmentUpdateManyAndReturnArgs} args - Arguments to update many GameAssignments.
     * @example
     * // Update many GameAssignments
     * const gameAssignment = await prisma.gameAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameAssignments and only return the `memberId`
     * const gameAssignmentWithMemberIdOnly = await prisma.gameAssignment.updateManyAndReturn({
     *   select: { memberId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, GameAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameAssignment.
     * @param {GameAssignmentUpsertArgs} args - Arguments to update or create a GameAssignment.
     * @example
     * // Update or create a GameAssignment
     * const gameAssignment = await prisma.gameAssignment.upsert({
     *   create: {
     *     // ... data to create a GameAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameAssignment we want to update
     *   }
     * })
     */
    upsert<T extends GameAssignmentUpsertArgs>(args: SelectSubset<T, GameAssignmentUpsertArgs<ExtArgs>>): Prisma__GameAssignmentClient<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAssignmentCountArgs} args - Arguments to filter GameAssignments to count.
     * @example
     * // Count the number of GameAssignments
     * const count = await prisma.gameAssignment.count({
     *   where: {
     *     // ... the filter for the GameAssignments we want to count
     *   }
     * })
    **/
    count<T extends GameAssignmentCountArgs>(
      args?: Subset<T, GameAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAssignmentAggregateArgs>(args: Subset<T, GameAssignmentAggregateArgs>): Prisma.PrismaPromise<GetGameAssignmentAggregateType<T>>

    /**
     * Group by GameAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: GameAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameAssignment model
   */
  readonly fields: GameAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    membership<T extends MembershipDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MembershipDefaultArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameAssignment model
   */
  interface GameAssignmentFieldRefs {
    readonly memberId: FieldRef<"GameAssignment", 'Int'>
    readonly gameId: FieldRef<"GameAssignment", 'Int'>
    readonly gm: FieldRef<"GameAssignment", 'Int'>
    readonly year: FieldRef<"GameAssignment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GameAssignment findUnique
   */
  export type GameAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GameAssignment to fetch.
     */
    where: GameAssignmentWhereUniqueInput
  }

  /**
   * GameAssignment findUniqueOrThrow
   */
  export type GameAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GameAssignment to fetch.
     */
    where: GameAssignmentWhereUniqueInput
  }

  /**
   * GameAssignment findFirst
   */
  export type GameAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GameAssignment to fetch.
     */
    where?: GameAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameAssignments to fetch.
     */
    orderBy?: GameAssignmentOrderByWithRelationInput | GameAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameAssignments.
     */
    cursor?: GameAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameAssignments.
     */
    distinct?: GameAssignmentScalarFieldEnum | GameAssignmentScalarFieldEnum[]
  }

  /**
   * GameAssignment findFirstOrThrow
   */
  export type GameAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GameAssignment to fetch.
     */
    where?: GameAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameAssignments to fetch.
     */
    orderBy?: GameAssignmentOrderByWithRelationInput | GameAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameAssignments.
     */
    cursor?: GameAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameAssignments.
     */
    distinct?: GameAssignmentScalarFieldEnum | GameAssignmentScalarFieldEnum[]
  }

  /**
   * GameAssignment findMany
   */
  export type GameAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which GameAssignments to fetch.
     */
    where?: GameAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameAssignments to fetch.
     */
    orderBy?: GameAssignmentOrderByWithRelationInput | GameAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameAssignments.
     */
    cursor?: GameAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameAssignments.
     */
    skip?: number
    distinct?: GameAssignmentScalarFieldEnum | GameAssignmentScalarFieldEnum[]
  }

  /**
   * GameAssignment create
   */
  export type GameAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a GameAssignment.
     */
    data: XOR<GameAssignmentCreateInput, GameAssignmentUncheckedCreateInput>
  }

  /**
   * GameAssignment createMany
   */
  export type GameAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameAssignments.
     */
    data: GameAssignmentCreateManyInput | GameAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameAssignment createManyAndReturn
   */
  export type GameAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many GameAssignments.
     */
    data: GameAssignmentCreateManyInput | GameAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameAssignment update
   */
  export type GameAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a GameAssignment.
     */
    data: XOR<GameAssignmentUpdateInput, GameAssignmentUncheckedUpdateInput>
    /**
     * Choose, which GameAssignment to update.
     */
    where: GameAssignmentWhereUniqueInput
  }

  /**
   * GameAssignment updateMany
   */
  export type GameAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameAssignments.
     */
    data: XOR<GameAssignmentUpdateManyMutationInput, GameAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which GameAssignments to update
     */
    where?: GameAssignmentWhereInput
    /**
     * Limit how many GameAssignments to update.
     */
    limit?: number
  }

  /**
   * GameAssignment updateManyAndReturn
   */
  export type GameAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update GameAssignments.
     */
    data: XOR<GameAssignmentUpdateManyMutationInput, GameAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which GameAssignments to update
     */
    where?: GameAssignmentWhereInput
    /**
     * Limit how many GameAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameAssignment upsert
   */
  export type GameAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the GameAssignment to update in case it exists.
     */
    where: GameAssignmentWhereUniqueInput
    /**
     * In case the GameAssignment found by the `where` argument doesn't exist, create a new GameAssignment with this data.
     */
    create: XOR<GameAssignmentCreateInput, GameAssignmentUncheckedCreateInput>
    /**
     * In case the GameAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameAssignmentUpdateInput, GameAssignmentUncheckedUpdateInput>
  }

  /**
   * GameAssignment delete
   */
  export type GameAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
    /**
     * Filter which GameAssignment to delete.
     */
    where: GameAssignmentWhereUniqueInput
  }

  /**
   * GameAssignment deleteMany
   */
  export type GameAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameAssignments to delete
     */
    where?: GameAssignmentWhereInput
    /**
     * Limit how many GameAssignments to delete.
     */
    limit?: number
  }

  /**
   * GameAssignment without action
   */
  export type GameAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model GameChoice
   */

  export type AggregateGameChoice = {
    _count: GameChoiceCountAggregateOutputType | null
    _avg: GameChoiceAvgAggregateOutputType | null
    _sum: GameChoiceSumAggregateOutputType | null
    _min: GameChoiceMinAggregateOutputType | null
    _max: GameChoiceMaxAggregateOutputType | null
  }

  export type GameChoiceAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
    memberId: number | null
    rank: number | null
    slotId: number | null
    year: number | null
  }

  export type GameChoiceSumAggregateOutputType = {
    id: number | null
    gameId: number | null
    memberId: number | null
    rank: number | null
    slotId: number | null
    year: number | null
  }

  export type GameChoiceMinAggregateOutputType = {
    id: number | null
    gameId: number | null
    memberId: number | null
    rank: number | null
    slotId: number | null
    year: number | null
    returningPlayer: boolean | null
  }

  export type GameChoiceMaxAggregateOutputType = {
    id: number | null
    gameId: number | null
    memberId: number | null
    rank: number | null
    slotId: number | null
    year: number | null
    returningPlayer: boolean | null
  }

  export type GameChoiceCountAggregateOutputType = {
    id: number
    gameId: number
    memberId: number
    rank: number
    slotId: number
    year: number
    returningPlayer: number
    _all: number
  }


  export type GameChoiceAvgAggregateInputType = {
    id?: true
    gameId?: true
    memberId?: true
    rank?: true
    slotId?: true
    year?: true
  }

  export type GameChoiceSumAggregateInputType = {
    id?: true
    gameId?: true
    memberId?: true
    rank?: true
    slotId?: true
    year?: true
  }

  export type GameChoiceMinAggregateInputType = {
    id?: true
    gameId?: true
    memberId?: true
    rank?: true
    slotId?: true
    year?: true
    returningPlayer?: true
  }

  export type GameChoiceMaxAggregateInputType = {
    id?: true
    gameId?: true
    memberId?: true
    rank?: true
    slotId?: true
    year?: true
    returningPlayer?: true
  }

  export type GameChoiceCountAggregateInputType = {
    id?: true
    gameId?: true
    memberId?: true
    rank?: true
    slotId?: true
    year?: true
    returningPlayer?: true
    _all?: true
  }

  export type GameChoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameChoice to aggregate.
     */
    where?: GameChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameChoices to fetch.
     */
    orderBy?: GameChoiceOrderByWithRelationInput | GameChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameChoices
    **/
    _count?: true | GameChoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameChoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameChoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameChoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameChoiceMaxAggregateInputType
  }

  export type GetGameChoiceAggregateType<T extends GameChoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateGameChoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameChoice[P]>
      : GetScalarType<T[P], AggregateGameChoice[P]>
  }




  export type GameChoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameChoiceWhereInput
    orderBy?: GameChoiceOrderByWithAggregationInput | GameChoiceOrderByWithAggregationInput[]
    by: GameChoiceScalarFieldEnum[] | GameChoiceScalarFieldEnum
    having?: GameChoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameChoiceCountAggregateInputType | true
    _avg?: GameChoiceAvgAggregateInputType
    _sum?: GameChoiceSumAggregateInputType
    _min?: GameChoiceMinAggregateInputType
    _max?: GameChoiceMaxAggregateInputType
  }

  export type GameChoiceGroupByOutputType = {
    id: number
    gameId: number | null
    memberId: number
    rank: number
    slotId: number
    year: number
    returningPlayer: boolean
    _count: GameChoiceCountAggregateOutputType | null
    _avg: GameChoiceAvgAggregateOutputType | null
    _sum: GameChoiceSumAggregateOutputType | null
    _min: GameChoiceMinAggregateOutputType | null
    _max: GameChoiceMaxAggregateOutputType | null
  }

  type GetGameChoiceGroupByPayload<T extends GameChoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameChoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameChoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameChoiceGroupByOutputType[P]>
            : GetScalarType<T[P], GameChoiceGroupByOutputType[P]>
        }
      >
    >


  export type GameChoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    memberId?: boolean
    rank?: boolean
    slotId?: boolean
    year?: boolean
    returningPlayer?: boolean
    game?: boolean | GameChoice$gameArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
    slot?: boolean | SlotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameChoice"]>

  export type GameChoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    memberId?: boolean
    rank?: boolean
    slotId?: boolean
    year?: boolean
    returningPlayer?: boolean
    game?: boolean | GameChoice$gameArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
    slot?: boolean | SlotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameChoice"]>

  export type GameChoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    memberId?: boolean
    rank?: boolean
    slotId?: boolean
    year?: boolean
    returningPlayer?: boolean
    game?: boolean | GameChoice$gameArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
    slot?: boolean | SlotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameChoice"]>

  export type GameChoiceSelectScalar = {
    id?: boolean
    gameId?: boolean
    memberId?: boolean
    rank?: boolean
    slotId?: boolean
    year?: boolean
    returningPlayer?: boolean
  }

  export type GameChoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gameId" | "memberId" | "rank" | "slotId" | "year" | "returningPlayer", ExtArgs["result"]["gameChoice"]>
  export type GameChoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameChoice$gameArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
    slot?: boolean | SlotDefaultArgs<ExtArgs>
  }
  export type GameChoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameChoice$gameArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
    slot?: boolean | SlotDefaultArgs<ExtArgs>
  }
  export type GameChoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameChoice$gameArgs<ExtArgs>
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
    slot?: boolean | SlotDefaultArgs<ExtArgs>
  }

  export type $GameChoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameChoice"
    objects: {
      game: Prisma.$GamePayload<ExtArgs> | null
      membership: Prisma.$MembershipPayload<ExtArgs>
      slot: Prisma.$SlotPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gameId: number | null
      memberId: number
      rank: number
      slotId: number
      year: number
      returningPlayer: boolean
    }, ExtArgs["result"]["gameChoice"]>
    composites: {}
  }

  type GameChoiceGetPayload<S extends boolean | null | undefined | GameChoiceDefaultArgs> = $Result.GetResult<Prisma.$GameChoicePayload, S>

  type GameChoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameChoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameChoiceCountAggregateInputType | true
    }

  export interface GameChoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameChoice'], meta: { name: 'GameChoice' } }
    /**
     * Find zero or one GameChoice that matches the filter.
     * @param {GameChoiceFindUniqueArgs} args - Arguments to find a GameChoice
     * @example
     * // Get one GameChoice
     * const gameChoice = await prisma.gameChoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameChoiceFindUniqueArgs>(args: SelectSubset<T, GameChoiceFindUniqueArgs<ExtArgs>>): Prisma__GameChoiceClient<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameChoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameChoiceFindUniqueOrThrowArgs} args - Arguments to find a GameChoice
     * @example
     * // Get one GameChoice
     * const gameChoice = await prisma.gameChoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameChoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, GameChoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameChoiceClient<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameChoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChoiceFindFirstArgs} args - Arguments to find a GameChoice
     * @example
     * // Get one GameChoice
     * const gameChoice = await prisma.gameChoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameChoiceFindFirstArgs>(args?: SelectSubset<T, GameChoiceFindFirstArgs<ExtArgs>>): Prisma__GameChoiceClient<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameChoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChoiceFindFirstOrThrowArgs} args - Arguments to find a GameChoice
     * @example
     * // Get one GameChoice
     * const gameChoice = await prisma.gameChoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameChoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, GameChoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameChoiceClient<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameChoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameChoices
     * const gameChoices = await prisma.gameChoice.findMany()
     * 
     * // Get first 10 GameChoices
     * const gameChoices = await prisma.gameChoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameChoiceWithIdOnly = await prisma.gameChoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameChoiceFindManyArgs>(args?: SelectSubset<T, GameChoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameChoice.
     * @param {GameChoiceCreateArgs} args - Arguments to create a GameChoice.
     * @example
     * // Create one GameChoice
     * const GameChoice = await prisma.gameChoice.create({
     *   data: {
     *     // ... data to create a GameChoice
     *   }
     * })
     * 
     */
    create<T extends GameChoiceCreateArgs>(args: SelectSubset<T, GameChoiceCreateArgs<ExtArgs>>): Prisma__GameChoiceClient<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameChoices.
     * @param {GameChoiceCreateManyArgs} args - Arguments to create many GameChoices.
     * @example
     * // Create many GameChoices
     * const gameChoice = await prisma.gameChoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameChoiceCreateManyArgs>(args?: SelectSubset<T, GameChoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameChoices and returns the data saved in the database.
     * @param {GameChoiceCreateManyAndReturnArgs} args - Arguments to create many GameChoices.
     * @example
     * // Create many GameChoices
     * const gameChoice = await prisma.gameChoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameChoices and only return the `id`
     * const gameChoiceWithIdOnly = await prisma.gameChoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameChoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, GameChoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameChoice.
     * @param {GameChoiceDeleteArgs} args - Arguments to delete one GameChoice.
     * @example
     * // Delete one GameChoice
     * const GameChoice = await prisma.gameChoice.delete({
     *   where: {
     *     // ... filter to delete one GameChoice
     *   }
     * })
     * 
     */
    delete<T extends GameChoiceDeleteArgs>(args: SelectSubset<T, GameChoiceDeleteArgs<ExtArgs>>): Prisma__GameChoiceClient<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameChoice.
     * @param {GameChoiceUpdateArgs} args - Arguments to update one GameChoice.
     * @example
     * // Update one GameChoice
     * const gameChoice = await prisma.gameChoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameChoiceUpdateArgs>(args: SelectSubset<T, GameChoiceUpdateArgs<ExtArgs>>): Prisma__GameChoiceClient<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameChoices.
     * @param {GameChoiceDeleteManyArgs} args - Arguments to filter GameChoices to delete.
     * @example
     * // Delete a few GameChoices
     * const { count } = await prisma.gameChoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameChoiceDeleteManyArgs>(args?: SelectSubset<T, GameChoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameChoices
     * const gameChoice = await prisma.gameChoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameChoiceUpdateManyArgs>(args: SelectSubset<T, GameChoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameChoices and returns the data updated in the database.
     * @param {GameChoiceUpdateManyAndReturnArgs} args - Arguments to update many GameChoices.
     * @example
     * // Update many GameChoices
     * const gameChoice = await prisma.gameChoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameChoices and only return the `id`
     * const gameChoiceWithIdOnly = await prisma.gameChoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameChoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, GameChoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameChoice.
     * @param {GameChoiceUpsertArgs} args - Arguments to update or create a GameChoice.
     * @example
     * // Update or create a GameChoice
     * const gameChoice = await prisma.gameChoice.upsert({
     *   create: {
     *     // ... data to create a GameChoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameChoice we want to update
     *   }
     * })
     */
    upsert<T extends GameChoiceUpsertArgs>(args: SelectSubset<T, GameChoiceUpsertArgs<ExtArgs>>): Prisma__GameChoiceClient<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChoiceCountArgs} args - Arguments to filter GameChoices to count.
     * @example
     * // Count the number of GameChoices
     * const count = await prisma.gameChoice.count({
     *   where: {
     *     // ... the filter for the GameChoices we want to count
     *   }
     * })
    **/
    count<T extends GameChoiceCountArgs>(
      args?: Subset<T, GameChoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameChoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameChoiceAggregateArgs>(args: Subset<T, GameChoiceAggregateArgs>): Prisma.PrismaPromise<GetGameChoiceAggregateType<T>>

    /**
     * Group by GameChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameChoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameChoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameChoiceGroupByArgs['orderBy'] }
        : { orderBy?: GameChoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameChoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameChoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameChoice model
   */
  readonly fields: GameChoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameChoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameChoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameChoice$gameArgs<ExtArgs> = {}>(args?: Subset<T, GameChoice$gameArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    membership<T extends MembershipDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MembershipDefaultArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    slot<T extends SlotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SlotDefaultArgs<ExtArgs>>): Prisma__SlotClient<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameChoice model
   */
  interface GameChoiceFieldRefs {
    readonly id: FieldRef<"GameChoice", 'Int'>
    readonly gameId: FieldRef<"GameChoice", 'Int'>
    readonly memberId: FieldRef<"GameChoice", 'Int'>
    readonly rank: FieldRef<"GameChoice", 'Int'>
    readonly slotId: FieldRef<"GameChoice", 'Int'>
    readonly year: FieldRef<"GameChoice", 'Int'>
    readonly returningPlayer: FieldRef<"GameChoice", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * GameChoice findUnique
   */
  export type GameChoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    /**
     * Filter, which GameChoice to fetch.
     */
    where: GameChoiceWhereUniqueInput
  }

  /**
   * GameChoice findUniqueOrThrow
   */
  export type GameChoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    /**
     * Filter, which GameChoice to fetch.
     */
    where: GameChoiceWhereUniqueInput
  }

  /**
   * GameChoice findFirst
   */
  export type GameChoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    /**
     * Filter, which GameChoice to fetch.
     */
    where?: GameChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameChoices to fetch.
     */
    orderBy?: GameChoiceOrderByWithRelationInput | GameChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameChoices.
     */
    cursor?: GameChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameChoices.
     */
    distinct?: GameChoiceScalarFieldEnum | GameChoiceScalarFieldEnum[]
  }

  /**
   * GameChoice findFirstOrThrow
   */
  export type GameChoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    /**
     * Filter, which GameChoice to fetch.
     */
    where?: GameChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameChoices to fetch.
     */
    orderBy?: GameChoiceOrderByWithRelationInput | GameChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameChoices.
     */
    cursor?: GameChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameChoices.
     */
    distinct?: GameChoiceScalarFieldEnum | GameChoiceScalarFieldEnum[]
  }

  /**
   * GameChoice findMany
   */
  export type GameChoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    /**
     * Filter, which GameChoices to fetch.
     */
    where?: GameChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameChoices to fetch.
     */
    orderBy?: GameChoiceOrderByWithRelationInput | GameChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameChoices.
     */
    cursor?: GameChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameChoices.
     */
    skip?: number
    distinct?: GameChoiceScalarFieldEnum | GameChoiceScalarFieldEnum[]
  }

  /**
   * GameChoice create
   */
  export type GameChoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a GameChoice.
     */
    data: XOR<GameChoiceCreateInput, GameChoiceUncheckedCreateInput>
  }

  /**
   * GameChoice createMany
   */
  export type GameChoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameChoices.
     */
    data: GameChoiceCreateManyInput | GameChoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameChoice createManyAndReturn
   */
  export type GameChoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * The data used to create many GameChoices.
     */
    data: GameChoiceCreateManyInput | GameChoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameChoice update
   */
  export type GameChoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a GameChoice.
     */
    data: XOR<GameChoiceUpdateInput, GameChoiceUncheckedUpdateInput>
    /**
     * Choose, which GameChoice to update.
     */
    where: GameChoiceWhereUniqueInput
  }

  /**
   * GameChoice updateMany
   */
  export type GameChoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameChoices.
     */
    data: XOR<GameChoiceUpdateManyMutationInput, GameChoiceUncheckedUpdateManyInput>
    /**
     * Filter which GameChoices to update
     */
    where?: GameChoiceWhereInput
    /**
     * Limit how many GameChoices to update.
     */
    limit?: number
  }

  /**
   * GameChoice updateManyAndReturn
   */
  export type GameChoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * The data used to update GameChoices.
     */
    data: XOR<GameChoiceUpdateManyMutationInput, GameChoiceUncheckedUpdateManyInput>
    /**
     * Filter which GameChoices to update
     */
    where?: GameChoiceWhereInput
    /**
     * Limit how many GameChoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameChoice upsert
   */
  export type GameChoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the GameChoice to update in case it exists.
     */
    where: GameChoiceWhereUniqueInput
    /**
     * In case the GameChoice found by the `where` argument doesn't exist, create a new GameChoice with this data.
     */
    create: XOR<GameChoiceCreateInput, GameChoiceUncheckedCreateInput>
    /**
     * In case the GameChoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameChoiceUpdateInput, GameChoiceUncheckedUpdateInput>
  }

  /**
   * GameChoice delete
   */
  export type GameChoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    /**
     * Filter which GameChoice to delete.
     */
    where: GameChoiceWhereUniqueInput
  }

  /**
   * GameChoice deleteMany
   */
  export type GameChoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameChoices to delete
     */
    where?: GameChoiceWhereInput
    /**
     * Limit how many GameChoices to delete.
     */
    limit?: number
  }

  /**
   * GameChoice.game
   */
  export type GameChoice$gameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
  }

  /**
   * GameChoice without action
   */
  export type GameChoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
  }


  /**
   * Model GameSubmission
   */

  export type AggregateGameSubmission = {
    _count: GameSubmissionCountAggregateOutputType | null
    _avg: GameSubmissionAvgAggregateOutputType | null
    _sum: GameSubmissionSumAggregateOutputType | null
    _min: GameSubmissionMinAggregateOutputType | null
    _max: GameSubmissionMaxAggregateOutputType | null
  }

  export type GameSubmissionAvgAggregateOutputType = {
    id: number | null
    memberId: number | null
    year: number | null
  }

  export type GameSubmissionSumAggregateOutputType = {
    id: number | null
    memberId: number | null
    year: number | null
  }

  export type GameSubmissionMinAggregateOutputType = {
    id: number | null
    memberId: number | null
    message: string | null
    year: number | null
  }

  export type GameSubmissionMaxAggregateOutputType = {
    id: number | null
    memberId: number | null
    message: string | null
    year: number | null
  }

  export type GameSubmissionCountAggregateOutputType = {
    id: number
    memberId: number
    message: number
    year: number
    _all: number
  }


  export type GameSubmissionAvgAggregateInputType = {
    id?: true
    memberId?: true
    year?: true
  }

  export type GameSubmissionSumAggregateInputType = {
    id?: true
    memberId?: true
    year?: true
  }

  export type GameSubmissionMinAggregateInputType = {
    id?: true
    memberId?: true
    message?: true
    year?: true
  }

  export type GameSubmissionMaxAggregateInputType = {
    id?: true
    memberId?: true
    message?: true
    year?: true
  }

  export type GameSubmissionCountAggregateInputType = {
    id?: true
    memberId?: true
    message?: true
    year?: true
    _all?: true
  }

  export type GameSubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSubmission to aggregate.
     */
    where?: GameSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSubmissions to fetch.
     */
    orderBy?: GameSubmissionOrderByWithRelationInput | GameSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameSubmissions
    **/
    _count?: true | GameSubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameSubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameSubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameSubmissionMaxAggregateInputType
  }

  export type GetGameSubmissionAggregateType<T extends GameSubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateGameSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameSubmission[P]>
      : GetScalarType<T[P], AggregateGameSubmission[P]>
  }




  export type GameSubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSubmissionWhereInput
    orderBy?: GameSubmissionOrderByWithAggregationInput | GameSubmissionOrderByWithAggregationInput[]
    by: GameSubmissionScalarFieldEnum[] | GameSubmissionScalarFieldEnum
    having?: GameSubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameSubmissionCountAggregateInputType | true
    _avg?: GameSubmissionAvgAggregateInputType
    _sum?: GameSubmissionSumAggregateInputType
    _min?: GameSubmissionMinAggregateInputType
    _max?: GameSubmissionMaxAggregateInputType
  }

  export type GameSubmissionGroupByOutputType = {
    id: number
    memberId: number
    message: string
    year: number
    _count: GameSubmissionCountAggregateOutputType | null
    _avg: GameSubmissionAvgAggregateOutputType | null
    _sum: GameSubmissionSumAggregateOutputType | null
    _min: GameSubmissionMinAggregateOutputType | null
    _max: GameSubmissionMaxAggregateOutputType | null
  }

  type GetGameSubmissionGroupByPayload<T extends GameSubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameSubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameSubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameSubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], GameSubmissionGroupByOutputType[P]>
        }
      >
    >


  export type GameSubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    message?: boolean
    year?: boolean
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSubmission"]>

  export type GameSubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    message?: boolean
    year?: boolean
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSubmission"]>

  export type GameSubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    message?: boolean
    year?: boolean
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSubmission"]>

  export type GameSubmissionSelectScalar = {
    id?: boolean
    memberId?: boolean
    message?: boolean
    year?: boolean
  }

  export type GameSubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "memberId" | "message" | "year", ExtArgs["result"]["gameSubmission"]>
  export type GameSubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }
  export type GameSubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }
  export type GameSubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membership?: boolean | MembershipDefaultArgs<ExtArgs>
  }

  export type $GameSubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameSubmission"
    objects: {
      membership: Prisma.$MembershipPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      memberId: number
      message: string
      year: number
    }, ExtArgs["result"]["gameSubmission"]>
    composites: {}
  }

  type GameSubmissionGetPayload<S extends boolean | null | undefined | GameSubmissionDefaultArgs> = $Result.GetResult<Prisma.$GameSubmissionPayload, S>

  type GameSubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameSubmissionCountAggregateInputType | true
    }

  export interface GameSubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameSubmission'], meta: { name: 'GameSubmission' } }
    /**
     * Find zero or one GameSubmission that matches the filter.
     * @param {GameSubmissionFindUniqueArgs} args - Arguments to find a GameSubmission
     * @example
     * // Get one GameSubmission
     * const gameSubmission = await prisma.gameSubmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameSubmissionFindUniqueArgs>(args: SelectSubset<T, GameSubmissionFindUniqueArgs<ExtArgs>>): Prisma__GameSubmissionClient<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameSubmission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameSubmissionFindUniqueOrThrowArgs} args - Arguments to find a GameSubmission
     * @example
     * // Get one GameSubmission
     * const gameSubmission = await prisma.gameSubmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameSubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, GameSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameSubmissionClient<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameSubmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSubmissionFindFirstArgs} args - Arguments to find a GameSubmission
     * @example
     * // Get one GameSubmission
     * const gameSubmission = await prisma.gameSubmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameSubmissionFindFirstArgs>(args?: SelectSubset<T, GameSubmissionFindFirstArgs<ExtArgs>>): Prisma__GameSubmissionClient<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameSubmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSubmissionFindFirstOrThrowArgs} args - Arguments to find a GameSubmission
     * @example
     * // Get one GameSubmission
     * const gameSubmission = await prisma.gameSubmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameSubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, GameSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameSubmissionClient<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameSubmissions
     * const gameSubmissions = await prisma.gameSubmission.findMany()
     * 
     * // Get first 10 GameSubmissions
     * const gameSubmissions = await prisma.gameSubmission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameSubmissionWithIdOnly = await prisma.gameSubmission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameSubmissionFindManyArgs>(args?: SelectSubset<T, GameSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameSubmission.
     * @param {GameSubmissionCreateArgs} args - Arguments to create a GameSubmission.
     * @example
     * // Create one GameSubmission
     * const GameSubmission = await prisma.gameSubmission.create({
     *   data: {
     *     // ... data to create a GameSubmission
     *   }
     * })
     * 
     */
    create<T extends GameSubmissionCreateArgs>(args: SelectSubset<T, GameSubmissionCreateArgs<ExtArgs>>): Prisma__GameSubmissionClient<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameSubmissions.
     * @param {GameSubmissionCreateManyArgs} args - Arguments to create many GameSubmissions.
     * @example
     * // Create many GameSubmissions
     * const gameSubmission = await prisma.gameSubmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameSubmissionCreateManyArgs>(args?: SelectSubset<T, GameSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameSubmissions and returns the data saved in the database.
     * @param {GameSubmissionCreateManyAndReturnArgs} args - Arguments to create many GameSubmissions.
     * @example
     * // Create many GameSubmissions
     * const gameSubmission = await prisma.gameSubmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameSubmissions and only return the `id`
     * const gameSubmissionWithIdOnly = await prisma.gameSubmission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameSubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, GameSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameSubmission.
     * @param {GameSubmissionDeleteArgs} args - Arguments to delete one GameSubmission.
     * @example
     * // Delete one GameSubmission
     * const GameSubmission = await prisma.gameSubmission.delete({
     *   where: {
     *     // ... filter to delete one GameSubmission
     *   }
     * })
     * 
     */
    delete<T extends GameSubmissionDeleteArgs>(args: SelectSubset<T, GameSubmissionDeleteArgs<ExtArgs>>): Prisma__GameSubmissionClient<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameSubmission.
     * @param {GameSubmissionUpdateArgs} args - Arguments to update one GameSubmission.
     * @example
     * // Update one GameSubmission
     * const gameSubmission = await prisma.gameSubmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameSubmissionUpdateArgs>(args: SelectSubset<T, GameSubmissionUpdateArgs<ExtArgs>>): Prisma__GameSubmissionClient<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameSubmissions.
     * @param {GameSubmissionDeleteManyArgs} args - Arguments to filter GameSubmissions to delete.
     * @example
     * // Delete a few GameSubmissions
     * const { count } = await prisma.gameSubmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameSubmissionDeleteManyArgs>(args?: SelectSubset<T, GameSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameSubmissions
     * const gameSubmission = await prisma.gameSubmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameSubmissionUpdateManyArgs>(args: SelectSubset<T, GameSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameSubmissions and returns the data updated in the database.
     * @param {GameSubmissionUpdateManyAndReturnArgs} args - Arguments to update many GameSubmissions.
     * @example
     * // Update many GameSubmissions
     * const gameSubmission = await prisma.gameSubmission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameSubmissions and only return the `id`
     * const gameSubmissionWithIdOnly = await prisma.gameSubmission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameSubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, GameSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameSubmission.
     * @param {GameSubmissionUpsertArgs} args - Arguments to update or create a GameSubmission.
     * @example
     * // Update or create a GameSubmission
     * const gameSubmission = await prisma.gameSubmission.upsert({
     *   create: {
     *     // ... data to create a GameSubmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameSubmission we want to update
     *   }
     * })
     */
    upsert<T extends GameSubmissionUpsertArgs>(args: SelectSubset<T, GameSubmissionUpsertArgs<ExtArgs>>): Prisma__GameSubmissionClient<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSubmissionCountArgs} args - Arguments to filter GameSubmissions to count.
     * @example
     * // Count the number of GameSubmissions
     * const count = await prisma.gameSubmission.count({
     *   where: {
     *     // ... the filter for the GameSubmissions we want to count
     *   }
     * })
    **/
    count<T extends GameSubmissionCountArgs>(
      args?: Subset<T, GameSubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameSubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameSubmissionAggregateArgs>(args: Subset<T, GameSubmissionAggregateArgs>): Prisma.PrismaPromise<GetGameSubmissionAggregateType<T>>

    /**
     * Group by GameSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameSubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameSubmissionGroupByArgs['orderBy'] }
        : { orderBy?: GameSubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameSubmission model
   */
  readonly fields: GameSubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameSubmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameSubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    membership<T extends MembershipDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MembershipDefaultArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameSubmission model
   */
  interface GameSubmissionFieldRefs {
    readonly id: FieldRef<"GameSubmission", 'Int'>
    readonly memberId: FieldRef<"GameSubmission", 'Int'>
    readonly message: FieldRef<"GameSubmission", 'String'>
    readonly year: FieldRef<"GameSubmission", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GameSubmission findUnique
   */
  export type GameSubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which GameSubmission to fetch.
     */
    where: GameSubmissionWhereUniqueInput
  }

  /**
   * GameSubmission findUniqueOrThrow
   */
  export type GameSubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which GameSubmission to fetch.
     */
    where: GameSubmissionWhereUniqueInput
  }

  /**
   * GameSubmission findFirst
   */
  export type GameSubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which GameSubmission to fetch.
     */
    where?: GameSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSubmissions to fetch.
     */
    orderBy?: GameSubmissionOrderByWithRelationInput | GameSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSubmissions.
     */
    cursor?: GameSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSubmissions.
     */
    distinct?: GameSubmissionScalarFieldEnum | GameSubmissionScalarFieldEnum[]
  }

  /**
   * GameSubmission findFirstOrThrow
   */
  export type GameSubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which GameSubmission to fetch.
     */
    where?: GameSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSubmissions to fetch.
     */
    orderBy?: GameSubmissionOrderByWithRelationInput | GameSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSubmissions.
     */
    cursor?: GameSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSubmissions.
     */
    distinct?: GameSubmissionScalarFieldEnum | GameSubmissionScalarFieldEnum[]
  }

  /**
   * GameSubmission findMany
   */
  export type GameSubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which GameSubmissions to fetch.
     */
    where?: GameSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSubmissions to fetch.
     */
    orderBy?: GameSubmissionOrderByWithRelationInput | GameSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameSubmissions.
     */
    cursor?: GameSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSubmissions.
     */
    skip?: number
    distinct?: GameSubmissionScalarFieldEnum | GameSubmissionScalarFieldEnum[]
  }

  /**
   * GameSubmission create
   */
  export type GameSubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a GameSubmission.
     */
    data: XOR<GameSubmissionCreateInput, GameSubmissionUncheckedCreateInput>
  }

  /**
   * GameSubmission createMany
   */
  export type GameSubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameSubmissions.
     */
    data: GameSubmissionCreateManyInput | GameSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameSubmission createManyAndReturn
   */
  export type GameSubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many GameSubmissions.
     */
    data: GameSubmissionCreateManyInput | GameSubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameSubmission update
   */
  export type GameSubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a GameSubmission.
     */
    data: XOR<GameSubmissionUpdateInput, GameSubmissionUncheckedUpdateInput>
    /**
     * Choose, which GameSubmission to update.
     */
    where: GameSubmissionWhereUniqueInput
  }

  /**
   * GameSubmission updateMany
   */
  export type GameSubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameSubmissions.
     */
    data: XOR<GameSubmissionUpdateManyMutationInput, GameSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which GameSubmissions to update
     */
    where?: GameSubmissionWhereInput
    /**
     * Limit how many GameSubmissions to update.
     */
    limit?: number
  }

  /**
   * GameSubmission updateManyAndReturn
   */
  export type GameSubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * The data used to update GameSubmissions.
     */
    data: XOR<GameSubmissionUpdateManyMutationInput, GameSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which GameSubmissions to update
     */
    where?: GameSubmissionWhereInput
    /**
     * Limit how many GameSubmissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameSubmission upsert
   */
  export type GameSubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the GameSubmission to update in case it exists.
     */
    where: GameSubmissionWhereUniqueInput
    /**
     * In case the GameSubmission found by the `where` argument doesn't exist, create a new GameSubmission with this data.
     */
    create: XOR<GameSubmissionCreateInput, GameSubmissionUncheckedCreateInput>
    /**
     * In case the GameSubmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameSubmissionUpdateInput, GameSubmissionUncheckedUpdateInput>
  }

  /**
   * GameSubmission delete
   */
  export type GameSubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionInclude<ExtArgs> | null
    /**
     * Filter which GameSubmission to delete.
     */
    where: GameSubmissionWhereUniqueInput
  }

  /**
   * GameSubmission deleteMany
   */
  export type GameSubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSubmissions to delete
     */
    where?: GameSubmissionWhereInput
    /**
     * Limit how many GameSubmissions to delete.
     */
    limit?: number
  }

  /**
   * GameSubmission without action
   */
  export type GameSubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionInclude<ExtArgs> | null
  }


  /**
   * Model HotelRoom
   */

  export type AggregateHotelRoom = {
    _count: HotelRoomCountAggregateOutputType | null
    _avg: HotelRoomAvgAggregateOutputType | null
    _sum: HotelRoomSumAggregateOutputType | null
    _min: HotelRoomMinAggregateOutputType | null
    _max: HotelRoomMaxAggregateOutputType | null
  }

  export type HotelRoomAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
  }

  export type HotelRoomSumAggregateOutputType = {
    id: number | null
    quantity: number | null
  }

  export type HotelRoomMinAggregateOutputType = {
    id: number | null
    description: string | null
    gamingRoom: boolean | null
    occupancy: string | null
    quantity: number | null
    rate: string | null
    bathroomType: string | null
    type: string | null
  }

  export type HotelRoomMaxAggregateOutputType = {
    id: number | null
    description: string | null
    gamingRoom: boolean | null
    occupancy: string | null
    quantity: number | null
    rate: string | null
    bathroomType: string | null
    type: string | null
  }

  export type HotelRoomCountAggregateOutputType = {
    id: number
    description: number
    gamingRoom: number
    occupancy: number
    quantity: number
    rate: number
    bathroomType: number
    type: number
    _all: number
  }


  export type HotelRoomAvgAggregateInputType = {
    id?: true
    quantity?: true
  }

  export type HotelRoomSumAggregateInputType = {
    id?: true
    quantity?: true
  }

  export type HotelRoomMinAggregateInputType = {
    id?: true
    description?: true
    gamingRoom?: true
    occupancy?: true
    quantity?: true
    rate?: true
    bathroomType?: true
    type?: true
  }

  export type HotelRoomMaxAggregateInputType = {
    id?: true
    description?: true
    gamingRoom?: true
    occupancy?: true
    quantity?: true
    rate?: true
    bathroomType?: true
    type?: true
  }

  export type HotelRoomCountAggregateInputType = {
    id?: true
    description?: true
    gamingRoom?: true
    occupancy?: true
    quantity?: true
    rate?: true
    bathroomType?: true
    type?: true
    _all?: true
  }

  export type HotelRoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HotelRoom to aggregate.
     */
    where?: HotelRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelRooms to fetch.
     */
    orderBy?: HotelRoomOrderByWithRelationInput | HotelRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HotelRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HotelRooms
    **/
    _count?: true | HotelRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HotelRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HotelRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HotelRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HotelRoomMaxAggregateInputType
  }

  export type GetHotelRoomAggregateType<T extends HotelRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateHotelRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHotelRoom[P]>
      : GetScalarType<T[P], AggregateHotelRoom[P]>
  }




  export type HotelRoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HotelRoomWhereInput
    orderBy?: HotelRoomOrderByWithAggregationInput | HotelRoomOrderByWithAggregationInput[]
    by: HotelRoomScalarFieldEnum[] | HotelRoomScalarFieldEnum
    having?: HotelRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HotelRoomCountAggregateInputType | true
    _avg?: HotelRoomAvgAggregateInputType
    _sum?: HotelRoomSumAggregateInputType
    _min?: HotelRoomMinAggregateInputType
    _max?: HotelRoomMaxAggregateInputType
  }

  export type HotelRoomGroupByOutputType = {
    id: number
    description: string
    gamingRoom: boolean
    occupancy: string
    quantity: number
    rate: string
    bathroomType: string
    type: string
    _count: HotelRoomCountAggregateOutputType | null
    _avg: HotelRoomAvgAggregateOutputType | null
    _sum: HotelRoomSumAggregateOutputType | null
    _min: HotelRoomMinAggregateOutputType | null
    _max: HotelRoomMaxAggregateOutputType | null
  }

  type GetHotelRoomGroupByPayload<T extends HotelRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HotelRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HotelRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HotelRoomGroupByOutputType[P]>
            : GetScalarType<T[P], HotelRoomGroupByOutputType[P]>
        }
      >
    >


  export type HotelRoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    gamingRoom?: boolean
    occupancy?: boolean
    quantity?: boolean
    rate?: boolean
    bathroomType?: boolean
    type?: boolean
    membership?: boolean | HotelRoom$membershipArgs<ExtArgs>
    _count?: boolean | HotelRoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hotelRoom"]>

  export type HotelRoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    gamingRoom?: boolean
    occupancy?: boolean
    quantity?: boolean
    rate?: boolean
    bathroomType?: boolean
    type?: boolean
  }, ExtArgs["result"]["hotelRoom"]>

  export type HotelRoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    gamingRoom?: boolean
    occupancy?: boolean
    quantity?: boolean
    rate?: boolean
    bathroomType?: boolean
    type?: boolean
  }, ExtArgs["result"]["hotelRoom"]>

  export type HotelRoomSelectScalar = {
    id?: boolean
    description?: boolean
    gamingRoom?: boolean
    occupancy?: boolean
    quantity?: boolean
    rate?: boolean
    bathroomType?: boolean
    type?: boolean
  }

  export type HotelRoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "gamingRoom" | "occupancy" | "quantity" | "rate" | "bathroomType" | "type", ExtArgs["result"]["hotelRoom"]>
  export type HotelRoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membership?: boolean | HotelRoom$membershipArgs<ExtArgs>
    _count?: boolean | HotelRoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HotelRoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type HotelRoomIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $HotelRoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HotelRoom"
    objects: {
      membership: Prisma.$MembershipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string
      gamingRoom: boolean
      occupancy: string
      quantity: number
      rate: string
      bathroomType: string
      type: string
    }, ExtArgs["result"]["hotelRoom"]>
    composites: {}
  }

  type HotelRoomGetPayload<S extends boolean | null | undefined | HotelRoomDefaultArgs> = $Result.GetResult<Prisma.$HotelRoomPayload, S>

  type HotelRoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HotelRoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HotelRoomCountAggregateInputType | true
    }

  export interface HotelRoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HotelRoom'], meta: { name: 'HotelRoom' } }
    /**
     * Find zero or one HotelRoom that matches the filter.
     * @param {HotelRoomFindUniqueArgs} args - Arguments to find a HotelRoom
     * @example
     * // Get one HotelRoom
     * const hotelRoom = await prisma.hotelRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HotelRoomFindUniqueArgs>(args: SelectSubset<T, HotelRoomFindUniqueArgs<ExtArgs>>): Prisma__HotelRoomClient<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HotelRoom that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HotelRoomFindUniqueOrThrowArgs} args - Arguments to find a HotelRoom
     * @example
     * // Get one HotelRoom
     * const hotelRoom = await prisma.hotelRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HotelRoomFindUniqueOrThrowArgs>(args: SelectSubset<T, HotelRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HotelRoomClient<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HotelRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomFindFirstArgs} args - Arguments to find a HotelRoom
     * @example
     * // Get one HotelRoom
     * const hotelRoom = await prisma.hotelRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HotelRoomFindFirstArgs>(args?: SelectSubset<T, HotelRoomFindFirstArgs<ExtArgs>>): Prisma__HotelRoomClient<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HotelRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomFindFirstOrThrowArgs} args - Arguments to find a HotelRoom
     * @example
     * // Get one HotelRoom
     * const hotelRoom = await prisma.hotelRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HotelRoomFindFirstOrThrowArgs>(args?: SelectSubset<T, HotelRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__HotelRoomClient<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HotelRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HotelRooms
     * const hotelRooms = await prisma.hotelRoom.findMany()
     * 
     * // Get first 10 HotelRooms
     * const hotelRooms = await prisma.hotelRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hotelRoomWithIdOnly = await prisma.hotelRoom.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HotelRoomFindManyArgs>(args?: SelectSubset<T, HotelRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HotelRoom.
     * @param {HotelRoomCreateArgs} args - Arguments to create a HotelRoom.
     * @example
     * // Create one HotelRoom
     * const HotelRoom = await prisma.hotelRoom.create({
     *   data: {
     *     // ... data to create a HotelRoom
     *   }
     * })
     * 
     */
    create<T extends HotelRoomCreateArgs>(args: SelectSubset<T, HotelRoomCreateArgs<ExtArgs>>): Prisma__HotelRoomClient<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HotelRooms.
     * @param {HotelRoomCreateManyArgs} args - Arguments to create many HotelRooms.
     * @example
     * // Create many HotelRooms
     * const hotelRoom = await prisma.hotelRoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HotelRoomCreateManyArgs>(args?: SelectSubset<T, HotelRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HotelRooms and returns the data saved in the database.
     * @param {HotelRoomCreateManyAndReturnArgs} args - Arguments to create many HotelRooms.
     * @example
     * // Create many HotelRooms
     * const hotelRoom = await prisma.hotelRoom.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HotelRooms and only return the `id`
     * const hotelRoomWithIdOnly = await prisma.hotelRoom.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HotelRoomCreateManyAndReturnArgs>(args?: SelectSubset<T, HotelRoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HotelRoom.
     * @param {HotelRoomDeleteArgs} args - Arguments to delete one HotelRoom.
     * @example
     * // Delete one HotelRoom
     * const HotelRoom = await prisma.hotelRoom.delete({
     *   where: {
     *     // ... filter to delete one HotelRoom
     *   }
     * })
     * 
     */
    delete<T extends HotelRoomDeleteArgs>(args: SelectSubset<T, HotelRoomDeleteArgs<ExtArgs>>): Prisma__HotelRoomClient<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HotelRoom.
     * @param {HotelRoomUpdateArgs} args - Arguments to update one HotelRoom.
     * @example
     * // Update one HotelRoom
     * const hotelRoom = await prisma.hotelRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HotelRoomUpdateArgs>(args: SelectSubset<T, HotelRoomUpdateArgs<ExtArgs>>): Prisma__HotelRoomClient<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HotelRooms.
     * @param {HotelRoomDeleteManyArgs} args - Arguments to filter HotelRooms to delete.
     * @example
     * // Delete a few HotelRooms
     * const { count } = await prisma.hotelRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HotelRoomDeleteManyArgs>(args?: SelectSubset<T, HotelRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HotelRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HotelRooms
     * const hotelRoom = await prisma.hotelRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HotelRoomUpdateManyArgs>(args: SelectSubset<T, HotelRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HotelRooms and returns the data updated in the database.
     * @param {HotelRoomUpdateManyAndReturnArgs} args - Arguments to update many HotelRooms.
     * @example
     * // Update many HotelRooms
     * const hotelRoom = await prisma.hotelRoom.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HotelRooms and only return the `id`
     * const hotelRoomWithIdOnly = await prisma.hotelRoom.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HotelRoomUpdateManyAndReturnArgs>(args: SelectSubset<T, HotelRoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HotelRoom.
     * @param {HotelRoomUpsertArgs} args - Arguments to update or create a HotelRoom.
     * @example
     * // Update or create a HotelRoom
     * const hotelRoom = await prisma.hotelRoom.upsert({
     *   create: {
     *     // ... data to create a HotelRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HotelRoom we want to update
     *   }
     * })
     */
    upsert<T extends HotelRoomUpsertArgs>(args: SelectSubset<T, HotelRoomUpsertArgs<ExtArgs>>): Prisma__HotelRoomClient<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HotelRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomCountArgs} args - Arguments to filter HotelRooms to count.
     * @example
     * // Count the number of HotelRooms
     * const count = await prisma.hotelRoom.count({
     *   where: {
     *     // ... the filter for the HotelRooms we want to count
     *   }
     * })
    **/
    count<T extends HotelRoomCountArgs>(
      args?: Subset<T, HotelRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HotelRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HotelRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HotelRoomAggregateArgs>(args: Subset<T, HotelRoomAggregateArgs>): Prisma.PrismaPromise<GetHotelRoomAggregateType<T>>

    /**
     * Group by HotelRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HotelRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HotelRoomGroupByArgs['orderBy'] }
        : { orderBy?: HotelRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HotelRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHotelRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HotelRoom model
   */
  readonly fields: HotelRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HotelRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HotelRoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    membership<T extends HotelRoom$membershipArgs<ExtArgs> = {}>(args?: Subset<T, HotelRoom$membershipArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HotelRoom model
   */
  interface HotelRoomFieldRefs {
    readonly id: FieldRef<"HotelRoom", 'Int'>
    readonly description: FieldRef<"HotelRoom", 'String'>
    readonly gamingRoom: FieldRef<"HotelRoom", 'Boolean'>
    readonly occupancy: FieldRef<"HotelRoom", 'String'>
    readonly quantity: FieldRef<"HotelRoom", 'Int'>
    readonly rate: FieldRef<"HotelRoom", 'String'>
    readonly bathroomType: FieldRef<"HotelRoom", 'String'>
    readonly type: FieldRef<"HotelRoom", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HotelRoom findUnique
   */
  export type HotelRoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HotelRoomInclude<ExtArgs> | null
    /**
     * Filter, which HotelRoom to fetch.
     */
    where: HotelRoomWhereUniqueInput
  }

  /**
   * HotelRoom findUniqueOrThrow
   */
  export type HotelRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HotelRoomInclude<ExtArgs> | null
    /**
     * Filter, which HotelRoom to fetch.
     */
    where: HotelRoomWhereUniqueInput
  }

  /**
   * HotelRoom findFirst
   */
  export type HotelRoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HotelRoomInclude<ExtArgs> | null
    /**
     * Filter, which HotelRoom to fetch.
     */
    where?: HotelRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelRooms to fetch.
     */
    orderBy?: HotelRoomOrderByWithRelationInput | HotelRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HotelRooms.
     */
    cursor?: HotelRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HotelRooms.
     */
    distinct?: HotelRoomScalarFieldEnum | HotelRoomScalarFieldEnum[]
  }

  /**
   * HotelRoom findFirstOrThrow
   */
  export type HotelRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HotelRoomInclude<ExtArgs> | null
    /**
     * Filter, which HotelRoom to fetch.
     */
    where?: HotelRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelRooms to fetch.
     */
    orderBy?: HotelRoomOrderByWithRelationInput | HotelRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HotelRooms.
     */
    cursor?: HotelRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HotelRooms.
     */
    distinct?: HotelRoomScalarFieldEnum | HotelRoomScalarFieldEnum[]
  }

  /**
   * HotelRoom findMany
   */
  export type HotelRoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HotelRoomInclude<ExtArgs> | null
    /**
     * Filter, which HotelRooms to fetch.
     */
    where?: HotelRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelRooms to fetch.
     */
    orderBy?: HotelRoomOrderByWithRelationInput | HotelRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HotelRooms.
     */
    cursor?: HotelRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelRooms.
     */
    skip?: number
    distinct?: HotelRoomScalarFieldEnum | HotelRoomScalarFieldEnum[]
  }

  /**
   * HotelRoom create
   */
  export type HotelRoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HotelRoomInclude<ExtArgs> | null
    /**
     * The data needed to create a HotelRoom.
     */
    data: XOR<HotelRoomCreateInput, HotelRoomUncheckedCreateInput>
  }

  /**
   * HotelRoom createMany
   */
  export type HotelRoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HotelRooms.
     */
    data: HotelRoomCreateManyInput | HotelRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HotelRoom createManyAndReturn
   */
  export type HotelRoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * The data used to create many HotelRooms.
     */
    data: HotelRoomCreateManyInput | HotelRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HotelRoom update
   */
  export type HotelRoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HotelRoomInclude<ExtArgs> | null
    /**
     * The data needed to update a HotelRoom.
     */
    data: XOR<HotelRoomUpdateInput, HotelRoomUncheckedUpdateInput>
    /**
     * Choose, which HotelRoom to update.
     */
    where: HotelRoomWhereUniqueInput
  }

  /**
   * HotelRoom updateMany
   */
  export type HotelRoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HotelRooms.
     */
    data: XOR<HotelRoomUpdateManyMutationInput, HotelRoomUncheckedUpdateManyInput>
    /**
     * Filter which HotelRooms to update
     */
    where?: HotelRoomWhereInput
    /**
     * Limit how many HotelRooms to update.
     */
    limit?: number
  }

  /**
   * HotelRoom updateManyAndReturn
   */
  export type HotelRoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * The data used to update HotelRooms.
     */
    data: XOR<HotelRoomUpdateManyMutationInput, HotelRoomUncheckedUpdateManyInput>
    /**
     * Filter which HotelRooms to update
     */
    where?: HotelRoomWhereInput
    /**
     * Limit how many HotelRooms to update.
     */
    limit?: number
  }

  /**
   * HotelRoom upsert
   */
  export type HotelRoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HotelRoomInclude<ExtArgs> | null
    /**
     * The filter to search for the HotelRoom to update in case it exists.
     */
    where: HotelRoomWhereUniqueInput
    /**
     * In case the HotelRoom found by the `where` argument doesn't exist, create a new HotelRoom with this data.
     */
    create: XOR<HotelRoomCreateInput, HotelRoomUncheckedCreateInput>
    /**
     * In case the HotelRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HotelRoomUpdateInput, HotelRoomUncheckedUpdateInput>
  }

  /**
   * HotelRoom delete
   */
  export type HotelRoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HotelRoomInclude<ExtArgs> | null
    /**
     * Filter which HotelRoom to delete.
     */
    where: HotelRoomWhereUniqueInput
  }

  /**
   * HotelRoom deleteMany
   */
  export type HotelRoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HotelRooms to delete
     */
    where?: HotelRoomWhereInput
    /**
     * Limit how many HotelRooms to delete.
     */
    limit?: number
  }

  /**
   * HotelRoom.membership
   */
  export type HotelRoom$membershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    where?: MembershipWhereInput
    orderBy?: MembershipOrderByWithRelationInput | MembershipOrderByWithRelationInput[]
    cursor?: MembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MembershipScalarFieldEnum | MembershipScalarFieldEnum[]
  }

  /**
   * HotelRoom without action
   */
  export type HotelRoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoom
     */
    select?: HotelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoom
     */
    omit?: HotelRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HotelRoomInclude<ExtArgs> | null
  }


  /**
   * Model HotelRoomDetails
   */

  export type AggregateHotelRoomDetails = {
    _count: HotelRoomDetailsCountAggregateOutputType | null
    _avg: HotelRoomDetailsAvgAggregateOutputType | null
    _sum: HotelRoomDetailsSumAggregateOutputType | null
    _min: HotelRoomDetailsMinAggregateOutputType | null
    _max: HotelRoomDetailsMaxAggregateOutputType | null
  }

  export type HotelRoomDetailsAvgAggregateOutputType = {
    id: number | null
    version: number | null
  }

  export type HotelRoomDetailsSumAggregateOutputType = {
    id: bigint | null
    version: bigint | null
  }

  export type HotelRoomDetailsMinAggregateOutputType = {
    id: bigint | null
    version: bigint | null
    bathroomType: string | null
    comment: string | null
    enabled: boolean | null
    gamingRoom: boolean | null
    internalRoomType: string | null
    name: string | null
    reserved: boolean | null
    reservedFor: string | null
    roomType: string | null
    formattedRoomType: string | null
  }

  export type HotelRoomDetailsMaxAggregateOutputType = {
    id: bigint | null
    version: bigint | null
    bathroomType: string | null
    comment: string | null
    enabled: boolean | null
    gamingRoom: boolean | null
    internalRoomType: string | null
    name: string | null
    reserved: boolean | null
    reservedFor: string | null
    roomType: string | null
    formattedRoomType: string | null
  }

  export type HotelRoomDetailsCountAggregateOutputType = {
    id: number
    version: number
    bathroomType: number
    comment: number
    enabled: number
    gamingRoom: number
    internalRoomType: number
    name: number
    reserved: number
    reservedFor: number
    roomType: number
    formattedRoomType: number
    _all: number
  }


  export type HotelRoomDetailsAvgAggregateInputType = {
    id?: true
    version?: true
  }

  export type HotelRoomDetailsSumAggregateInputType = {
    id?: true
    version?: true
  }

  export type HotelRoomDetailsMinAggregateInputType = {
    id?: true
    version?: true
    bathroomType?: true
    comment?: true
    enabled?: true
    gamingRoom?: true
    internalRoomType?: true
    name?: true
    reserved?: true
    reservedFor?: true
    roomType?: true
    formattedRoomType?: true
  }

  export type HotelRoomDetailsMaxAggregateInputType = {
    id?: true
    version?: true
    bathroomType?: true
    comment?: true
    enabled?: true
    gamingRoom?: true
    internalRoomType?: true
    name?: true
    reserved?: true
    reservedFor?: true
    roomType?: true
    formattedRoomType?: true
  }

  export type HotelRoomDetailsCountAggregateInputType = {
    id?: true
    version?: true
    bathroomType?: true
    comment?: true
    enabled?: true
    gamingRoom?: true
    internalRoomType?: true
    name?: true
    reserved?: true
    reservedFor?: true
    roomType?: true
    formattedRoomType?: true
    _all?: true
  }

  export type HotelRoomDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HotelRoomDetails to aggregate.
     */
    where?: HotelRoomDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelRoomDetails to fetch.
     */
    orderBy?: HotelRoomDetailsOrderByWithRelationInput | HotelRoomDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HotelRoomDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelRoomDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelRoomDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HotelRoomDetails
    **/
    _count?: true | HotelRoomDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HotelRoomDetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HotelRoomDetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HotelRoomDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HotelRoomDetailsMaxAggregateInputType
  }

  export type GetHotelRoomDetailsAggregateType<T extends HotelRoomDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateHotelRoomDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHotelRoomDetails[P]>
      : GetScalarType<T[P], AggregateHotelRoomDetails[P]>
  }




  export type HotelRoomDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HotelRoomDetailsWhereInput
    orderBy?: HotelRoomDetailsOrderByWithAggregationInput | HotelRoomDetailsOrderByWithAggregationInput[]
    by: HotelRoomDetailsScalarFieldEnum[] | HotelRoomDetailsScalarFieldEnum
    having?: HotelRoomDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HotelRoomDetailsCountAggregateInputType | true
    _avg?: HotelRoomDetailsAvgAggregateInputType
    _sum?: HotelRoomDetailsSumAggregateInputType
    _min?: HotelRoomDetailsMinAggregateInputType
    _max?: HotelRoomDetailsMaxAggregateInputType
  }

  export type HotelRoomDetailsGroupByOutputType = {
    id: bigint
    version: bigint
    bathroomType: string
    comment: string
    enabled: boolean
    gamingRoom: boolean
    internalRoomType: string
    name: string
    reserved: boolean
    reservedFor: string
    roomType: string
    formattedRoomType: string
    _count: HotelRoomDetailsCountAggregateOutputType | null
    _avg: HotelRoomDetailsAvgAggregateOutputType | null
    _sum: HotelRoomDetailsSumAggregateOutputType | null
    _min: HotelRoomDetailsMinAggregateOutputType | null
    _max: HotelRoomDetailsMaxAggregateOutputType | null
  }

  type GetHotelRoomDetailsGroupByPayload<T extends HotelRoomDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HotelRoomDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HotelRoomDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HotelRoomDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], HotelRoomDetailsGroupByOutputType[P]>
        }
      >
    >


  export type HotelRoomDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    version?: boolean
    bathroomType?: boolean
    comment?: boolean
    enabled?: boolean
    gamingRoom?: boolean
    internalRoomType?: boolean
    name?: boolean
    reserved?: boolean
    reservedFor?: boolean
    roomType?: boolean
    formattedRoomType?: boolean
  }, ExtArgs["result"]["hotelRoomDetails"]>

  export type HotelRoomDetailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    version?: boolean
    bathroomType?: boolean
    comment?: boolean
    enabled?: boolean
    gamingRoom?: boolean
    internalRoomType?: boolean
    name?: boolean
    reserved?: boolean
    reservedFor?: boolean
    roomType?: boolean
    formattedRoomType?: boolean
  }, ExtArgs["result"]["hotelRoomDetails"]>

  export type HotelRoomDetailsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    version?: boolean
    bathroomType?: boolean
    comment?: boolean
    enabled?: boolean
    gamingRoom?: boolean
    internalRoomType?: boolean
    name?: boolean
    reserved?: boolean
    reservedFor?: boolean
    roomType?: boolean
    formattedRoomType?: boolean
  }, ExtArgs["result"]["hotelRoomDetails"]>

  export type HotelRoomDetailsSelectScalar = {
    id?: boolean
    version?: boolean
    bathroomType?: boolean
    comment?: boolean
    enabled?: boolean
    gamingRoom?: boolean
    internalRoomType?: boolean
    name?: boolean
    reserved?: boolean
    reservedFor?: boolean
    roomType?: boolean
    formattedRoomType?: boolean
  }

  export type HotelRoomDetailsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "version" | "bathroomType" | "comment" | "enabled" | "gamingRoom" | "internalRoomType" | "name" | "reserved" | "reservedFor" | "roomType" | "formattedRoomType", ExtArgs["result"]["hotelRoomDetails"]>

  export type $HotelRoomDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HotelRoomDetails"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      version: bigint
      bathroomType: string
      comment: string
      enabled: boolean
      gamingRoom: boolean
      internalRoomType: string
      name: string
      reserved: boolean
      reservedFor: string
      roomType: string
      formattedRoomType: string
    }, ExtArgs["result"]["hotelRoomDetails"]>
    composites: {}
  }

  type HotelRoomDetailsGetPayload<S extends boolean | null | undefined | HotelRoomDetailsDefaultArgs> = $Result.GetResult<Prisma.$HotelRoomDetailsPayload, S>

  type HotelRoomDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HotelRoomDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HotelRoomDetailsCountAggregateInputType | true
    }

  export interface HotelRoomDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HotelRoomDetails'], meta: { name: 'HotelRoomDetails' } }
    /**
     * Find zero or one HotelRoomDetails that matches the filter.
     * @param {HotelRoomDetailsFindUniqueArgs} args - Arguments to find a HotelRoomDetails
     * @example
     * // Get one HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HotelRoomDetailsFindUniqueArgs>(args: SelectSubset<T, HotelRoomDetailsFindUniqueArgs<ExtArgs>>): Prisma__HotelRoomDetailsClient<$Result.GetResult<Prisma.$HotelRoomDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HotelRoomDetails that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HotelRoomDetailsFindUniqueOrThrowArgs} args - Arguments to find a HotelRoomDetails
     * @example
     * // Get one HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HotelRoomDetailsFindUniqueOrThrowArgs>(args: SelectSubset<T, HotelRoomDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HotelRoomDetailsClient<$Result.GetResult<Prisma.$HotelRoomDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HotelRoomDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomDetailsFindFirstArgs} args - Arguments to find a HotelRoomDetails
     * @example
     * // Get one HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HotelRoomDetailsFindFirstArgs>(args?: SelectSubset<T, HotelRoomDetailsFindFirstArgs<ExtArgs>>): Prisma__HotelRoomDetailsClient<$Result.GetResult<Prisma.$HotelRoomDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HotelRoomDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomDetailsFindFirstOrThrowArgs} args - Arguments to find a HotelRoomDetails
     * @example
     * // Get one HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HotelRoomDetailsFindFirstOrThrowArgs>(args?: SelectSubset<T, HotelRoomDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__HotelRoomDetailsClient<$Result.GetResult<Prisma.$HotelRoomDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HotelRoomDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.findMany()
     * 
     * // Get first 10 HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hotelRoomDetailsWithIdOnly = await prisma.hotelRoomDetails.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HotelRoomDetailsFindManyArgs>(args?: SelectSubset<T, HotelRoomDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HotelRoomDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HotelRoomDetails.
     * @param {HotelRoomDetailsCreateArgs} args - Arguments to create a HotelRoomDetails.
     * @example
     * // Create one HotelRoomDetails
     * const HotelRoomDetails = await prisma.hotelRoomDetails.create({
     *   data: {
     *     // ... data to create a HotelRoomDetails
     *   }
     * })
     * 
     */
    create<T extends HotelRoomDetailsCreateArgs>(args: SelectSubset<T, HotelRoomDetailsCreateArgs<ExtArgs>>): Prisma__HotelRoomDetailsClient<$Result.GetResult<Prisma.$HotelRoomDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HotelRoomDetails.
     * @param {HotelRoomDetailsCreateManyArgs} args - Arguments to create many HotelRoomDetails.
     * @example
     * // Create many HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HotelRoomDetailsCreateManyArgs>(args?: SelectSubset<T, HotelRoomDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HotelRoomDetails and returns the data saved in the database.
     * @param {HotelRoomDetailsCreateManyAndReturnArgs} args - Arguments to create many HotelRoomDetails.
     * @example
     * // Create many HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HotelRoomDetails and only return the `id`
     * const hotelRoomDetailsWithIdOnly = await prisma.hotelRoomDetails.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HotelRoomDetailsCreateManyAndReturnArgs>(args?: SelectSubset<T, HotelRoomDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HotelRoomDetailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HotelRoomDetails.
     * @param {HotelRoomDetailsDeleteArgs} args - Arguments to delete one HotelRoomDetails.
     * @example
     * // Delete one HotelRoomDetails
     * const HotelRoomDetails = await prisma.hotelRoomDetails.delete({
     *   where: {
     *     // ... filter to delete one HotelRoomDetails
     *   }
     * })
     * 
     */
    delete<T extends HotelRoomDetailsDeleteArgs>(args: SelectSubset<T, HotelRoomDetailsDeleteArgs<ExtArgs>>): Prisma__HotelRoomDetailsClient<$Result.GetResult<Prisma.$HotelRoomDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HotelRoomDetails.
     * @param {HotelRoomDetailsUpdateArgs} args - Arguments to update one HotelRoomDetails.
     * @example
     * // Update one HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HotelRoomDetailsUpdateArgs>(args: SelectSubset<T, HotelRoomDetailsUpdateArgs<ExtArgs>>): Prisma__HotelRoomDetailsClient<$Result.GetResult<Prisma.$HotelRoomDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HotelRoomDetails.
     * @param {HotelRoomDetailsDeleteManyArgs} args - Arguments to filter HotelRoomDetails to delete.
     * @example
     * // Delete a few HotelRoomDetails
     * const { count } = await prisma.hotelRoomDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HotelRoomDetailsDeleteManyArgs>(args?: SelectSubset<T, HotelRoomDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HotelRoomDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HotelRoomDetailsUpdateManyArgs>(args: SelectSubset<T, HotelRoomDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HotelRoomDetails and returns the data updated in the database.
     * @param {HotelRoomDetailsUpdateManyAndReturnArgs} args - Arguments to update many HotelRoomDetails.
     * @example
     * // Update many HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HotelRoomDetails and only return the `id`
     * const hotelRoomDetailsWithIdOnly = await prisma.hotelRoomDetails.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HotelRoomDetailsUpdateManyAndReturnArgs>(args: SelectSubset<T, HotelRoomDetailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HotelRoomDetailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HotelRoomDetails.
     * @param {HotelRoomDetailsUpsertArgs} args - Arguments to update or create a HotelRoomDetails.
     * @example
     * // Update or create a HotelRoomDetails
     * const hotelRoomDetails = await prisma.hotelRoomDetails.upsert({
     *   create: {
     *     // ... data to create a HotelRoomDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HotelRoomDetails we want to update
     *   }
     * })
     */
    upsert<T extends HotelRoomDetailsUpsertArgs>(args: SelectSubset<T, HotelRoomDetailsUpsertArgs<ExtArgs>>): Prisma__HotelRoomDetailsClient<$Result.GetResult<Prisma.$HotelRoomDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HotelRoomDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomDetailsCountArgs} args - Arguments to filter HotelRoomDetails to count.
     * @example
     * // Count the number of HotelRoomDetails
     * const count = await prisma.hotelRoomDetails.count({
     *   where: {
     *     // ... the filter for the HotelRoomDetails we want to count
     *   }
     * })
    **/
    count<T extends HotelRoomDetailsCountArgs>(
      args?: Subset<T, HotelRoomDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HotelRoomDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HotelRoomDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HotelRoomDetailsAggregateArgs>(args: Subset<T, HotelRoomDetailsAggregateArgs>): Prisma.PrismaPromise<GetHotelRoomDetailsAggregateType<T>>

    /**
     * Group by HotelRoomDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelRoomDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HotelRoomDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HotelRoomDetailsGroupByArgs['orderBy'] }
        : { orderBy?: HotelRoomDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HotelRoomDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHotelRoomDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HotelRoomDetails model
   */
  readonly fields: HotelRoomDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HotelRoomDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HotelRoomDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HotelRoomDetails model
   */
  interface HotelRoomDetailsFieldRefs {
    readonly id: FieldRef<"HotelRoomDetails", 'BigInt'>
    readonly version: FieldRef<"HotelRoomDetails", 'BigInt'>
    readonly bathroomType: FieldRef<"HotelRoomDetails", 'String'>
    readonly comment: FieldRef<"HotelRoomDetails", 'String'>
    readonly enabled: FieldRef<"HotelRoomDetails", 'Boolean'>
    readonly gamingRoom: FieldRef<"HotelRoomDetails", 'Boolean'>
    readonly internalRoomType: FieldRef<"HotelRoomDetails", 'String'>
    readonly name: FieldRef<"HotelRoomDetails", 'String'>
    readonly reserved: FieldRef<"HotelRoomDetails", 'Boolean'>
    readonly reservedFor: FieldRef<"HotelRoomDetails", 'String'>
    readonly roomType: FieldRef<"HotelRoomDetails", 'String'>
    readonly formattedRoomType: FieldRef<"HotelRoomDetails", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HotelRoomDetails findUnique
   */
  export type HotelRoomDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
    /**
     * Filter, which HotelRoomDetails to fetch.
     */
    where: HotelRoomDetailsWhereUniqueInput
  }

  /**
   * HotelRoomDetails findUniqueOrThrow
   */
  export type HotelRoomDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
    /**
     * Filter, which HotelRoomDetails to fetch.
     */
    where: HotelRoomDetailsWhereUniqueInput
  }

  /**
   * HotelRoomDetails findFirst
   */
  export type HotelRoomDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
    /**
     * Filter, which HotelRoomDetails to fetch.
     */
    where?: HotelRoomDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelRoomDetails to fetch.
     */
    orderBy?: HotelRoomDetailsOrderByWithRelationInput | HotelRoomDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HotelRoomDetails.
     */
    cursor?: HotelRoomDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelRoomDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelRoomDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HotelRoomDetails.
     */
    distinct?: HotelRoomDetailsScalarFieldEnum | HotelRoomDetailsScalarFieldEnum[]
  }

  /**
   * HotelRoomDetails findFirstOrThrow
   */
  export type HotelRoomDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
    /**
     * Filter, which HotelRoomDetails to fetch.
     */
    where?: HotelRoomDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelRoomDetails to fetch.
     */
    orderBy?: HotelRoomDetailsOrderByWithRelationInput | HotelRoomDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HotelRoomDetails.
     */
    cursor?: HotelRoomDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelRoomDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelRoomDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HotelRoomDetails.
     */
    distinct?: HotelRoomDetailsScalarFieldEnum | HotelRoomDetailsScalarFieldEnum[]
  }

  /**
   * HotelRoomDetails findMany
   */
  export type HotelRoomDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
    /**
     * Filter, which HotelRoomDetails to fetch.
     */
    where?: HotelRoomDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelRoomDetails to fetch.
     */
    orderBy?: HotelRoomDetailsOrderByWithRelationInput | HotelRoomDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HotelRoomDetails.
     */
    cursor?: HotelRoomDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelRoomDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelRoomDetails.
     */
    skip?: number
    distinct?: HotelRoomDetailsScalarFieldEnum | HotelRoomDetailsScalarFieldEnum[]
  }

  /**
   * HotelRoomDetails create
   */
  export type HotelRoomDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
    /**
     * The data needed to create a HotelRoomDetails.
     */
    data: XOR<HotelRoomDetailsCreateInput, HotelRoomDetailsUncheckedCreateInput>
  }

  /**
   * HotelRoomDetails createMany
   */
  export type HotelRoomDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HotelRoomDetails.
     */
    data: HotelRoomDetailsCreateManyInput | HotelRoomDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HotelRoomDetails createManyAndReturn
   */
  export type HotelRoomDetailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
    /**
     * The data used to create many HotelRoomDetails.
     */
    data: HotelRoomDetailsCreateManyInput | HotelRoomDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HotelRoomDetails update
   */
  export type HotelRoomDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
    /**
     * The data needed to update a HotelRoomDetails.
     */
    data: XOR<HotelRoomDetailsUpdateInput, HotelRoomDetailsUncheckedUpdateInput>
    /**
     * Choose, which HotelRoomDetails to update.
     */
    where: HotelRoomDetailsWhereUniqueInput
  }

  /**
   * HotelRoomDetails updateMany
   */
  export type HotelRoomDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HotelRoomDetails.
     */
    data: XOR<HotelRoomDetailsUpdateManyMutationInput, HotelRoomDetailsUncheckedUpdateManyInput>
    /**
     * Filter which HotelRoomDetails to update
     */
    where?: HotelRoomDetailsWhereInput
    /**
     * Limit how many HotelRoomDetails to update.
     */
    limit?: number
  }

  /**
   * HotelRoomDetails updateManyAndReturn
   */
  export type HotelRoomDetailsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
    /**
     * The data used to update HotelRoomDetails.
     */
    data: XOR<HotelRoomDetailsUpdateManyMutationInput, HotelRoomDetailsUncheckedUpdateManyInput>
    /**
     * Filter which HotelRoomDetails to update
     */
    where?: HotelRoomDetailsWhereInput
    /**
     * Limit how many HotelRoomDetails to update.
     */
    limit?: number
  }

  /**
   * HotelRoomDetails upsert
   */
  export type HotelRoomDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
    /**
     * The filter to search for the HotelRoomDetails to update in case it exists.
     */
    where: HotelRoomDetailsWhereUniqueInput
    /**
     * In case the HotelRoomDetails found by the `where` argument doesn't exist, create a new HotelRoomDetails with this data.
     */
    create: XOR<HotelRoomDetailsCreateInput, HotelRoomDetailsUncheckedCreateInput>
    /**
     * In case the HotelRoomDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HotelRoomDetailsUpdateInput, HotelRoomDetailsUncheckedUpdateInput>
  }

  /**
   * HotelRoomDetails delete
   */
  export type HotelRoomDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
    /**
     * Filter which HotelRoomDetails to delete.
     */
    where: HotelRoomDetailsWhereUniqueInput
  }

  /**
   * HotelRoomDetails deleteMany
   */
  export type HotelRoomDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HotelRoomDetails to delete
     */
    where?: HotelRoomDetailsWhereInput
    /**
     * Limit how many HotelRoomDetails to delete.
     */
    limit?: number
  }

  /**
   * HotelRoomDetails without action
   */
  export type HotelRoomDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelRoomDetails
     */
    select?: HotelRoomDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelRoomDetails
     */
    omit?: HotelRoomDetailsOmit<ExtArgs> | null
  }


  /**
   * Model KnexMigrations
   */

  export type AggregateKnexMigrations = {
    _count: KnexMigrationsCountAggregateOutputType | null
    _avg: KnexMigrationsAvgAggregateOutputType | null
    _sum: KnexMigrationsSumAggregateOutputType | null
    _min: KnexMigrationsMinAggregateOutputType | null
    _max: KnexMigrationsMaxAggregateOutputType | null
  }

  export type KnexMigrationsAvgAggregateOutputType = {
    id: number | null
    batch: number | null
  }

  export type KnexMigrationsSumAggregateOutputType = {
    id: number | null
    batch: number | null
  }

  export type KnexMigrationsMinAggregateOutputType = {
    id: number | null
    name: string | null
    batch: number | null
    migrationTime: Date | null
  }

  export type KnexMigrationsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    batch: number | null
    migrationTime: Date | null
  }

  export type KnexMigrationsCountAggregateOutputType = {
    id: number
    name: number
    batch: number
    migrationTime: number
    _all: number
  }


  export type KnexMigrationsAvgAggregateInputType = {
    id?: true
    batch?: true
  }

  export type KnexMigrationsSumAggregateInputType = {
    id?: true
    batch?: true
  }

  export type KnexMigrationsMinAggregateInputType = {
    id?: true
    name?: true
    batch?: true
    migrationTime?: true
  }

  export type KnexMigrationsMaxAggregateInputType = {
    id?: true
    name?: true
    batch?: true
    migrationTime?: true
  }

  export type KnexMigrationsCountAggregateInputType = {
    id?: true
    name?: true
    batch?: true
    migrationTime?: true
    _all?: true
  }

  export type KnexMigrationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KnexMigrations to aggregate.
     */
    where?: KnexMigrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnexMigrations to fetch.
     */
    orderBy?: KnexMigrationsOrderByWithRelationInput | KnexMigrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KnexMigrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnexMigrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnexMigrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KnexMigrations
    **/
    _count?: true | KnexMigrationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KnexMigrationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KnexMigrationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KnexMigrationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KnexMigrationsMaxAggregateInputType
  }

  export type GetKnexMigrationsAggregateType<T extends KnexMigrationsAggregateArgs> = {
        [P in keyof T & keyof AggregateKnexMigrations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKnexMigrations[P]>
      : GetScalarType<T[P], AggregateKnexMigrations[P]>
  }




  export type KnexMigrationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KnexMigrationsWhereInput
    orderBy?: KnexMigrationsOrderByWithAggregationInput | KnexMigrationsOrderByWithAggregationInput[]
    by: KnexMigrationsScalarFieldEnum[] | KnexMigrationsScalarFieldEnum
    having?: KnexMigrationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KnexMigrationsCountAggregateInputType | true
    _avg?: KnexMigrationsAvgAggregateInputType
    _sum?: KnexMigrationsSumAggregateInputType
    _min?: KnexMigrationsMinAggregateInputType
    _max?: KnexMigrationsMaxAggregateInputType
  }

  export type KnexMigrationsGroupByOutputType = {
    id: number
    name: string | null
    batch: number | null
    migrationTime: Date | null
    _count: KnexMigrationsCountAggregateOutputType | null
    _avg: KnexMigrationsAvgAggregateOutputType | null
    _sum: KnexMigrationsSumAggregateOutputType | null
    _min: KnexMigrationsMinAggregateOutputType | null
    _max: KnexMigrationsMaxAggregateOutputType | null
  }

  type GetKnexMigrationsGroupByPayload<T extends KnexMigrationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KnexMigrationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KnexMigrationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KnexMigrationsGroupByOutputType[P]>
            : GetScalarType<T[P], KnexMigrationsGroupByOutputType[P]>
        }
      >
    >


  export type KnexMigrationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    batch?: boolean
    migrationTime?: boolean
  }, ExtArgs["result"]["knexMigrations"]>

  export type KnexMigrationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    batch?: boolean
    migrationTime?: boolean
  }, ExtArgs["result"]["knexMigrations"]>

  export type KnexMigrationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    batch?: boolean
    migrationTime?: boolean
  }, ExtArgs["result"]["knexMigrations"]>

  export type KnexMigrationsSelectScalar = {
    id?: boolean
    name?: boolean
    batch?: boolean
    migrationTime?: boolean
  }

  export type KnexMigrationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "batch" | "migrationTime", ExtArgs["result"]["knexMigrations"]>

  export type $KnexMigrationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KnexMigrations"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      batch: number | null
      migrationTime: Date | null
    }, ExtArgs["result"]["knexMigrations"]>
    composites: {}
  }

  type KnexMigrationsGetPayload<S extends boolean | null | undefined | KnexMigrationsDefaultArgs> = $Result.GetResult<Prisma.$KnexMigrationsPayload, S>

  type KnexMigrationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KnexMigrationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KnexMigrationsCountAggregateInputType | true
    }

  export interface KnexMigrationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KnexMigrations'], meta: { name: 'KnexMigrations' } }
    /**
     * Find zero or one KnexMigrations that matches the filter.
     * @param {KnexMigrationsFindUniqueArgs} args - Arguments to find a KnexMigrations
     * @example
     * // Get one KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KnexMigrationsFindUniqueArgs>(args: SelectSubset<T, KnexMigrationsFindUniqueArgs<ExtArgs>>): Prisma__KnexMigrationsClient<$Result.GetResult<Prisma.$KnexMigrationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KnexMigrations that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KnexMigrationsFindUniqueOrThrowArgs} args - Arguments to find a KnexMigrations
     * @example
     * // Get one KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KnexMigrationsFindUniqueOrThrowArgs>(args: SelectSubset<T, KnexMigrationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KnexMigrationsClient<$Result.GetResult<Prisma.$KnexMigrationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KnexMigrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsFindFirstArgs} args - Arguments to find a KnexMigrations
     * @example
     * // Get one KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KnexMigrationsFindFirstArgs>(args?: SelectSubset<T, KnexMigrationsFindFirstArgs<ExtArgs>>): Prisma__KnexMigrationsClient<$Result.GetResult<Prisma.$KnexMigrationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KnexMigrations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsFindFirstOrThrowArgs} args - Arguments to find a KnexMigrations
     * @example
     * // Get one KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KnexMigrationsFindFirstOrThrowArgs>(args?: SelectSubset<T, KnexMigrationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__KnexMigrationsClient<$Result.GetResult<Prisma.$KnexMigrationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KnexMigrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.findMany()
     * 
     * // Get first 10 KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const knexMigrationsWithIdOnly = await prisma.knexMigrations.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KnexMigrationsFindManyArgs>(args?: SelectSubset<T, KnexMigrationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnexMigrationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KnexMigrations.
     * @param {KnexMigrationsCreateArgs} args - Arguments to create a KnexMigrations.
     * @example
     * // Create one KnexMigrations
     * const KnexMigrations = await prisma.knexMigrations.create({
     *   data: {
     *     // ... data to create a KnexMigrations
     *   }
     * })
     * 
     */
    create<T extends KnexMigrationsCreateArgs>(args: SelectSubset<T, KnexMigrationsCreateArgs<ExtArgs>>): Prisma__KnexMigrationsClient<$Result.GetResult<Prisma.$KnexMigrationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KnexMigrations.
     * @param {KnexMigrationsCreateManyArgs} args - Arguments to create many KnexMigrations.
     * @example
     * // Create many KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KnexMigrationsCreateManyArgs>(args?: SelectSubset<T, KnexMigrationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KnexMigrations and returns the data saved in the database.
     * @param {KnexMigrationsCreateManyAndReturnArgs} args - Arguments to create many KnexMigrations.
     * @example
     * // Create many KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KnexMigrations and only return the `id`
     * const knexMigrationsWithIdOnly = await prisma.knexMigrations.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KnexMigrationsCreateManyAndReturnArgs>(args?: SelectSubset<T, KnexMigrationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnexMigrationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KnexMigrations.
     * @param {KnexMigrationsDeleteArgs} args - Arguments to delete one KnexMigrations.
     * @example
     * // Delete one KnexMigrations
     * const KnexMigrations = await prisma.knexMigrations.delete({
     *   where: {
     *     // ... filter to delete one KnexMigrations
     *   }
     * })
     * 
     */
    delete<T extends KnexMigrationsDeleteArgs>(args: SelectSubset<T, KnexMigrationsDeleteArgs<ExtArgs>>): Prisma__KnexMigrationsClient<$Result.GetResult<Prisma.$KnexMigrationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KnexMigrations.
     * @param {KnexMigrationsUpdateArgs} args - Arguments to update one KnexMigrations.
     * @example
     * // Update one KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KnexMigrationsUpdateArgs>(args: SelectSubset<T, KnexMigrationsUpdateArgs<ExtArgs>>): Prisma__KnexMigrationsClient<$Result.GetResult<Prisma.$KnexMigrationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KnexMigrations.
     * @param {KnexMigrationsDeleteManyArgs} args - Arguments to filter KnexMigrations to delete.
     * @example
     * // Delete a few KnexMigrations
     * const { count } = await prisma.knexMigrations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KnexMigrationsDeleteManyArgs>(args?: SelectSubset<T, KnexMigrationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnexMigrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KnexMigrationsUpdateManyArgs>(args: SelectSubset<T, KnexMigrationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnexMigrations and returns the data updated in the database.
     * @param {KnexMigrationsUpdateManyAndReturnArgs} args - Arguments to update many KnexMigrations.
     * @example
     * // Update many KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KnexMigrations and only return the `id`
     * const knexMigrationsWithIdOnly = await prisma.knexMigrations.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KnexMigrationsUpdateManyAndReturnArgs>(args: SelectSubset<T, KnexMigrationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnexMigrationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KnexMigrations.
     * @param {KnexMigrationsUpsertArgs} args - Arguments to update or create a KnexMigrations.
     * @example
     * // Update or create a KnexMigrations
     * const knexMigrations = await prisma.knexMigrations.upsert({
     *   create: {
     *     // ... data to create a KnexMigrations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KnexMigrations we want to update
     *   }
     * })
     */
    upsert<T extends KnexMigrationsUpsertArgs>(args: SelectSubset<T, KnexMigrationsUpsertArgs<ExtArgs>>): Prisma__KnexMigrationsClient<$Result.GetResult<Prisma.$KnexMigrationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KnexMigrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsCountArgs} args - Arguments to filter KnexMigrations to count.
     * @example
     * // Count the number of KnexMigrations
     * const count = await prisma.knexMigrations.count({
     *   where: {
     *     // ... the filter for the KnexMigrations we want to count
     *   }
     * })
    **/
    count<T extends KnexMigrationsCountArgs>(
      args?: Subset<T, KnexMigrationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KnexMigrationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KnexMigrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KnexMigrationsAggregateArgs>(args: Subset<T, KnexMigrationsAggregateArgs>): Prisma.PrismaPromise<GetKnexMigrationsAggregateType<T>>

    /**
     * Group by KnexMigrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KnexMigrationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KnexMigrationsGroupByArgs['orderBy'] }
        : { orderBy?: KnexMigrationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KnexMigrationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKnexMigrationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KnexMigrations model
   */
  readonly fields: KnexMigrationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KnexMigrations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KnexMigrationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KnexMigrations model
   */
  interface KnexMigrationsFieldRefs {
    readonly id: FieldRef<"KnexMigrations", 'Int'>
    readonly name: FieldRef<"KnexMigrations", 'String'>
    readonly batch: FieldRef<"KnexMigrations", 'Int'>
    readonly migrationTime: FieldRef<"KnexMigrations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KnexMigrations findUnique
   */
  export type KnexMigrationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
    /**
     * Filter, which KnexMigrations to fetch.
     */
    where: KnexMigrationsWhereUniqueInput
  }

  /**
   * KnexMigrations findUniqueOrThrow
   */
  export type KnexMigrationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
    /**
     * Filter, which KnexMigrations to fetch.
     */
    where: KnexMigrationsWhereUniqueInput
  }

  /**
   * KnexMigrations findFirst
   */
  export type KnexMigrationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
    /**
     * Filter, which KnexMigrations to fetch.
     */
    where?: KnexMigrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnexMigrations to fetch.
     */
    orderBy?: KnexMigrationsOrderByWithRelationInput | KnexMigrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnexMigrations.
     */
    cursor?: KnexMigrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnexMigrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnexMigrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnexMigrations.
     */
    distinct?: KnexMigrationsScalarFieldEnum | KnexMigrationsScalarFieldEnum[]
  }

  /**
   * KnexMigrations findFirstOrThrow
   */
  export type KnexMigrationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
    /**
     * Filter, which KnexMigrations to fetch.
     */
    where?: KnexMigrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnexMigrations to fetch.
     */
    orderBy?: KnexMigrationsOrderByWithRelationInput | KnexMigrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnexMigrations.
     */
    cursor?: KnexMigrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnexMigrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnexMigrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnexMigrations.
     */
    distinct?: KnexMigrationsScalarFieldEnum | KnexMigrationsScalarFieldEnum[]
  }

  /**
   * KnexMigrations findMany
   */
  export type KnexMigrationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
    /**
     * Filter, which KnexMigrations to fetch.
     */
    where?: KnexMigrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnexMigrations to fetch.
     */
    orderBy?: KnexMigrationsOrderByWithRelationInput | KnexMigrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KnexMigrations.
     */
    cursor?: KnexMigrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnexMigrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnexMigrations.
     */
    skip?: number
    distinct?: KnexMigrationsScalarFieldEnum | KnexMigrationsScalarFieldEnum[]
  }

  /**
   * KnexMigrations create
   */
  export type KnexMigrationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
    /**
     * The data needed to create a KnexMigrations.
     */
    data?: XOR<KnexMigrationsCreateInput, KnexMigrationsUncheckedCreateInput>
  }

  /**
   * KnexMigrations createMany
   */
  export type KnexMigrationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KnexMigrations.
     */
    data: KnexMigrationsCreateManyInput | KnexMigrationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KnexMigrations createManyAndReturn
   */
  export type KnexMigrationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
    /**
     * The data used to create many KnexMigrations.
     */
    data: KnexMigrationsCreateManyInput | KnexMigrationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KnexMigrations update
   */
  export type KnexMigrationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
    /**
     * The data needed to update a KnexMigrations.
     */
    data: XOR<KnexMigrationsUpdateInput, KnexMigrationsUncheckedUpdateInput>
    /**
     * Choose, which KnexMigrations to update.
     */
    where: KnexMigrationsWhereUniqueInput
  }

  /**
   * KnexMigrations updateMany
   */
  export type KnexMigrationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KnexMigrations.
     */
    data: XOR<KnexMigrationsUpdateManyMutationInput, KnexMigrationsUncheckedUpdateManyInput>
    /**
     * Filter which KnexMigrations to update
     */
    where?: KnexMigrationsWhereInput
    /**
     * Limit how many KnexMigrations to update.
     */
    limit?: number
  }

  /**
   * KnexMigrations updateManyAndReturn
   */
  export type KnexMigrationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
    /**
     * The data used to update KnexMigrations.
     */
    data: XOR<KnexMigrationsUpdateManyMutationInput, KnexMigrationsUncheckedUpdateManyInput>
    /**
     * Filter which KnexMigrations to update
     */
    where?: KnexMigrationsWhereInput
    /**
     * Limit how many KnexMigrations to update.
     */
    limit?: number
  }

  /**
   * KnexMigrations upsert
   */
  export type KnexMigrationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
    /**
     * The filter to search for the KnexMigrations to update in case it exists.
     */
    where: KnexMigrationsWhereUniqueInput
    /**
     * In case the KnexMigrations found by the `where` argument doesn't exist, create a new KnexMigrations with this data.
     */
    create: XOR<KnexMigrationsCreateInput, KnexMigrationsUncheckedCreateInput>
    /**
     * In case the KnexMigrations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KnexMigrationsUpdateInput, KnexMigrationsUncheckedUpdateInput>
  }

  /**
   * KnexMigrations delete
   */
  export type KnexMigrationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
    /**
     * Filter which KnexMigrations to delete.
     */
    where: KnexMigrationsWhereUniqueInput
  }

  /**
   * KnexMigrations deleteMany
   */
  export type KnexMigrationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KnexMigrations to delete
     */
    where?: KnexMigrationsWhereInput
    /**
     * Limit how many KnexMigrations to delete.
     */
    limit?: number
  }

  /**
   * KnexMigrations without action
   */
  export type KnexMigrationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrations
     */
    select?: KnexMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrations
     */
    omit?: KnexMigrationsOmit<ExtArgs> | null
  }


  /**
   * Model KnexMigrationsLock
   */

  export type AggregateKnexMigrationsLock = {
    _count: KnexMigrationsLockCountAggregateOutputType | null
    _avg: KnexMigrationsLockAvgAggregateOutputType | null
    _sum: KnexMigrationsLockSumAggregateOutputType | null
    _min: KnexMigrationsLockMinAggregateOutputType | null
    _max: KnexMigrationsLockMaxAggregateOutputType | null
  }

  export type KnexMigrationsLockAvgAggregateOutputType = {
    index: number | null
    isLocked: number | null
  }

  export type KnexMigrationsLockSumAggregateOutputType = {
    index: number | null
    isLocked: number | null
  }

  export type KnexMigrationsLockMinAggregateOutputType = {
    index: number | null
    isLocked: number | null
  }

  export type KnexMigrationsLockMaxAggregateOutputType = {
    index: number | null
    isLocked: number | null
  }

  export type KnexMigrationsLockCountAggregateOutputType = {
    index: number
    isLocked: number
    _all: number
  }


  export type KnexMigrationsLockAvgAggregateInputType = {
    index?: true
    isLocked?: true
  }

  export type KnexMigrationsLockSumAggregateInputType = {
    index?: true
    isLocked?: true
  }

  export type KnexMigrationsLockMinAggregateInputType = {
    index?: true
    isLocked?: true
  }

  export type KnexMigrationsLockMaxAggregateInputType = {
    index?: true
    isLocked?: true
  }

  export type KnexMigrationsLockCountAggregateInputType = {
    index?: true
    isLocked?: true
    _all?: true
  }

  export type KnexMigrationsLockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KnexMigrationsLock to aggregate.
     */
    where?: KnexMigrationsLockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnexMigrationsLocks to fetch.
     */
    orderBy?: KnexMigrationsLockOrderByWithRelationInput | KnexMigrationsLockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KnexMigrationsLockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnexMigrationsLocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnexMigrationsLocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KnexMigrationsLocks
    **/
    _count?: true | KnexMigrationsLockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KnexMigrationsLockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KnexMigrationsLockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KnexMigrationsLockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KnexMigrationsLockMaxAggregateInputType
  }

  export type GetKnexMigrationsLockAggregateType<T extends KnexMigrationsLockAggregateArgs> = {
        [P in keyof T & keyof AggregateKnexMigrationsLock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKnexMigrationsLock[P]>
      : GetScalarType<T[P], AggregateKnexMigrationsLock[P]>
  }




  export type KnexMigrationsLockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KnexMigrationsLockWhereInput
    orderBy?: KnexMigrationsLockOrderByWithAggregationInput | KnexMigrationsLockOrderByWithAggregationInput[]
    by: KnexMigrationsLockScalarFieldEnum[] | KnexMigrationsLockScalarFieldEnum
    having?: KnexMigrationsLockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KnexMigrationsLockCountAggregateInputType | true
    _avg?: KnexMigrationsLockAvgAggregateInputType
    _sum?: KnexMigrationsLockSumAggregateInputType
    _min?: KnexMigrationsLockMinAggregateInputType
    _max?: KnexMigrationsLockMaxAggregateInputType
  }

  export type KnexMigrationsLockGroupByOutputType = {
    index: number
    isLocked: number | null
    _count: KnexMigrationsLockCountAggregateOutputType | null
    _avg: KnexMigrationsLockAvgAggregateOutputType | null
    _sum: KnexMigrationsLockSumAggregateOutputType | null
    _min: KnexMigrationsLockMinAggregateOutputType | null
    _max: KnexMigrationsLockMaxAggregateOutputType | null
  }

  type GetKnexMigrationsLockGroupByPayload<T extends KnexMigrationsLockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KnexMigrationsLockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KnexMigrationsLockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KnexMigrationsLockGroupByOutputType[P]>
            : GetScalarType<T[P], KnexMigrationsLockGroupByOutputType[P]>
        }
      >
    >


  export type KnexMigrationsLockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    isLocked?: boolean
  }, ExtArgs["result"]["knexMigrationsLock"]>

  export type KnexMigrationsLockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    isLocked?: boolean
  }, ExtArgs["result"]["knexMigrationsLock"]>

  export type KnexMigrationsLockSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    isLocked?: boolean
  }, ExtArgs["result"]["knexMigrationsLock"]>

  export type KnexMigrationsLockSelectScalar = {
    index?: boolean
    isLocked?: boolean
  }

  export type KnexMigrationsLockOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "isLocked", ExtArgs["result"]["knexMigrationsLock"]>

  export type $KnexMigrationsLockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KnexMigrationsLock"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: number
      isLocked: number | null
    }, ExtArgs["result"]["knexMigrationsLock"]>
    composites: {}
  }

  type KnexMigrationsLockGetPayload<S extends boolean | null | undefined | KnexMigrationsLockDefaultArgs> = $Result.GetResult<Prisma.$KnexMigrationsLockPayload, S>

  type KnexMigrationsLockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KnexMigrationsLockFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KnexMigrationsLockCountAggregateInputType | true
    }

  export interface KnexMigrationsLockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KnexMigrationsLock'], meta: { name: 'KnexMigrationsLock' } }
    /**
     * Find zero or one KnexMigrationsLock that matches the filter.
     * @param {KnexMigrationsLockFindUniqueArgs} args - Arguments to find a KnexMigrationsLock
     * @example
     * // Get one KnexMigrationsLock
     * const knexMigrationsLock = await prisma.knexMigrationsLock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KnexMigrationsLockFindUniqueArgs>(args: SelectSubset<T, KnexMigrationsLockFindUniqueArgs<ExtArgs>>): Prisma__KnexMigrationsLockClient<$Result.GetResult<Prisma.$KnexMigrationsLockPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KnexMigrationsLock that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KnexMigrationsLockFindUniqueOrThrowArgs} args - Arguments to find a KnexMigrationsLock
     * @example
     * // Get one KnexMigrationsLock
     * const knexMigrationsLock = await prisma.knexMigrationsLock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KnexMigrationsLockFindUniqueOrThrowArgs>(args: SelectSubset<T, KnexMigrationsLockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KnexMigrationsLockClient<$Result.GetResult<Prisma.$KnexMigrationsLockPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KnexMigrationsLock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsLockFindFirstArgs} args - Arguments to find a KnexMigrationsLock
     * @example
     * // Get one KnexMigrationsLock
     * const knexMigrationsLock = await prisma.knexMigrationsLock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KnexMigrationsLockFindFirstArgs>(args?: SelectSubset<T, KnexMigrationsLockFindFirstArgs<ExtArgs>>): Prisma__KnexMigrationsLockClient<$Result.GetResult<Prisma.$KnexMigrationsLockPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KnexMigrationsLock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsLockFindFirstOrThrowArgs} args - Arguments to find a KnexMigrationsLock
     * @example
     * // Get one KnexMigrationsLock
     * const knexMigrationsLock = await prisma.knexMigrationsLock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KnexMigrationsLockFindFirstOrThrowArgs>(args?: SelectSubset<T, KnexMigrationsLockFindFirstOrThrowArgs<ExtArgs>>): Prisma__KnexMigrationsLockClient<$Result.GetResult<Prisma.$KnexMigrationsLockPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KnexMigrationsLocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsLockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KnexMigrationsLocks
     * const knexMigrationsLocks = await prisma.knexMigrationsLock.findMany()
     * 
     * // Get first 10 KnexMigrationsLocks
     * const knexMigrationsLocks = await prisma.knexMigrationsLock.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const knexMigrationsLockWithIndexOnly = await prisma.knexMigrationsLock.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends KnexMigrationsLockFindManyArgs>(args?: SelectSubset<T, KnexMigrationsLockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnexMigrationsLockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KnexMigrationsLock.
     * @param {KnexMigrationsLockCreateArgs} args - Arguments to create a KnexMigrationsLock.
     * @example
     * // Create one KnexMigrationsLock
     * const KnexMigrationsLock = await prisma.knexMigrationsLock.create({
     *   data: {
     *     // ... data to create a KnexMigrationsLock
     *   }
     * })
     * 
     */
    create<T extends KnexMigrationsLockCreateArgs>(args: SelectSubset<T, KnexMigrationsLockCreateArgs<ExtArgs>>): Prisma__KnexMigrationsLockClient<$Result.GetResult<Prisma.$KnexMigrationsLockPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KnexMigrationsLocks.
     * @param {KnexMigrationsLockCreateManyArgs} args - Arguments to create many KnexMigrationsLocks.
     * @example
     * // Create many KnexMigrationsLocks
     * const knexMigrationsLock = await prisma.knexMigrationsLock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KnexMigrationsLockCreateManyArgs>(args?: SelectSubset<T, KnexMigrationsLockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KnexMigrationsLocks and returns the data saved in the database.
     * @param {KnexMigrationsLockCreateManyAndReturnArgs} args - Arguments to create many KnexMigrationsLocks.
     * @example
     * // Create many KnexMigrationsLocks
     * const knexMigrationsLock = await prisma.knexMigrationsLock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KnexMigrationsLocks and only return the `index`
     * const knexMigrationsLockWithIndexOnly = await prisma.knexMigrationsLock.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KnexMigrationsLockCreateManyAndReturnArgs>(args?: SelectSubset<T, KnexMigrationsLockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnexMigrationsLockPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KnexMigrationsLock.
     * @param {KnexMigrationsLockDeleteArgs} args - Arguments to delete one KnexMigrationsLock.
     * @example
     * // Delete one KnexMigrationsLock
     * const KnexMigrationsLock = await prisma.knexMigrationsLock.delete({
     *   where: {
     *     // ... filter to delete one KnexMigrationsLock
     *   }
     * })
     * 
     */
    delete<T extends KnexMigrationsLockDeleteArgs>(args: SelectSubset<T, KnexMigrationsLockDeleteArgs<ExtArgs>>): Prisma__KnexMigrationsLockClient<$Result.GetResult<Prisma.$KnexMigrationsLockPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KnexMigrationsLock.
     * @param {KnexMigrationsLockUpdateArgs} args - Arguments to update one KnexMigrationsLock.
     * @example
     * // Update one KnexMigrationsLock
     * const knexMigrationsLock = await prisma.knexMigrationsLock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KnexMigrationsLockUpdateArgs>(args: SelectSubset<T, KnexMigrationsLockUpdateArgs<ExtArgs>>): Prisma__KnexMigrationsLockClient<$Result.GetResult<Prisma.$KnexMigrationsLockPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KnexMigrationsLocks.
     * @param {KnexMigrationsLockDeleteManyArgs} args - Arguments to filter KnexMigrationsLocks to delete.
     * @example
     * // Delete a few KnexMigrationsLocks
     * const { count } = await prisma.knexMigrationsLock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KnexMigrationsLockDeleteManyArgs>(args?: SelectSubset<T, KnexMigrationsLockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnexMigrationsLocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsLockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KnexMigrationsLocks
     * const knexMigrationsLock = await prisma.knexMigrationsLock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KnexMigrationsLockUpdateManyArgs>(args: SelectSubset<T, KnexMigrationsLockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnexMigrationsLocks and returns the data updated in the database.
     * @param {KnexMigrationsLockUpdateManyAndReturnArgs} args - Arguments to update many KnexMigrationsLocks.
     * @example
     * // Update many KnexMigrationsLocks
     * const knexMigrationsLock = await prisma.knexMigrationsLock.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KnexMigrationsLocks and only return the `index`
     * const knexMigrationsLockWithIndexOnly = await prisma.knexMigrationsLock.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KnexMigrationsLockUpdateManyAndReturnArgs>(args: SelectSubset<T, KnexMigrationsLockUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnexMigrationsLockPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KnexMigrationsLock.
     * @param {KnexMigrationsLockUpsertArgs} args - Arguments to update or create a KnexMigrationsLock.
     * @example
     * // Update or create a KnexMigrationsLock
     * const knexMigrationsLock = await prisma.knexMigrationsLock.upsert({
     *   create: {
     *     // ... data to create a KnexMigrationsLock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KnexMigrationsLock we want to update
     *   }
     * })
     */
    upsert<T extends KnexMigrationsLockUpsertArgs>(args: SelectSubset<T, KnexMigrationsLockUpsertArgs<ExtArgs>>): Prisma__KnexMigrationsLockClient<$Result.GetResult<Prisma.$KnexMigrationsLockPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KnexMigrationsLocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsLockCountArgs} args - Arguments to filter KnexMigrationsLocks to count.
     * @example
     * // Count the number of KnexMigrationsLocks
     * const count = await prisma.knexMigrationsLock.count({
     *   where: {
     *     // ... the filter for the KnexMigrationsLocks we want to count
     *   }
     * })
    **/
    count<T extends KnexMigrationsLockCountArgs>(
      args?: Subset<T, KnexMigrationsLockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KnexMigrationsLockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KnexMigrationsLock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsLockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KnexMigrationsLockAggregateArgs>(args: Subset<T, KnexMigrationsLockAggregateArgs>): Prisma.PrismaPromise<GetKnexMigrationsLockAggregateType<T>>

    /**
     * Group by KnexMigrationsLock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnexMigrationsLockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KnexMigrationsLockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KnexMigrationsLockGroupByArgs['orderBy'] }
        : { orderBy?: KnexMigrationsLockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KnexMigrationsLockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKnexMigrationsLockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KnexMigrationsLock model
   */
  readonly fields: KnexMigrationsLockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KnexMigrationsLock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KnexMigrationsLockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KnexMigrationsLock model
   */
  interface KnexMigrationsLockFieldRefs {
    readonly index: FieldRef<"KnexMigrationsLock", 'Int'>
    readonly isLocked: FieldRef<"KnexMigrationsLock", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * KnexMigrationsLock findUnique
   */
  export type KnexMigrationsLockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
    /**
     * Filter, which KnexMigrationsLock to fetch.
     */
    where: KnexMigrationsLockWhereUniqueInput
  }

  /**
   * KnexMigrationsLock findUniqueOrThrow
   */
  export type KnexMigrationsLockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
    /**
     * Filter, which KnexMigrationsLock to fetch.
     */
    where: KnexMigrationsLockWhereUniqueInput
  }

  /**
   * KnexMigrationsLock findFirst
   */
  export type KnexMigrationsLockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
    /**
     * Filter, which KnexMigrationsLock to fetch.
     */
    where?: KnexMigrationsLockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnexMigrationsLocks to fetch.
     */
    orderBy?: KnexMigrationsLockOrderByWithRelationInput | KnexMigrationsLockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnexMigrationsLocks.
     */
    cursor?: KnexMigrationsLockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnexMigrationsLocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnexMigrationsLocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnexMigrationsLocks.
     */
    distinct?: KnexMigrationsLockScalarFieldEnum | KnexMigrationsLockScalarFieldEnum[]
  }

  /**
   * KnexMigrationsLock findFirstOrThrow
   */
  export type KnexMigrationsLockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
    /**
     * Filter, which KnexMigrationsLock to fetch.
     */
    where?: KnexMigrationsLockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnexMigrationsLocks to fetch.
     */
    orderBy?: KnexMigrationsLockOrderByWithRelationInput | KnexMigrationsLockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnexMigrationsLocks.
     */
    cursor?: KnexMigrationsLockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnexMigrationsLocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnexMigrationsLocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnexMigrationsLocks.
     */
    distinct?: KnexMigrationsLockScalarFieldEnum | KnexMigrationsLockScalarFieldEnum[]
  }

  /**
   * KnexMigrationsLock findMany
   */
  export type KnexMigrationsLockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
    /**
     * Filter, which KnexMigrationsLocks to fetch.
     */
    where?: KnexMigrationsLockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnexMigrationsLocks to fetch.
     */
    orderBy?: KnexMigrationsLockOrderByWithRelationInput | KnexMigrationsLockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KnexMigrationsLocks.
     */
    cursor?: KnexMigrationsLockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnexMigrationsLocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnexMigrationsLocks.
     */
    skip?: number
    distinct?: KnexMigrationsLockScalarFieldEnum | KnexMigrationsLockScalarFieldEnum[]
  }

  /**
   * KnexMigrationsLock create
   */
  export type KnexMigrationsLockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
    /**
     * The data needed to create a KnexMigrationsLock.
     */
    data?: XOR<KnexMigrationsLockCreateInput, KnexMigrationsLockUncheckedCreateInput>
  }

  /**
   * KnexMigrationsLock createMany
   */
  export type KnexMigrationsLockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KnexMigrationsLocks.
     */
    data: KnexMigrationsLockCreateManyInput | KnexMigrationsLockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KnexMigrationsLock createManyAndReturn
   */
  export type KnexMigrationsLockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
    /**
     * The data used to create many KnexMigrationsLocks.
     */
    data: KnexMigrationsLockCreateManyInput | KnexMigrationsLockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KnexMigrationsLock update
   */
  export type KnexMigrationsLockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
    /**
     * The data needed to update a KnexMigrationsLock.
     */
    data: XOR<KnexMigrationsLockUpdateInput, KnexMigrationsLockUncheckedUpdateInput>
    /**
     * Choose, which KnexMigrationsLock to update.
     */
    where: KnexMigrationsLockWhereUniqueInput
  }

  /**
   * KnexMigrationsLock updateMany
   */
  export type KnexMigrationsLockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KnexMigrationsLocks.
     */
    data: XOR<KnexMigrationsLockUpdateManyMutationInput, KnexMigrationsLockUncheckedUpdateManyInput>
    /**
     * Filter which KnexMigrationsLocks to update
     */
    where?: KnexMigrationsLockWhereInput
    /**
     * Limit how many KnexMigrationsLocks to update.
     */
    limit?: number
  }

  /**
   * KnexMigrationsLock updateManyAndReturn
   */
  export type KnexMigrationsLockUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
    /**
     * The data used to update KnexMigrationsLocks.
     */
    data: XOR<KnexMigrationsLockUpdateManyMutationInput, KnexMigrationsLockUncheckedUpdateManyInput>
    /**
     * Filter which KnexMigrationsLocks to update
     */
    where?: KnexMigrationsLockWhereInput
    /**
     * Limit how many KnexMigrationsLocks to update.
     */
    limit?: number
  }

  /**
   * KnexMigrationsLock upsert
   */
  export type KnexMigrationsLockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
    /**
     * The filter to search for the KnexMigrationsLock to update in case it exists.
     */
    where: KnexMigrationsLockWhereUniqueInput
    /**
     * In case the KnexMigrationsLock found by the `where` argument doesn't exist, create a new KnexMigrationsLock with this data.
     */
    create: XOR<KnexMigrationsLockCreateInput, KnexMigrationsLockUncheckedCreateInput>
    /**
     * In case the KnexMigrationsLock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KnexMigrationsLockUpdateInput, KnexMigrationsLockUncheckedUpdateInput>
  }

  /**
   * KnexMigrationsLock delete
   */
  export type KnexMigrationsLockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
    /**
     * Filter which KnexMigrationsLock to delete.
     */
    where: KnexMigrationsLockWhereUniqueInput
  }

  /**
   * KnexMigrationsLock deleteMany
   */
  export type KnexMigrationsLockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KnexMigrationsLocks to delete
     */
    where?: KnexMigrationsLockWhereInput
    /**
     * Limit how many KnexMigrationsLocks to delete.
     */
    limit?: number
  }

  /**
   * KnexMigrationsLock without action
   */
  export type KnexMigrationsLockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnexMigrationsLock
     */
    select?: KnexMigrationsLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnexMigrationsLock
     */
    omit?: KnexMigrationsLockOmit<ExtArgs> | null
  }


  /**
   * Model Lookup
   */

  export type AggregateLookup = {
    _count: LookupCountAggregateOutputType | null
    _avg: LookupAvgAggregateOutputType | null
    _sum: LookupSumAggregateOutputType | null
    _min: LookupMinAggregateOutputType | null
    _max: LookupMaxAggregateOutputType | null
  }

  export type LookupAvgAggregateOutputType = {
    id: number | null
    codeScale: number | null
    valueScale: number | null
  }

  export type LookupSumAggregateOutputType = {
    id: number | null
    codeScale: number | null
    valueScale: number | null
  }

  export type LookupMinAggregateOutputType = {
    id: number | null
    codeMaximum: string | null
    codeMinimum: string | null
    codeScale: number | null
    codeType: string | null
    internationalize: boolean | null
    ordering: string | null
    realm: string | null
    valueMaximum: string | null
    valueMinimum: string | null
    valueScale: number | null
    valueType: string | null
  }

  export type LookupMaxAggregateOutputType = {
    id: number | null
    codeMaximum: string | null
    codeMinimum: string | null
    codeScale: number | null
    codeType: string | null
    internationalize: boolean | null
    ordering: string | null
    realm: string | null
    valueMaximum: string | null
    valueMinimum: string | null
    valueScale: number | null
    valueType: string | null
  }

  export type LookupCountAggregateOutputType = {
    id: number
    codeMaximum: number
    codeMinimum: number
    codeScale: number
    codeType: number
    internationalize: number
    ordering: number
    realm: number
    valueMaximum: number
    valueMinimum: number
    valueScale: number
    valueType: number
    _all: number
  }


  export type LookupAvgAggregateInputType = {
    id?: true
    codeScale?: true
    valueScale?: true
  }

  export type LookupSumAggregateInputType = {
    id?: true
    codeScale?: true
    valueScale?: true
  }

  export type LookupMinAggregateInputType = {
    id?: true
    codeMaximum?: true
    codeMinimum?: true
    codeScale?: true
    codeType?: true
    internationalize?: true
    ordering?: true
    realm?: true
    valueMaximum?: true
    valueMinimum?: true
    valueScale?: true
    valueType?: true
  }

  export type LookupMaxAggregateInputType = {
    id?: true
    codeMaximum?: true
    codeMinimum?: true
    codeScale?: true
    codeType?: true
    internationalize?: true
    ordering?: true
    realm?: true
    valueMaximum?: true
    valueMinimum?: true
    valueScale?: true
    valueType?: true
  }

  export type LookupCountAggregateInputType = {
    id?: true
    codeMaximum?: true
    codeMinimum?: true
    codeScale?: true
    codeType?: true
    internationalize?: true
    ordering?: true
    realm?: true
    valueMaximum?: true
    valueMinimum?: true
    valueScale?: true
    valueType?: true
    _all?: true
  }

  export type LookupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lookup to aggregate.
     */
    where?: LookupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lookups to fetch.
     */
    orderBy?: LookupOrderByWithRelationInput | LookupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LookupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lookups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lookups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lookups
    **/
    _count?: true | LookupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LookupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LookupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LookupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LookupMaxAggregateInputType
  }

  export type GetLookupAggregateType<T extends LookupAggregateArgs> = {
        [P in keyof T & keyof AggregateLookup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLookup[P]>
      : GetScalarType<T[P], AggregateLookup[P]>
  }




  export type LookupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LookupWhereInput
    orderBy?: LookupOrderByWithAggregationInput | LookupOrderByWithAggregationInput[]
    by: LookupScalarFieldEnum[] | LookupScalarFieldEnum
    having?: LookupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LookupCountAggregateInputType | true
    _avg?: LookupAvgAggregateInputType
    _sum?: LookupSumAggregateInputType
    _min?: LookupMinAggregateInputType
    _max?: LookupMaxAggregateInputType
  }

  export type LookupGroupByOutputType = {
    id: number
    codeMaximum: string | null
    codeMinimum: string | null
    codeScale: number | null
    codeType: string
    internationalize: boolean
    ordering: string
    realm: string
    valueMaximum: string | null
    valueMinimum: string | null
    valueScale: number | null
    valueType: string
    _count: LookupCountAggregateOutputType | null
    _avg: LookupAvgAggregateOutputType | null
    _sum: LookupSumAggregateOutputType | null
    _min: LookupMinAggregateOutputType | null
    _max: LookupMaxAggregateOutputType | null
  }

  type GetLookupGroupByPayload<T extends LookupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LookupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LookupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LookupGroupByOutputType[P]>
            : GetScalarType<T[P], LookupGroupByOutputType[P]>
        }
      >
    >


  export type LookupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    codeMaximum?: boolean
    codeMinimum?: boolean
    codeScale?: boolean
    codeType?: boolean
    internationalize?: boolean
    ordering?: boolean
    realm?: boolean
    valueMaximum?: boolean
    valueMinimum?: boolean
    valueScale?: boolean
    valueType?: boolean
    lookupValue?: boolean | Lookup$lookupValueArgs<ExtArgs>
    _count?: boolean | LookupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lookup"]>

  export type LookupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    codeMaximum?: boolean
    codeMinimum?: boolean
    codeScale?: boolean
    codeType?: boolean
    internationalize?: boolean
    ordering?: boolean
    realm?: boolean
    valueMaximum?: boolean
    valueMinimum?: boolean
    valueScale?: boolean
    valueType?: boolean
  }, ExtArgs["result"]["lookup"]>

  export type LookupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    codeMaximum?: boolean
    codeMinimum?: boolean
    codeScale?: boolean
    codeType?: boolean
    internationalize?: boolean
    ordering?: boolean
    realm?: boolean
    valueMaximum?: boolean
    valueMinimum?: boolean
    valueScale?: boolean
    valueType?: boolean
  }, ExtArgs["result"]["lookup"]>

  export type LookupSelectScalar = {
    id?: boolean
    codeMaximum?: boolean
    codeMinimum?: boolean
    codeScale?: boolean
    codeType?: boolean
    internationalize?: boolean
    ordering?: boolean
    realm?: boolean
    valueMaximum?: boolean
    valueMinimum?: boolean
    valueScale?: boolean
    valueType?: boolean
  }

  export type LookupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "codeMaximum" | "codeMinimum" | "codeScale" | "codeType" | "internationalize" | "ordering" | "realm" | "valueMaximum" | "valueMinimum" | "valueScale" | "valueType", ExtArgs["result"]["lookup"]>
  export type LookupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lookupValue?: boolean | Lookup$lookupValueArgs<ExtArgs>
    _count?: boolean | LookupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LookupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LookupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LookupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lookup"
    objects: {
      lookupValue: Prisma.$LookupValuePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      codeMaximum: string | null
      codeMinimum: string | null
      codeScale: number | null
      codeType: string
      internationalize: boolean
      ordering: string
      realm: string
      valueMaximum: string | null
      valueMinimum: string | null
      valueScale: number | null
      valueType: string
    }, ExtArgs["result"]["lookup"]>
    composites: {}
  }

  type LookupGetPayload<S extends boolean | null | undefined | LookupDefaultArgs> = $Result.GetResult<Prisma.$LookupPayload, S>

  type LookupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LookupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LookupCountAggregateInputType | true
    }

  export interface LookupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lookup'], meta: { name: 'Lookup' } }
    /**
     * Find zero or one Lookup that matches the filter.
     * @param {LookupFindUniqueArgs} args - Arguments to find a Lookup
     * @example
     * // Get one Lookup
     * const lookup = await prisma.lookup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LookupFindUniqueArgs>(args: SelectSubset<T, LookupFindUniqueArgs<ExtArgs>>): Prisma__LookupClient<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lookup that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LookupFindUniqueOrThrowArgs} args - Arguments to find a Lookup
     * @example
     * // Get one Lookup
     * const lookup = await prisma.lookup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LookupFindUniqueOrThrowArgs>(args: SelectSubset<T, LookupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LookupClient<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lookup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupFindFirstArgs} args - Arguments to find a Lookup
     * @example
     * // Get one Lookup
     * const lookup = await prisma.lookup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LookupFindFirstArgs>(args?: SelectSubset<T, LookupFindFirstArgs<ExtArgs>>): Prisma__LookupClient<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lookup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupFindFirstOrThrowArgs} args - Arguments to find a Lookup
     * @example
     * // Get one Lookup
     * const lookup = await prisma.lookup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LookupFindFirstOrThrowArgs>(args?: SelectSubset<T, LookupFindFirstOrThrowArgs<ExtArgs>>): Prisma__LookupClient<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lookups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lookups
     * const lookups = await prisma.lookup.findMany()
     * 
     * // Get first 10 Lookups
     * const lookups = await prisma.lookup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lookupWithIdOnly = await prisma.lookup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LookupFindManyArgs>(args?: SelectSubset<T, LookupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lookup.
     * @param {LookupCreateArgs} args - Arguments to create a Lookup.
     * @example
     * // Create one Lookup
     * const Lookup = await prisma.lookup.create({
     *   data: {
     *     // ... data to create a Lookup
     *   }
     * })
     * 
     */
    create<T extends LookupCreateArgs>(args: SelectSubset<T, LookupCreateArgs<ExtArgs>>): Prisma__LookupClient<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lookups.
     * @param {LookupCreateManyArgs} args - Arguments to create many Lookups.
     * @example
     * // Create many Lookups
     * const lookup = await prisma.lookup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LookupCreateManyArgs>(args?: SelectSubset<T, LookupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lookups and returns the data saved in the database.
     * @param {LookupCreateManyAndReturnArgs} args - Arguments to create many Lookups.
     * @example
     * // Create many Lookups
     * const lookup = await prisma.lookup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lookups and only return the `id`
     * const lookupWithIdOnly = await prisma.lookup.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LookupCreateManyAndReturnArgs>(args?: SelectSubset<T, LookupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lookup.
     * @param {LookupDeleteArgs} args - Arguments to delete one Lookup.
     * @example
     * // Delete one Lookup
     * const Lookup = await prisma.lookup.delete({
     *   where: {
     *     // ... filter to delete one Lookup
     *   }
     * })
     * 
     */
    delete<T extends LookupDeleteArgs>(args: SelectSubset<T, LookupDeleteArgs<ExtArgs>>): Prisma__LookupClient<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lookup.
     * @param {LookupUpdateArgs} args - Arguments to update one Lookup.
     * @example
     * // Update one Lookup
     * const lookup = await prisma.lookup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LookupUpdateArgs>(args: SelectSubset<T, LookupUpdateArgs<ExtArgs>>): Prisma__LookupClient<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lookups.
     * @param {LookupDeleteManyArgs} args - Arguments to filter Lookups to delete.
     * @example
     * // Delete a few Lookups
     * const { count } = await prisma.lookup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LookupDeleteManyArgs>(args?: SelectSubset<T, LookupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lookups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lookups
     * const lookup = await prisma.lookup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LookupUpdateManyArgs>(args: SelectSubset<T, LookupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lookups and returns the data updated in the database.
     * @param {LookupUpdateManyAndReturnArgs} args - Arguments to update many Lookups.
     * @example
     * // Update many Lookups
     * const lookup = await prisma.lookup.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lookups and only return the `id`
     * const lookupWithIdOnly = await prisma.lookup.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LookupUpdateManyAndReturnArgs>(args: SelectSubset<T, LookupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lookup.
     * @param {LookupUpsertArgs} args - Arguments to update or create a Lookup.
     * @example
     * // Update or create a Lookup
     * const lookup = await prisma.lookup.upsert({
     *   create: {
     *     // ... data to create a Lookup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lookup we want to update
     *   }
     * })
     */
    upsert<T extends LookupUpsertArgs>(args: SelectSubset<T, LookupUpsertArgs<ExtArgs>>): Prisma__LookupClient<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lookups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupCountArgs} args - Arguments to filter Lookups to count.
     * @example
     * // Count the number of Lookups
     * const count = await prisma.lookup.count({
     *   where: {
     *     // ... the filter for the Lookups we want to count
     *   }
     * })
    **/
    count<T extends LookupCountArgs>(
      args?: Subset<T, LookupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LookupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lookup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LookupAggregateArgs>(args: Subset<T, LookupAggregateArgs>): Prisma.PrismaPromise<GetLookupAggregateType<T>>

    /**
     * Group by Lookup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LookupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LookupGroupByArgs['orderBy'] }
        : { orderBy?: LookupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LookupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLookupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lookup model
   */
  readonly fields: LookupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lookup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LookupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lookupValue<T extends Lookup$lookupValueArgs<ExtArgs> = {}>(args?: Subset<T, Lookup$lookupValueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lookup model
   */
  interface LookupFieldRefs {
    readonly id: FieldRef<"Lookup", 'Int'>
    readonly codeMaximum: FieldRef<"Lookup", 'String'>
    readonly codeMinimum: FieldRef<"Lookup", 'String'>
    readonly codeScale: FieldRef<"Lookup", 'Int'>
    readonly codeType: FieldRef<"Lookup", 'String'>
    readonly internationalize: FieldRef<"Lookup", 'Boolean'>
    readonly ordering: FieldRef<"Lookup", 'String'>
    readonly realm: FieldRef<"Lookup", 'String'>
    readonly valueMaximum: FieldRef<"Lookup", 'String'>
    readonly valueMinimum: FieldRef<"Lookup", 'String'>
    readonly valueScale: FieldRef<"Lookup", 'Int'>
    readonly valueType: FieldRef<"Lookup", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Lookup findUnique
   */
  export type LookupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupInclude<ExtArgs> | null
    /**
     * Filter, which Lookup to fetch.
     */
    where: LookupWhereUniqueInput
  }

  /**
   * Lookup findUniqueOrThrow
   */
  export type LookupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupInclude<ExtArgs> | null
    /**
     * Filter, which Lookup to fetch.
     */
    where: LookupWhereUniqueInput
  }

  /**
   * Lookup findFirst
   */
  export type LookupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupInclude<ExtArgs> | null
    /**
     * Filter, which Lookup to fetch.
     */
    where?: LookupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lookups to fetch.
     */
    orderBy?: LookupOrderByWithRelationInput | LookupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lookups.
     */
    cursor?: LookupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lookups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lookups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lookups.
     */
    distinct?: LookupScalarFieldEnum | LookupScalarFieldEnum[]
  }

  /**
   * Lookup findFirstOrThrow
   */
  export type LookupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupInclude<ExtArgs> | null
    /**
     * Filter, which Lookup to fetch.
     */
    where?: LookupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lookups to fetch.
     */
    orderBy?: LookupOrderByWithRelationInput | LookupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lookups.
     */
    cursor?: LookupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lookups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lookups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lookups.
     */
    distinct?: LookupScalarFieldEnum | LookupScalarFieldEnum[]
  }

  /**
   * Lookup findMany
   */
  export type LookupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupInclude<ExtArgs> | null
    /**
     * Filter, which Lookups to fetch.
     */
    where?: LookupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lookups to fetch.
     */
    orderBy?: LookupOrderByWithRelationInput | LookupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lookups.
     */
    cursor?: LookupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lookups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lookups.
     */
    skip?: number
    distinct?: LookupScalarFieldEnum | LookupScalarFieldEnum[]
  }

  /**
   * Lookup create
   */
  export type LookupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupInclude<ExtArgs> | null
    /**
     * The data needed to create a Lookup.
     */
    data: XOR<LookupCreateInput, LookupUncheckedCreateInput>
  }

  /**
   * Lookup createMany
   */
  export type LookupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lookups.
     */
    data: LookupCreateManyInput | LookupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lookup createManyAndReturn
   */
  export type LookupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * The data used to create many Lookups.
     */
    data: LookupCreateManyInput | LookupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lookup update
   */
  export type LookupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupInclude<ExtArgs> | null
    /**
     * The data needed to update a Lookup.
     */
    data: XOR<LookupUpdateInput, LookupUncheckedUpdateInput>
    /**
     * Choose, which Lookup to update.
     */
    where: LookupWhereUniqueInput
  }

  /**
   * Lookup updateMany
   */
  export type LookupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lookups.
     */
    data: XOR<LookupUpdateManyMutationInput, LookupUncheckedUpdateManyInput>
    /**
     * Filter which Lookups to update
     */
    where?: LookupWhereInput
    /**
     * Limit how many Lookups to update.
     */
    limit?: number
  }

  /**
   * Lookup updateManyAndReturn
   */
  export type LookupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * The data used to update Lookups.
     */
    data: XOR<LookupUpdateManyMutationInput, LookupUncheckedUpdateManyInput>
    /**
     * Filter which Lookups to update
     */
    where?: LookupWhereInput
    /**
     * Limit how many Lookups to update.
     */
    limit?: number
  }

  /**
   * Lookup upsert
   */
  export type LookupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupInclude<ExtArgs> | null
    /**
     * The filter to search for the Lookup to update in case it exists.
     */
    where: LookupWhereUniqueInput
    /**
     * In case the Lookup found by the `where` argument doesn't exist, create a new Lookup with this data.
     */
    create: XOR<LookupCreateInput, LookupUncheckedCreateInput>
    /**
     * In case the Lookup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LookupUpdateInput, LookupUncheckedUpdateInput>
  }

  /**
   * Lookup delete
   */
  export type LookupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupInclude<ExtArgs> | null
    /**
     * Filter which Lookup to delete.
     */
    where: LookupWhereUniqueInput
  }

  /**
   * Lookup deleteMany
   */
  export type LookupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lookups to delete
     */
    where?: LookupWhereInput
    /**
     * Limit how many Lookups to delete.
     */
    limit?: number
  }

  /**
   * Lookup.lookupValue
   */
  export type Lookup$lookupValueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueInclude<ExtArgs> | null
    where?: LookupValueWhereInput
    orderBy?: LookupValueOrderByWithRelationInput | LookupValueOrderByWithRelationInput[]
    cursor?: LookupValueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LookupValueScalarFieldEnum | LookupValueScalarFieldEnum[]
  }

  /**
   * Lookup without action
   */
  export type LookupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookup
     */
    select?: LookupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookup
     */
    omit?: LookupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupInclude<ExtArgs> | null
  }


  /**
   * Model LookupValue
   */

  export type AggregateLookupValue = {
    _count: LookupValueCountAggregateOutputType | null
    _avg: LookupValueAvgAggregateOutputType | null
    _sum: LookupValueSumAggregateOutputType | null
    _min: LookupValueMinAggregateOutputType | null
    _max: LookupValueMaxAggregateOutputType | null
  }

  export type LookupValueAvgAggregateOutputType = {
    id: number | null
    lookupId: number | null
    numericSequencer: number | null
    sequencer: number | null
  }

  export type LookupValueSumAggregateOutputType = {
    id: number | null
    lookupId: number | null
    numericSequencer: number | null
    sequencer: number | null
  }

  export type LookupValueMinAggregateOutputType = {
    id: number | null
    code: string | null
    lookupId: number | null
    numericSequencer: number | null
    sequencer: number | null
    stringSequencer: string | null
    value: string | null
  }

  export type LookupValueMaxAggregateOutputType = {
    id: number | null
    code: string | null
    lookupId: number | null
    numericSequencer: number | null
    sequencer: number | null
    stringSequencer: string | null
    value: string | null
  }

  export type LookupValueCountAggregateOutputType = {
    id: number
    code: number
    lookupId: number
    numericSequencer: number
    sequencer: number
    stringSequencer: number
    value: number
    _all: number
  }


  export type LookupValueAvgAggregateInputType = {
    id?: true
    lookupId?: true
    numericSequencer?: true
    sequencer?: true
  }

  export type LookupValueSumAggregateInputType = {
    id?: true
    lookupId?: true
    numericSequencer?: true
    sequencer?: true
  }

  export type LookupValueMinAggregateInputType = {
    id?: true
    code?: true
    lookupId?: true
    numericSequencer?: true
    sequencer?: true
    stringSequencer?: true
    value?: true
  }

  export type LookupValueMaxAggregateInputType = {
    id?: true
    code?: true
    lookupId?: true
    numericSequencer?: true
    sequencer?: true
    stringSequencer?: true
    value?: true
  }

  export type LookupValueCountAggregateInputType = {
    id?: true
    code?: true
    lookupId?: true
    numericSequencer?: true
    sequencer?: true
    stringSequencer?: true
    value?: true
    _all?: true
  }

  export type LookupValueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LookupValue to aggregate.
     */
    where?: LookupValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LookupValues to fetch.
     */
    orderBy?: LookupValueOrderByWithRelationInput | LookupValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LookupValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LookupValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LookupValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LookupValues
    **/
    _count?: true | LookupValueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LookupValueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LookupValueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LookupValueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LookupValueMaxAggregateInputType
  }

  export type GetLookupValueAggregateType<T extends LookupValueAggregateArgs> = {
        [P in keyof T & keyof AggregateLookupValue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLookupValue[P]>
      : GetScalarType<T[P], AggregateLookupValue[P]>
  }




  export type LookupValueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LookupValueWhereInput
    orderBy?: LookupValueOrderByWithAggregationInput | LookupValueOrderByWithAggregationInput[]
    by: LookupValueScalarFieldEnum[] | LookupValueScalarFieldEnum
    having?: LookupValueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LookupValueCountAggregateInputType | true
    _avg?: LookupValueAvgAggregateInputType
    _sum?: LookupValueSumAggregateInputType
    _min?: LookupValueMinAggregateInputType
    _max?: LookupValueMaxAggregateInputType
  }

  export type LookupValueGroupByOutputType = {
    id: number
    code: string
    lookupId: number
    numericSequencer: number
    sequencer: number
    stringSequencer: string
    value: string
    _count: LookupValueCountAggregateOutputType | null
    _avg: LookupValueAvgAggregateOutputType | null
    _sum: LookupValueSumAggregateOutputType | null
    _min: LookupValueMinAggregateOutputType | null
    _max: LookupValueMaxAggregateOutputType | null
  }

  type GetLookupValueGroupByPayload<T extends LookupValueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LookupValueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LookupValueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LookupValueGroupByOutputType[P]>
            : GetScalarType<T[P], LookupValueGroupByOutputType[P]>
        }
      >
    >


  export type LookupValueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    lookupId?: boolean
    numericSequencer?: boolean
    sequencer?: boolean
    stringSequencer?: boolean
    value?: boolean
    lookup?: boolean | LookupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lookupValue"]>

  export type LookupValueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    lookupId?: boolean
    numericSequencer?: boolean
    sequencer?: boolean
    stringSequencer?: boolean
    value?: boolean
    lookup?: boolean | LookupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lookupValue"]>

  export type LookupValueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    lookupId?: boolean
    numericSequencer?: boolean
    sequencer?: boolean
    stringSequencer?: boolean
    value?: boolean
    lookup?: boolean | LookupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lookupValue"]>

  export type LookupValueSelectScalar = {
    id?: boolean
    code?: boolean
    lookupId?: boolean
    numericSequencer?: boolean
    sequencer?: boolean
    stringSequencer?: boolean
    value?: boolean
  }

  export type LookupValueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "lookupId" | "numericSequencer" | "sequencer" | "stringSequencer" | "value", ExtArgs["result"]["lookupValue"]>
  export type LookupValueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lookup?: boolean | LookupDefaultArgs<ExtArgs>
  }
  export type LookupValueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lookup?: boolean | LookupDefaultArgs<ExtArgs>
  }
  export type LookupValueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lookup?: boolean | LookupDefaultArgs<ExtArgs>
  }

  export type $LookupValuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LookupValue"
    objects: {
      lookup: Prisma.$LookupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      lookupId: number
      numericSequencer: number
      sequencer: number
      stringSequencer: string
      value: string
    }, ExtArgs["result"]["lookupValue"]>
    composites: {}
  }

  type LookupValueGetPayload<S extends boolean | null | undefined | LookupValueDefaultArgs> = $Result.GetResult<Prisma.$LookupValuePayload, S>

  type LookupValueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LookupValueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LookupValueCountAggregateInputType | true
    }

  export interface LookupValueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LookupValue'], meta: { name: 'LookupValue' } }
    /**
     * Find zero or one LookupValue that matches the filter.
     * @param {LookupValueFindUniqueArgs} args - Arguments to find a LookupValue
     * @example
     * // Get one LookupValue
     * const lookupValue = await prisma.lookupValue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LookupValueFindUniqueArgs>(args: SelectSubset<T, LookupValueFindUniqueArgs<ExtArgs>>): Prisma__LookupValueClient<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LookupValue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LookupValueFindUniqueOrThrowArgs} args - Arguments to find a LookupValue
     * @example
     * // Get one LookupValue
     * const lookupValue = await prisma.lookupValue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LookupValueFindUniqueOrThrowArgs>(args: SelectSubset<T, LookupValueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LookupValueClient<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LookupValue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupValueFindFirstArgs} args - Arguments to find a LookupValue
     * @example
     * // Get one LookupValue
     * const lookupValue = await prisma.lookupValue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LookupValueFindFirstArgs>(args?: SelectSubset<T, LookupValueFindFirstArgs<ExtArgs>>): Prisma__LookupValueClient<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LookupValue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupValueFindFirstOrThrowArgs} args - Arguments to find a LookupValue
     * @example
     * // Get one LookupValue
     * const lookupValue = await prisma.lookupValue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LookupValueFindFirstOrThrowArgs>(args?: SelectSubset<T, LookupValueFindFirstOrThrowArgs<ExtArgs>>): Prisma__LookupValueClient<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LookupValues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupValueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LookupValues
     * const lookupValues = await prisma.lookupValue.findMany()
     * 
     * // Get first 10 LookupValues
     * const lookupValues = await prisma.lookupValue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lookupValueWithIdOnly = await prisma.lookupValue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LookupValueFindManyArgs>(args?: SelectSubset<T, LookupValueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LookupValue.
     * @param {LookupValueCreateArgs} args - Arguments to create a LookupValue.
     * @example
     * // Create one LookupValue
     * const LookupValue = await prisma.lookupValue.create({
     *   data: {
     *     // ... data to create a LookupValue
     *   }
     * })
     * 
     */
    create<T extends LookupValueCreateArgs>(args: SelectSubset<T, LookupValueCreateArgs<ExtArgs>>): Prisma__LookupValueClient<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LookupValues.
     * @param {LookupValueCreateManyArgs} args - Arguments to create many LookupValues.
     * @example
     * // Create many LookupValues
     * const lookupValue = await prisma.lookupValue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LookupValueCreateManyArgs>(args?: SelectSubset<T, LookupValueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LookupValues and returns the data saved in the database.
     * @param {LookupValueCreateManyAndReturnArgs} args - Arguments to create many LookupValues.
     * @example
     * // Create many LookupValues
     * const lookupValue = await prisma.lookupValue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LookupValues and only return the `id`
     * const lookupValueWithIdOnly = await prisma.lookupValue.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LookupValueCreateManyAndReturnArgs>(args?: SelectSubset<T, LookupValueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LookupValue.
     * @param {LookupValueDeleteArgs} args - Arguments to delete one LookupValue.
     * @example
     * // Delete one LookupValue
     * const LookupValue = await prisma.lookupValue.delete({
     *   where: {
     *     // ... filter to delete one LookupValue
     *   }
     * })
     * 
     */
    delete<T extends LookupValueDeleteArgs>(args: SelectSubset<T, LookupValueDeleteArgs<ExtArgs>>): Prisma__LookupValueClient<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LookupValue.
     * @param {LookupValueUpdateArgs} args - Arguments to update one LookupValue.
     * @example
     * // Update one LookupValue
     * const lookupValue = await prisma.lookupValue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LookupValueUpdateArgs>(args: SelectSubset<T, LookupValueUpdateArgs<ExtArgs>>): Prisma__LookupValueClient<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LookupValues.
     * @param {LookupValueDeleteManyArgs} args - Arguments to filter LookupValues to delete.
     * @example
     * // Delete a few LookupValues
     * const { count } = await prisma.lookupValue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LookupValueDeleteManyArgs>(args?: SelectSubset<T, LookupValueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LookupValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupValueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LookupValues
     * const lookupValue = await prisma.lookupValue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LookupValueUpdateManyArgs>(args: SelectSubset<T, LookupValueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LookupValues and returns the data updated in the database.
     * @param {LookupValueUpdateManyAndReturnArgs} args - Arguments to update many LookupValues.
     * @example
     * // Update many LookupValues
     * const lookupValue = await prisma.lookupValue.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LookupValues and only return the `id`
     * const lookupValueWithIdOnly = await prisma.lookupValue.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LookupValueUpdateManyAndReturnArgs>(args: SelectSubset<T, LookupValueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LookupValue.
     * @param {LookupValueUpsertArgs} args - Arguments to update or create a LookupValue.
     * @example
     * // Update or create a LookupValue
     * const lookupValue = await prisma.lookupValue.upsert({
     *   create: {
     *     // ... data to create a LookupValue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LookupValue we want to update
     *   }
     * })
     */
    upsert<T extends LookupValueUpsertArgs>(args: SelectSubset<T, LookupValueUpsertArgs<ExtArgs>>): Prisma__LookupValueClient<$Result.GetResult<Prisma.$LookupValuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LookupValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupValueCountArgs} args - Arguments to filter LookupValues to count.
     * @example
     * // Count the number of LookupValues
     * const count = await prisma.lookupValue.count({
     *   where: {
     *     // ... the filter for the LookupValues we want to count
     *   }
     * })
    **/
    count<T extends LookupValueCountArgs>(
      args?: Subset<T, LookupValueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LookupValueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LookupValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupValueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LookupValueAggregateArgs>(args: Subset<T, LookupValueAggregateArgs>): Prisma.PrismaPromise<GetLookupValueAggregateType<T>>

    /**
     * Group by LookupValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupValueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LookupValueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LookupValueGroupByArgs['orderBy'] }
        : { orderBy?: LookupValueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LookupValueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLookupValueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LookupValue model
   */
  readonly fields: LookupValueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LookupValue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LookupValueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lookup<T extends LookupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LookupDefaultArgs<ExtArgs>>): Prisma__LookupClient<$Result.GetResult<Prisma.$LookupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LookupValue model
   */
  interface LookupValueFieldRefs {
    readonly id: FieldRef<"LookupValue", 'Int'>
    readonly code: FieldRef<"LookupValue", 'String'>
    readonly lookupId: FieldRef<"LookupValue", 'Int'>
    readonly numericSequencer: FieldRef<"LookupValue", 'Float'>
    readonly sequencer: FieldRef<"LookupValue", 'Int'>
    readonly stringSequencer: FieldRef<"LookupValue", 'String'>
    readonly value: FieldRef<"LookupValue", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LookupValue findUnique
   */
  export type LookupValueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueInclude<ExtArgs> | null
    /**
     * Filter, which LookupValue to fetch.
     */
    where: LookupValueWhereUniqueInput
  }

  /**
   * LookupValue findUniqueOrThrow
   */
  export type LookupValueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueInclude<ExtArgs> | null
    /**
     * Filter, which LookupValue to fetch.
     */
    where: LookupValueWhereUniqueInput
  }

  /**
   * LookupValue findFirst
   */
  export type LookupValueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueInclude<ExtArgs> | null
    /**
     * Filter, which LookupValue to fetch.
     */
    where?: LookupValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LookupValues to fetch.
     */
    orderBy?: LookupValueOrderByWithRelationInput | LookupValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LookupValues.
     */
    cursor?: LookupValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LookupValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LookupValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LookupValues.
     */
    distinct?: LookupValueScalarFieldEnum | LookupValueScalarFieldEnum[]
  }

  /**
   * LookupValue findFirstOrThrow
   */
  export type LookupValueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueInclude<ExtArgs> | null
    /**
     * Filter, which LookupValue to fetch.
     */
    where?: LookupValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LookupValues to fetch.
     */
    orderBy?: LookupValueOrderByWithRelationInput | LookupValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LookupValues.
     */
    cursor?: LookupValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LookupValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LookupValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LookupValues.
     */
    distinct?: LookupValueScalarFieldEnum | LookupValueScalarFieldEnum[]
  }

  /**
   * LookupValue findMany
   */
  export type LookupValueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueInclude<ExtArgs> | null
    /**
     * Filter, which LookupValues to fetch.
     */
    where?: LookupValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LookupValues to fetch.
     */
    orderBy?: LookupValueOrderByWithRelationInput | LookupValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LookupValues.
     */
    cursor?: LookupValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LookupValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LookupValues.
     */
    skip?: number
    distinct?: LookupValueScalarFieldEnum | LookupValueScalarFieldEnum[]
  }

  /**
   * LookupValue create
   */
  export type LookupValueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueInclude<ExtArgs> | null
    /**
     * The data needed to create a LookupValue.
     */
    data: XOR<LookupValueCreateInput, LookupValueUncheckedCreateInput>
  }

  /**
   * LookupValue createMany
   */
  export type LookupValueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LookupValues.
     */
    data: LookupValueCreateManyInput | LookupValueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LookupValue createManyAndReturn
   */
  export type LookupValueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * The data used to create many LookupValues.
     */
    data: LookupValueCreateManyInput | LookupValueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LookupValue update
   */
  export type LookupValueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueInclude<ExtArgs> | null
    /**
     * The data needed to update a LookupValue.
     */
    data: XOR<LookupValueUpdateInput, LookupValueUncheckedUpdateInput>
    /**
     * Choose, which LookupValue to update.
     */
    where: LookupValueWhereUniqueInput
  }

  /**
   * LookupValue updateMany
   */
  export type LookupValueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LookupValues.
     */
    data: XOR<LookupValueUpdateManyMutationInput, LookupValueUncheckedUpdateManyInput>
    /**
     * Filter which LookupValues to update
     */
    where?: LookupValueWhereInput
    /**
     * Limit how many LookupValues to update.
     */
    limit?: number
  }

  /**
   * LookupValue updateManyAndReturn
   */
  export type LookupValueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * The data used to update LookupValues.
     */
    data: XOR<LookupValueUpdateManyMutationInput, LookupValueUncheckedUpdateManyInput>
    /**
     * Filter which LookupValues to update
     */
    where?: LookupValueWhereInput
    /**
     * Limit how many LookupValues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LookupValue upsert
   */
  export type LookupValueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueInclude<ExtArgs> | null
    /**
     * The filter to search for the LookupValue to update in case it exists.
     */
    where: LookupValueWhereUniqueInput
    /**
     * In case the LookupValue found by the `where` argument doesn't exist, create a new LookupValue with this data.
     */
    create: XOR<LookupValueCreateInput, LookupValueUncheckedCreateInput>
    /**
     * In case the LookupValue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LookupValueUpdateInput, LookupValueUncheckedUpdateInput>
  }

  /**
   * LookupValue delete
   */
  export type LookupValueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueInclude<ExtArgs> | null
    /**
     * Filter which LookupValue to delete.
     */
    where: LookupValueWhereUniqueInput
  }

  /**
   * LookupValue deleteMany
   */
  export type LookupValueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LookupValues to delete
     */
    where?: LookupValueWhereInput
    /**
     * Limit how many LookupValues to delete.
     */
    limit?: number
  }

  /**
   * LookupValue without action
   */
  export type LookupValueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LookupValue
     */
    select?: LookupValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LookupValue
     */
    omit?: LookupValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LookupValueInclude<ExtArgs> | null
  }


  /**
   * Model Membership
   */

  export type AggregateMembership = {
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  export type MembershipAvgAggregateOutputType = {
    id: number | null
    hotelRoomId: number | null
    userId: number | null
    year: number | null
  }

  export type MembershipSumAggregateOutputType = {
    id: number | null
    hotelRoomId: number | null
    userId: number | null
    year: number | null
  }

  export type MembershipMinAggregateOutputType = {
    id: number | null
    arrivalDate: Date | null
    attendance: string | null
    attending: boolean | null
    departureDate: Date | null
    hotelRoomId: number | null
    interestLevel: string | null
    message: string | null
    roomPreferenceAndNotes: string | null
    roomingPreferences: string | null
    roomingWith: string | null
    userId: number | null
    volunteer: boolean | null
    year: number | null
    offerSubsidy: boolean | null
    requestOldPrice: boolean | null
    slotsAttending: string | null
  }

  export type MembershipMaxAggregateOutputType = {
    id: number | null
    arrivalDate: Date | null
    attendance: string | null
    attending: boolean | null
    departureDate: Date | null
    hotelRoomId: number | null
    interestLevel: string | null
    message: string | null
    roomPreferenceAndNotes: string | null
    roomingPreferences: string | null
    roomingWith: string | null
    userId: number | null
    volunteer: boolean | null
    year: number | null
    offerSubsidy: boolean | null
    requestOldPrice: boolean | null
    slotsAttending: string | null
  }

  export type MembershipCountAggregateOutputType = {
    id: number
    arrivalDate: number
    attendance: number
    attending: number
    departureDate: number
    hotelRoomId: number
    interestLevel: number
    message: number
    roomPreferenceAndNotes: number
    roomingPreferences: number
    roomingWith: number
    userId: number
    volunteer: number
    year: number
    offerSubsidy: number
    requestOldPrice: number
    slotsAttending: number
    _all: number
  }


  export type MembershipAvgAggregateInputType = {
    id?: true
    hotelRoomId?: true
    userId?: true
    year?: true
  }

  export type MembershipSumAggregateInputType = {
    id?: true
    hotelRoomId?: true
    userId?: true
    year?: true
  }

  export type MembershipMinAggregateInputType = {
    id?: true
    arrivalDate?: true
    attendance?: true
    attending?: true
    departureDate?: true
    hotelRoomId?: true
    interestLevel?: true
    message?: true
    roomPreferenceAndNotes?: true
    roomingPreferences?: true
    roomingWith?: true
    userId?: true
    volunteer?: true
    year?: true
    offerSubsidy?: true
    requestOldPrice?: true
    slotsAttending?: true
  }

  export type MembershipMaxAggregateInputType = {
    id?: true
    arrivalDate?: true
    attendance?: true
    attending?: true
    departureDate?: true
    hotelRoomId?: true
    interestLevel?: true
    message?: true
    roomPreferenceAndNotes?: true
    roomingPreferences?: true
    roomingWith?: true
    userId?: true
    volunteer?: true
    year?: true
    offerSubsidy?: true
    requestOldPrice?: true
    slotsAttending?: true
  }

  export type MembershipCountAggregateInputType = {
    id?: true
    arrivalDate?: true
    attendance?: true
    attending?: true
    departureDate?: true
    hotelRoomId?: true
    interestLevel?: true
    message?: true
    roomPreferenceAndNotes?: true
    roomingPreferences?: true
    roomingWith?: true
    userId?: true
    volunteer?: true
    year?: true
    offerSubsidy?: true
    requestOldPrice?: true
    slotsAttending?: true
    _all?: true
  }

  export type MembershipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Membership to aggregate.
     */
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     */
    orderBy?: MembershipOrderByWithRelationInput | MembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Memberships
    **/
    _count?: true | MembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MembershipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MembershipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MembershipMaxAggregateInputType
  }

  export type GetMembershipAggregateType<T extends MembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMembership[P]>
      : GetScalarType<T[P], AggregateMembership[P]>
  }




  export type MembershipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MembershipWhereInput
    orderBy?: MembershipOrderByWithAggregationInput | MembershipOrderByWithAggregationInput[]
    by: MembershipScalarFieldEnum[] | MembershipScalarFieldEnum
    having?: MembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MembershipCountAggregateInputType | true
    _avg?: MembershipAvgAggregateInputType
    _sum?: MembershipSumAggregateInputType
    _min?: MembershipMinAggregateInputType
    _max?: MembershipMaxAggregateInputType
  }

  export type MembershipGroupByOutputType = {
    id: number
    arrivalDate: Date
    attendance: string
    attending: boolean
    departureDate: Date
    hotelRoomId: number
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    userId: number
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending: string | null
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  type GetMembershipGroupByPayload<T extends MembershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MembershipGroupByOutputType[P]>
            : GetScalarType<T[P], MembershipGroupByOutputType[P]>
        }
      >
    >


  export type MembershipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    arrivalDate?: boolean
    attendance?: boolean
    attending?: boolean
    departureDate?: boolean
    hotelRoomId?: boolean
    interestLevel?: boolean
    message?: boolean
    roomPreferenceAndNotes?: boolean
    roomingPreferences?: boolean
    roomingWith?: boolean
    userId?: boolean
    volunteer?: boolean
    year?: boolean
    offerSubsidy?: boolean
    requestOldPrice?: boolean
    slotsAttending?: boolean
    gameAssignment?: boolean | Membership$gameAssignmentArgs<ExtArgs>
    gameChoice?: boolean | Membership$gameChoiceArgs<ExtArgs>
    gameSubmission?: boolean | Membership$gameSubmissionArgs<ExtArgs>
    hotelRoom?: boolean | HotelRoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | Membership$transactionsArgs<ExtArgs>
    _count?: boolean | MembershipCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["membership"]>

  export type MembershipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    arrivalDate?: boolean
    attendance?: boolean
    attending?: boolean
    departureDate?: boolean
    hotelRoomId?: boolean
    interestLevel?: boolean
    message?: boolean
    roomPreferenceAndNotes?: boolean
    roomingPreferences?: boolean
    roomingWith?: boolean
    userId?: boolean
    volunteer?: boolean
    year?: boolean
    offerSubsidy?: boolean
    requestOldPrice?: boolean
    slotsAttending?: boolean
    hotelRoom?: boolean | HotelRoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["membership"]>

  export type MembershipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    arrivalDate?: boolean
    attendance?: boolean
    attending?: boolean
    departureDate?: boolean
    hotelRoomId?: boolean
    interestLevel?: boolean
    message?: boolean
    roomPreferenceAndNotes?: boolean
    roomingPreferences?: boolean
    roomingWith?: boolean
    userId?: boolean
    volunteer?: boolean
    year?: boolean
    offerSubsidy?: boolean
    requestOldPrice?: boolean
    slotsAttending?: boolean
    hotelRoom?: boolean | HotelRoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["membership"]>

  export type MembershipSelectScalar = {
    id?: boolean
    arrivalDate?: boolean
    attendance?: boolean
    attending?: boolean
    departureDate?: boolean
    hotelRoomId?: boolean
    interestLevel?: boolean
    message?: boolean
    roomPreferenceAndNotes?: boolean
    roomingPreferences?: boolean
    roomingWith?: boolean
    userId?: boolean
    volunteer?: boolean
    year?: boolean
    offerSubsidy?: boolean
    requestOldPrice?: boolean
    slotsAttending?: boolean
  }

  export type MembershipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "arrivalDate" | "attendance" | "attending" | "departureDate" | "hotelRoomId" | "interestLevel" | "message" | "roomPreferenceAndNotes" | "roomingPreferences" | "roomingWith" | "userId" | "volunteer" | "year" | "offerSubsidy" | "requestOldPrice" | "slotsAttending", ExtArgs["result"]["membership"]>
  export type MembershipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameAssignment?: boolean | Membership$gameAssignmentArgs<ExtArgs>
    gameChoice?: boolean | Membership$gameChoiceArgs<ExtArgs>
    gameSubmission?: boolean | Membership$gameSubmissionArgs<ExtArgs>
    hotelRoom?: boolean | HotelRoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | Membership$transactionsArgs<ExtArgs>
    _count?: boolean | MembershipCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MembershipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hotelRoom?: boolean | HotelRoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MembershipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hotelRoom?: boolean | HotelRoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MembershipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Membership"
    objects: {
      gameAssignment: Prisma.$GameAssignmentPayload<ExtArgs>[]
      gameChoice: Prisma.$GameChoicePayload<ExtArgs>[]
      gameSubmission: Prisma.$GameSubmissionPayload<ExtArgs>[]
      hotelRoom: Prisma.$HotelRoomPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      transactions: Prisma.$TransactionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      arrivalDate: Date
      attendance: string
      attending: boolean
      departureDate: Date
      hotelRoomId: number
      interestLevel: string
      message: string
      roomPreferenceAndNotes: string
      roomingPreferences: string
      roomingWith: string
      userId: number
      volunteer: boolean
      year: number
      offerSubsidy: boolean
      requestOldPrice: boolean
      slotsAttending: string | null
    }, ExtArgs["result"]["membership"]>
    composites: {}
  }

  type MembershipGetPayload<S extends boolean | null | undefined | MembershipDefaultArgs> = $Result.GetResult<Prisma.$MembershipPayload, S>

  type MembershipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MembershipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MembershipCountAggregateInputType | true
    }

  export interface MembershipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Membership'], meta: { name: 'Membership' } }
    /**
     * Find zero or one Membership that matches the filter.
     * @param {MembershipFindUniqueArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MembershipFindUniqueArgs>(args: SelectSubset<T, MembershipFindUniqueArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Membership that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MembershipFindUniqueOrThrowArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MembershipFindUniqueOrThrowArgs>(args: SelectSubset<T, MembershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Membership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipFindFirstArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MembershipFindFirstArgs>(args?: SelectSubset<T, MembershipFindFirstArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Membership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipFindFirstOrThrowArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MembershipFindFirstOrThrowArgs>(args?: SelectSubset<T, MembershipFindFirstOrThrowArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Memberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Memberships
     * const memberships = await prisma.membership.findMany()
     * 
     * // Get first 10 Memberships
     * const memberships = await prisma.membership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const membershipWithIdOnly = await prisma.membership.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MembershipFindManyArgs>(args?: SelectSubset<T, MembershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Membership.
     * @param {MembershipCreateArgs} args - Arguments to create a Membership.
     * @example
     * // Create one Membership
     * const Membership = await prisma.membership.create({
     *   data: {
     *     // ... data to create a Membership
     *   }
     * })
     * 
     */
    create<T extends MembershipCreateArgs>(args: SelectSubset<T, MembershipCreateArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Memberships.
     * @param {MembershipCreateManyArgs} args - Arguments to create many Memberships.
     * @example
     * // Create many Memberships
     * const membership = await prisma.membership.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MembershipCreateManyArgs>(args?: SelectSubset<T, MembershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Memberships and returns the data saved in the database.
     * @param {MembershipCreateManyAndReturnArgs} args - Arguments to create many Memberships.
     * @example
     * // Create many Memberships
     * const membership = await prisma.membership.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Memberships and only return the `id`
     * const membershipWithIdOnly = await prisma.membership.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MembershipCreateManyAndReturnArgs>(args?: SelectSubset<T, MembershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Membership.
     * @param {MembershipDeleteArgs} args - Arguments to delete one Membership.
     * @example
     * // Delete one Membership
     * const Membership = await prisma.membership.delete({
     *   where: {
     *     // ... filter to delete one Membership
     *   }
     * })
     * 
     */
    delete<T extends MembershipDeleteArgs>(args: SelectSubset<T, MembershipDeleteArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Membership.
     * @param {MembershipUpdateArgs} args - Arguments to update one Membership.
     * @example
     * // Update one Membership
     * const membership = await prisma.membership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MembershipUpdateArgs>(args: SelectSubset<T, MembershipUpdateArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Memberships.
     * @param {MembershipDeleteManyArgs} args - Arguments to filter Memberships to delete.
     * @example
     * // Delete a few Memberships
     * const { count } = await prisma.membership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MembershipDeleteManyArgs>(args?: SelectSubset<T, MembershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Memberships
     * const membership = await prisma.membership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MembershipUpdateManyArgs>(args: SelectSubset<T, MembershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Memberships and returns the data updated in the database.
     * @param {MembershipUpdateManyAndReturnArgs} args - Arguments to update many Memberships.
     * @example
     * // Update many Memberships
     * const membership = await prisma.membership.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Memberships and only return the `id`
     * const membershipWithIdOnly = await prisma.membership.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MembershipUpdateManyAndReturnArgs>(args: SelectSubset<T, MembershipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Membership.
     * @param {MembershipUpsertArgs} args - Arguments to update or create a Membership.
     * @example
     * // Update or create a Membership
     * const membership = await prisma.membership.upsert({
     *   create: {
     *     // ... data to create a Membership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Membership we want to update
     *   }
     * })
     */
    upsert<T extends MembershipUpsertArgs>(args: SelectSubset<T, MembershipUpsertArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipCountArgs} args - Arguments to filter Memberships to count.
     * @example
     * // Count the number of Memberships
     * const count = await prisma.membership.count({
     *   where: {
     *     // ... the filter for the Memberships we want to count
     *   }
     * })
    **/
    count<T extends MembershipCountArgs>(
      args?: Subset<T, MembershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MembershipAggregateArgs>(args: Subset<T, MembershipAggregateArgs>): Prisma.PrismaPromise<GetMembershipAggregateType<T>>

    /**
     * Group by Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MembershipGroupByArgs['orderBy'] }
        : { orderBy?: MembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Membership model
   */
  readonly fields: MembershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Membership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MembershipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gameAssignment<T extends Membership$gameAssignmentArgs<ExtArgs> = {}>(args?: Subset<T, Membership$gameAssignmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gameChoice<T extends Membership$gameChoiceArgs<ExtArgs> = {}>(args?: Subset<T, Membership$gameChoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gameSubmission<T extends Membership$gameSubmissionArgs<ExtArgs> = {}>(args?: Subset<T, Membership$gameSubmissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    hotelRoom<T extends HotelRoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HotelRoomDefaultArgs<ExtArgs>>): Prisma__HotelRoomClient<$Result.GetResult<Prisma.$HotelRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions<T extends Membership$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Membership$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Membership model
   */
  interface MembershipFieldRefs {
    readonly id: FieldRef<"Membership", 'Int'>
    readonly arrivalDate: FieldRef<"Membership", 'DateTime'>
    readonly attendance: FieldRef<"Membership", 'String'>
    readonly attending: FieldRef<"Membership", 'Boolean'>
    readonly departureDate: FieldRef<"Membership", 'DateTime'>
    readonly hotelRoomId: FieldRef<"Membership", 'Int'>
    readonly interestLevel: FieldRef<"Membership", 'String'>
    readonly message: FieldRef<"Membership", 'String'>
    readonly roomPreferenceAndNotes: FieldRef<"Membership", 'String'>
    readonly roomingPreferences: FieldRef<"Membership", 'String'>
    readonly roomingWith: FieldRef<"Membership", 'String'>
    readonly userId: FieldRef<"Membership", 'Int'>
    readonly volunteer: FieldRef<"Membership", 'Boolean'>
    readonly year: FieldRef<"Membership", 'Int'>
    readonly offerSubsidy: FieldRef<"Membership", 'Boolean'>
    readonly requestOldPrice: FieldRef<"Membership", 'Boolean'>
    readonly slotsAttending: FieldRef<"Membership", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Membership findUnique
   */
  export type MembershipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    /**
     * Filter, which Membership to fetch.
     */
    where: MembershipWhereUniqueInput
  }

  /**
   * Membership findUniqueOrThrow
   */
  export type MembershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    /**
     * Filter, which Membership to fetch.
     */
    where: MembershipWhereUniqueInput
  }

  /**
   * Membership findFirst
   */
  export type MembershipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    /**
     * Filter, which Membership to fetch.
     */
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     */
    orderBy?: MembershipOrderByWithRelationInput | MembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Memberships.
     */
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Memberships.
     */
    distinct?: MembershipScalarFieldEnum | MembershipScalarFieldEnum[]
  }

  /**
   * Membership findFirstOrThrow
   */
  export type MembershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    /**
     * Filter, which Membership to fetch.
     */
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     */
    orderBy?: MembershipOrderByWithRelationInput | MembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Memberships.
     */
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Memberships.
     */
    distinct?: MembershipScalarFieldEnum | MembershipScalarFieldEnum[]
  }

  /**
   * Membership findMany
   */
  export type MembershipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    /**
     * Filter, which Memberships to fetch.
     */
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     */
    orderBy?: MembershipOrderByWithRelationInput | MembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Memberships.
     */
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     */
    skip?: number
    distinct?: MembershipScalarFieldEnum | MembershipScalarFieldEnum[]
  }

  /**
   * Membership create
   */
  export type MembershipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    /**
     * The data needed to create a Membership.
     */
    data: XOR<MembershipCreateInput, MembershipUncheckedCreateInput>
  }

  /**
   * Membership createMany
   */
  export type MembershipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Memberships.
     */
    data: MembershipCreateManyInput | MembershipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Membership createManyAndReturn
   */
  export type MembershipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * The data used to create many Memberships.
     */
    data: MembershipCreateManyInput | MembershipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Membership update
   */
  export type MembershipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    /**
     * The data needed to update a Membership.
     */
    data: XOR<MembershipUpdateInput, MembershipUncheckedUpdateInput>
    /**
     * Choose, which Membership to update.
     */
    where: MembershipWhereUniqueInput
  }

  /**
   * Membership updateMany
   */
  export type MembershipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Memberships.
     */
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyInput>
    /**
     * Filter which Memberships to update
     */
    where?: MembershipWhereInput
    /**
     * Limit how many Memberships to update.
     */
    limit?: number
  }

  /**
   * Membership updateManyAndReturn
   */
  export type MembershipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * The data used to update Memberships.
     */
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyInput>
    /**
     * Filter which Memberships to update
     */
    where?: MembershipWhereInput
    /**
     * Limit how many Memberships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Membership upsert
   */
  export type MembershipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    /**
     * The filter to search for the Membership to update in case it exists.
     */
    where: MembershipWhereUniqueInput
    /**
     * In case the Membership found by the `where` argument doesn't exist, create a new Membership with this data.
     */
    create: XOR<MembershipCreateInput, MembershipUncheckedCreateInput>
    /**
     * In case the Membership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MembershipUpdateInput, MembershipUncheckedUpdateInput>
  }

  /**
   * Membership delete
   */
  export type MembershipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    /**
     * Filter which Membership to delete.
     */
    where: MembershipWhereUniqueInput
  }

  /**
   * Membership deleteMany
   */
  export type MembershipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Memberships to delete
     */
    where?: MembershipWhereInput
    /**
     * Limit how many Memberships to delete.
     */
    limit?: number
  }

  /**
   * Membership.gameAssignment
   */
  export type Membership$gameAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameAssignment
     */
    select?: GameAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameAssignment
     */
    omit?: GameAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameAssignmentInclude<ExtArgs> | null
    where?: GameAssignmentWhereInput
    orderBy?: GameAssignmentOrderByWithRelationInput | GameAssignmentOrderByWithRelationInput[]
    cursor?: GameAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameAssignmentScalarFieldEnum | GameAssignmentScalarFieldEnum[]
  }

  /**
   * Membership.gameChoice
   */
  export type Membership$gameChoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    where?: GameChoiceWhereInput
    orderBy?: GameChoiceOrderByWithRelationInput | GameChoiceOrderByWithRelationInput[]
    cursor?: GameChoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameChoiceScalarFieldEnum | GameChoiceScalarFieldEnum[]
  }

  /**
   * Membership.gameSubmission
   */
  export type Membership$gameSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSubmission
     */
    select?: GameSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameSubmission
     */
    omit?: GameSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSubmissionInclude<ExtArgs> | null
    where?: GameSubmissionWhereInput
    orderBy?: GameSubmissionOrderByWithRelationInput | GameSubmissionOrderByWithRelationInput[]
    cursor?: GameSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameSubmissionScalarFieldEnum | GameSubmissionScalarFieldEnum[]
  }

  /**
   * Membership.transactions
   */
  export type Membership$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    where?: TransactionsWhereInput
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    cursor?: TransactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * Membership without action
   */
  export type MembershipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    userId: number | null
    snailMailAddress: string | null
    phoneNumber: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    snailMailAddress: string | null
    phoneNumber: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    userId: number
    snailMailAddress: number
    phoneNumber: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    userId?: true
    snailMailAddress?: true
    phoneNumber?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    snailMailAddress?: true
    phoneNumber?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    userId?: true
    snailMailAddress?: true
    phoneNumber?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: number
    userId: number
    snailMailAddress: string | null
    phoneNumber: string | null
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    snailMailAddress?: boolean
    phoneNumber?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    snailMailAddress?: boolean
    phoneNumber?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    snailMailAddress?: boolean
    phoneNumber?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    snailMailAddress?: boolean
    phoneNumber?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "snailMailAddress" | "phoneNumber", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      snailMailAddress: string | null
      phoneNumber: string | null
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'Int'>
    readonly userId: FieldRef<"Profile", 'Int'>
    readonly snailMailAddress: FieldRef<"Profile", 'String'>
    readonly phoneNumber: FieldRef<"Profile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    authority: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    authority: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    authority: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    authority?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    authority?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    authority?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    authority: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authority?: boolean
    userRole?: boolean | Role$userRoleArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authority?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authority?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    authority?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "authority", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRole?: boolean | Role$userRoleArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      userRole: Prisma.$UserRolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      authority: string
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userRole<T extends Role$userRoleArgs<ExtArgs> = {}>(args?: Subset<T, Role$userRoleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly authority: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.userRole
   */
  export type Role$userRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Room
   */

  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    id: number | null
    size: number | null
  }

  export type RoomSumAggregateOutputType = {
    id: number | null
    size: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: number | null
    description: string | null
    size: number | null
    type: string | null
    updated: boolean | null
  }

  export type RoomMaxAggregateOutputType = {
    id: number | null
    description: string | null
    size: number | null
    type: string | null
    updated: boolean | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    description: number
    size: number
    type: number
    updated: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    id?: true
    size?: true
  }

  export type RoomSumAggregateInputType = {
    id?: true
    size?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    description?: true
    size?: true
    type?: true
    updated?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    description?: true
    size?: true
    type?: true
    updated?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    description?: true
    size?: true
    type?: true
    updated?: true
    _all?: true
  }

  export type RoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Room to aggregate.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithAggregationInput | RoomOrderByWithAggregationInput[]
    by: RoomScalarFieldEnum[] | RoomScalarFieldEnum
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }

  export type RoomGroupByOutputType = {
    id: number
    description: string
    size: number
    type: string
    updated: boolean
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    size?: boolean
    type?: boolean
    updated?: boolean
    game?: boolean | Room$gameArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    size?: boolean
    type?: boolean
    updated?: boolean
  }, ExtArgs["result"]["room"]>

  export type RoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    size?: boolean
    type?: boolean
    updated?: boolean
  }, ExtArgs["result"]["room"]>

  export type RoomSelectScalar = {
    id?: boolean
    description?: boolean
    size?: boolean
    type?: boolean
    updated?: boolean
  }

  export type RoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "size" | "type" | "updated", ExtArgs["result"]["room"]>
  export type RoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | Room$gameArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoomIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Room"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string
      size: number
      type: string
      updated: boolean
    }, ExtArgs["result"]["room"]>
    composites: {}
  }

  type RoomGetPayload<S extends boolean | null | undefined | RoomDefaultArgs> = $Result.GetResult<Prisma.$RoomPayload, S>

  type RoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomCountAggregateInputType | true
    }

  export interface RoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Room'], meta: { name: 'Room' } }
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomFindUniqueArgs>(args: SelectSubset<T, RoomFindUniqueArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Room that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomFindFirstArgs>(args?: SelectSubset<T, RoomFindFirstArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomFindManyArgs>(args?: SelectSubset<T, RoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
     */
    create<T extends RoomCreateArgs>(args: SelectSubset<T, RoomCreateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rooms.
     * @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomCreateManyArgs>(args?: SelectSubset<T, RoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rooms and returns the data saved in the database.
     * @param {RoomCreateManyAndReturnArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
     */
    delete<T extends RoomDeleteArgs>(args: SelectSubset<T, RoomDeleteArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomUpdateArgs>(args: SelectSubset<T, RoomUpdateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomDeleteManyArgs>(args?: SelectSubset<T, RoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomUpdateManyArgs>(args: SelectSubset<T, RoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms and returns the data updated in the database.
     * @param {RoomUpdateManyAndReturnArgs} args - Arguments to update many Rooms.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
     */
    upsert<T extends RoomUpsertArgs>(args: SelectSubset<T, RoomUpsertArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): Prisma.PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Room model
   */
  readonly fields: RoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends Room$gameArgs<ExtArgs> = {}>(args?: Subset<T, Room$gameArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Room model
   */
  interface RoomFieldRefs {
    readonly id: FieldRef<"Room", 'Int'>
    readonly description: FieldRef<"Room", 'String'>
    readonly size: FieldRef<"Room", 'Int'>
    readonly type: FieldRef<"Room", 'String'>
    readonly updated: FieldRef<"Room", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Room findUnique
   */
  export type RoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findFirst
   */
  export type RoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findMany
   */
  export type RoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Rooms to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room create
   */
  export type RoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to create a Room.
     */
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }

  /**
   * Room createMany
   */
  export type RoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Room createManyAndReturn
   */
  export type RoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Room update
   */
  export type RoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to update a Room.
     */
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
  }

  /**
   * Room updateManyAndReturn
   */
  export type RoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
  }

  /**
   * Room upsert
   */
  export type RoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The filter to search for the Room to update in case it exists.
     */
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     */
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }

  /**
   * Room delete
   */
  export type RoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter which Room to delete.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rooms to delete
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to delete.
     */
    limit?: number
  }

  /**
   * Room.game
   */
  export type Room$gameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Room without action
   */
  export type RoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
  }


  /**
   * Model Setting
   */

  export type AggregateSetting = {
    _count: SettingCountAggregateOutputType | null
    _avg: SettingAvgAggregateOutputType | null
    _sum: SettingSumAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  export type SettingAvgAggregateOutputType = {
    id: number | null
  }

  export type SettingSumAggregateOutputType = {
    id: number | null
  }

  export type SettingMinAggregateOutputType = {
    id: number | null
    code: string | null
    type: string | null
    value: string | null
  }

  export type SettingMaxAggregateOutputType = {
    id: number | null
    code: string | null
    type: string | null
    value: string | null
  }

  export type SettingCountAggregateOutputType = {
    id: number
    code: number
    type: number
    value: number
    _all: number
  }


  export type SettingAvgAggregateInputType = {
    id?: true
  }

  export type SettingSumAggregateInputType = {
    id?: true
  }

  export type SettingMinAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
  }

  export type SettingMaxAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
  }

  export type SettingCountAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
    _all?: true
  }

  export type SettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setting to aggregate.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SettingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SettingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingMaxAggregateInputType
  }

  export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetting[P]>
      : GetScalarType<T[P], AggregateSetting[P]>
  }




  export type SettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingWhereInput
    orderBy?: SettingOrderByWithAggregationInput | SettingOrderByWithAggregationInput[]
    by: SettingScalarFieldEnum[] | SettingScalarFieldEnum
    having?: SettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingCountAggregateInputType | true
    _avg?: SettingAvgAggregateInputType
    _sum?: SettingSumAggregateInputType
    _min?: SettingMinAggregateInputType
    _max?: SettingMaxAggregateInputType
  }

  export type SettingGroupByOutputType = {
    id: number
    code: string
    type: string
    value: string
    _count: SettingCountAggregateOutputType | null
    _avg: SettingAvgAggregateOutputType | null
    _sum: SettingSumAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  type GetSettingGroupByPayload<T extends SettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingGroupByOutputType[P]>
            : GetScalarType<T[P], SettingGroupByOutputType[P]>
        }
      >
    >


  export type SettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    type?: boolean
    value?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    type?: boolean
    value?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    type?: boolean
    value?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectScalar = {
    id?: boolean
    code?: boolean
    type?: boolean
    value?: boolean
  }

  export type SettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "type" | "value", ExtArgs["result"]["setting"]>

  export type $SettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      type: string
      value: string
    }, ExtArgs["result"]["setting"]>
    composites: {}
  }

  type SettingGetPayload<S extends boolean | null | undefined | SettingDefaultArgs> = $Result.GetResult<Prisma.$SettingPayload, S>

  type SettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SettingCountAggregateInputType | true
    }

  export interface SettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setting'], meta: { name: 'Setting' } }
    /**
     * Find zero or one Setting that matches the filter.
     * @param {SettingFindUniqueArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingFindUniqueArgs>(args: SelectSubset<T, SettingFindUniqueArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Setting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SettingFindUniqueOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Setting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingFindFirstArgs>(args?: SelectSubset<T, SettingFindFirstArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Setting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.setting.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.setting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingWithIdOnly = await prisma.setting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingFindManyArgs>(args?: SelectSubset<T, SettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Setting.
     * @param {SettingCreateArgs} args - Arguments to create a Setting.
     * @example
     * // Create one Setting
     * const Setting = await prisma.setting.create({
     *   data: {
     *     // ... data to create a Setting
     *   }
     * })
     * 
     */
    create<T extends SettingCreateArgs>(args: SelectSubset<T, SettingCreateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Settings.
     * @param {SettingCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingCreateManyArgs>(args?: SelectSubset<T, SettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Settings and returns the data saved in the database.
     * @param {SettingCreateManyAndReturnArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Settings and only return the `id`
     * const settingWithIdOnly = await prisma.setting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Setting.
     * @param {SettingDeleteArgs} args - Arguments to delete one Setting.
     * @example
     * // Delete one Setting
     * const Setting = await prisma.setting.delete({
     *   where: {
     *     // ... filter to delete one Setting
     *   }
     * })
     * 
     */
    delete<T extends SettingDeleteArgs>(args: SelectSubset<T, SettingDeleteArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Setting.
     * @param {SettingUpdateArgs} args - Arguments to update one Setting.
     * @example
     * // Update one Setting
     * const setting = await prisma.setting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingUpdateArgs>(args: SelectSubset<T, SettingUpdateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Settings.
     * @param {SettingDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.setting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingDeleteManyArgs>(args?: SelectSubset<T, SettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingUpdateManyArgs>(args: SelectSubset<T, SettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings and returns the data updated in the database.
     * @param {SettingUpdateManyAndReturnArgs} args - Arguments to update many Settings.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Settings and only return the `id`
     * const settingWithIdOnly = await prisma.setting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SettingUpdateManyAndReturnArgs>(args: SelectSubset<T, SettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Setting.
     * @param {SettingUpsertArgs} args - Arguments to update or create a Setting.
     * @example
     * // Update or create a Setting
     * const setting = await prisma.setting.upsert({
     *   create: {
     *     // ... data to create a Setting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setting we want to update
     *   }
     * })
     */
    upsert<T extends SettingUpsertArgs>(args: SelectSubset<T, SettingUpsertArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.setting.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingCountArgs>(
      args?: Subset<T, SettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingAggregateArgs>(args: Subset<T, SettingAggregateArgs>): Prisma.PrismaPromise<GetSettingAggregateType<T>>

    /**
     * Group by Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingGroupByArgs['orderBy'] }
        : { orderBy?: SettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setting model
   */
  readonly fields: SettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Setting model
   */
  interface SettingFieldRefs {
    readonly id: FieldRef<"Setting", 'Int'>
    readonly code: FieldRef<"Setting", 'String'>
    readonly type: FieldRef<"Setting", 'String'>
    readonly value: FieldRef<"Setting", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Setting findUnique
   */
  export type SettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findUniqueOrThrow
   */
  export type SettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findFirst
   */
  export type SettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findFirstOrThrow
   */
  export type SettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findMany
   */
  export type SettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting create
   */
  export type SettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The data needed to create a Setting.
     */
    data: XOR<SettingCreateInput, SettingUncheckedCreateInput>
  }

  /**
   * Setting createMany
   */
  export type SettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting createManyAndReturn
   */
  export type SettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting update
   */
  export type SettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The data needed to update a Setting.
     */
    data: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
    /**
     * Choose, which Setting to update.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting updateMany
   */
  export type SettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingUpdateManyMutationInput, SettingUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Setting updateManyAndReturn
   */
  export type SettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingUpdateManyMutationInput, SettingUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Setting upsert
   */
  export type SettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The filter to search for the Setting to update in case it exists.
     */
    where: SettingWhereUniqueInput
    /**
     * In case the Setting found by the `where` argument doesn't exist, create a new Setting with this data.
     */
    create: XOR<SettingCreateInput, SettingUncheckedCreateInput>
    /**
     * In case the Setting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
  }

  /**
   * Setting delete
   */
  export type SettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter which Setting to delete.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting deleteMany
   */
  export type SettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingWhereInput
    /**
     * Limit how many Settings to delete.
     */
    limit?: number
  }

  /**
   * Setting without action
   */
  export type SettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
  }


  /**
   * Model ShirtOrder
   */

  export type AggregateShirtOrder = {
    _count: ShirtOrderCountAggregateOutputType | null
    _avg: ShirtOrderAvgAggregateOutputType | null
    _sum: ShirtOrderSumAggregateOutputType | null
    _min: ShirtOrderMinAggregateOutputType | null
    _max: ShirtOrderMaxAggregateOutputType | null
  }

  export type ShirtOrderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    year: number | null
  }

  export type ShirtOrderSumAggregateOutputType = {
    id: number | null
    userId: number | null
    year: number | null
  }

  export type ShirtOrderMinAggregateOutputType = {
    id: number | null
    deliveryMethod: string | null
    message: string | null
    userId: number | null
    year: number | null
  }

  export type ShirtOrderMaxAggregateOutputType = {
    id: number | null
    deliveryMethod: string | null
    message: string | null
    userId: number | null
    year: number | null
  }

  export type ShirtOrderCountAggregateOutputType = {
    id: number
    deliveryMethod: number
    message: number
    userId: number
    year: number
    _all: number
  }


  export type ShirtOrderAvgAggregateInputType = {
    id?: true
    userId?: true
    year?: true
  }

  export type ShirtOrderSumAggregateInputType = {
    id?: true
    userId?: true
    year?: true
  }

  export type ShirtOrderMinAggregateInputType = {
    id?: true
    deliveryMethod?: true
    message?: true
    userId?: true
    year?: true
  }

  export type ShirtOrderMaxAggregateInputType = {
    id?: true
    deliveryMethod?: true
    message?: true
    userId?: true
    year?: true
  }

  export type ShirtOrderCountAggregateInputType = {
    id?: true
    deliveryMethod?: true
    message?: true
    userId?: true
    year?: true
    _all?: true
  }

  export type ShirtOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShirtOrder to aggregate.
     */
    where?: ShirtOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShirtOrders to fetch.
     */
    orderBy?: ShirtOrderOrderByWithRelationInput | ShirtOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShirtOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShirtOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShirtOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShirtOrders
    **/
    _count?: true | ShirtOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShirtOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShirtOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShirtOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShirtOrderMaxAggregateInputType
  }

  export type GetShirtOrderAggregateType<T extends ShirtOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateShirtOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShirtOrder[P]>
      : GetScalarType<T[P], AggregateShirtOrder[P]>
  }




  export type ShirtOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShirtOrderWhereInput
    orderBy?: ShirtOrderOrderByWithAggregationInput | ShirtOrderOrderByWithAggregationInput[]
    by: ShirtOrderScalarFieldEnum[] | ShirtOrderScalarFieldEnum
    having?: ShirtOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShirtOrderCountAggregateInputType | true
    _avg?: ShirtOrderAvgAggregateInputType
    _sum?: ShirtOrderSumAggregateInputType
    _min?: ShirtOrderMinAggregateInputType
    _max?: ShirtOrderMaxAggregateInputType
  }

  export type ShirtOrderGroupByOutputType = {
    id: number
    deliveryMethod: string
    message: string
    userId: number
    year: number
    _count: ShirtOrderCountAggregateOutputType | null
    _avg: ShirtOrderAvgAggregateOutputType | null
    _sum: ShirtOrderSumAggregateOutputType | null
    _min: ShirtOrderMinAggregateOutputType | null
    _max: ShirtOrderMaxAggregateOutputType | null
  }

  type GetShirtOrderGroupByPayload<T extends ShirtOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShirtOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShirtOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShirtOrderGroupByOutputType[P]>
            : GetScalarType<T[P], ShirtOrderGroupByOutputType[P]>
        }
      >
    >


  export type ShirtOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deliveryMethod?: boolean
    message?: boolean
    userId?: boolean
    year?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    shirtOrderItem?: boolean | ShirtOrder$shirtOrderItemArgs<ExtArgs>
    _count?: boolean | ShirtOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shirtOrder"]>

  export type ShirtOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deliveryMethod?: boolean
    message?: boolean
    userId?: boolean
    year?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shirtOrder"]>

  export type ShirtOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deliveryMethod?: boolean
    message?: boolean
    userId?: boolean
    year?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shirtOrder"]>

  export type ShirtOrderSelectScalar = {
    id?: boolean
    deliveryMethod?: boolean
    message?: boolean
    userId?: boolean
    year?: boolean
  }

  export type ShirtOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "deliveryMethod" | "message" | "userId" | "year", ExtArgs["result"]["shirtOrder"]>
  export type ShirtOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    shirtOrderItem?: boolean | ShirtOrder$shirtOrderItemArgs<ExtArgs>
    _count?: boolean | ShirtOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShirtOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ShirtOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ShirtOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShirtOrder"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      shirtOrderItem: Prisma.$ShirtOrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      deliveryMethod: string
      message: string
      userId: number
      year: number
    }, ExtArgs["result"]["shirtOrder"]>
    composites: {}
  }

  type ShirtOrderGetPayload<S extends boolean | null | undefined | ShirtOrderDefaultArgs> = $Result.GetResult<Prisma.$ShirtOrderPayload, S>

  type ShirtOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShirtOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShirtOrderCountAggregateInputType | true
    }

  export interface ShirtOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShirtOrder'], meta: { name: 'ShirtOrder' } }
    /**
     * Find zero or one ShirtOrder that matches the filter.
     * @param {ShirtOrderFindUniqueArgs} args - Arguments to find a ShirtOrder
     * @example
     * // Get one ShirtOrder
     * const shirtOrder = await prisma.shirtOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShirtOrderFindUniqueArgs>(args: SelectSubset<T, ShirtOrderFindUniqueArgs<ExtArgs>>): Prisma__ShirtOrderClient<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShirtOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShirtOrderFindUniqueOrThrowArgs} args - Arguments to find a ShirtOrder
     * @example
     * // Get one ShirtOrder
     * const shirtOrder = await prisma.shirtOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShirtOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, ShirtOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShirtOrderClient<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShirtOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderFindFirstArgs} args - Arguments to find a ShirtOrder
     * @example
     * // Get one ShirtOrder
     * const shirtOrder = await prisma.shirtOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShirtOrderFindFirstArgs>(args?: SelectSubset<T, ShirtOrderFindFirstArgs<ExtArgs>>): Prisma__ShirtOrderClient<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShirtOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderFindFirstOrThrowArgs} args - Arguments to find a ShirtOrder
     * @example
     * // Get one ShirtOrder
     * const shirtOrder = await prisma.shirtOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShirtOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, ShirtOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShirtOrderClient<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShirtOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShirtOrders
     * const shirtOrders = await prisma.shirtOrder.findMany()
     * 
     * // Get first 10 ShirtOrders
     * const shirtOrders = await prisma.shirtOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shirtOrderWithIdOnly = await prisma.shirtOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShirtOrderFindManyArgs>(args?: SelectSubset<T, ShirtOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShirtOrder.
     * @param {ShirtOrderCreateArgs} args - Arguments to create a ShirtOrder.
     * @example
     * // Create one ShirtOrder
     * const ShirtOrder = await prisma.shirtOrder.create({
     *   data: {
     *     // ... data to create a ShirtOrder
     *   }
     * })
     * 
     */
    create<T extends ShirtOrderCreateArgs>(args: SelectSubset<T, ShirtOrderCreateArgs<ExtArgs>>): Prisma__ShirtOrderClient<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShirtOrders.
     * @param {ShirtOrderCreateManyArgs} args - Arguments to create many ShirtOrders.
     * @example
     * // Create many ShirtOrders
     * const shirtOrder = await prisma.shirtOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShirtOrderCreateManyArgs>(args?: SelectSubset<T, ShirtOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShirtOrders and returns the data saved in the database.
     * @param {ShirtOrderCreateManyAndReturnArgs} args - Arguments to create many ShirtOrders.
     * @example
     * // Create many ShirtOrders
     * const shirtOrder = await prisma.shirtOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShirtOrders and only return the `id`
     * const shirtOrderWithIdOnly = await prisma.shirtOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShirtOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, ShirtOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShirtOrder.
     * @param {ShirtOrderDeleteArgs} args - Arguments to delete one ShirtOrder.
     * @example
     * // Delete one ShirtOrder
     * const ShirtOrder = await prisma.shirtOrder.delete({
     *   where: {
     *     // ... filter to delete one ShirtOrder
     *   }
     * })
     * 
     */
    delete<T extends ShirtOrderDeleteArgs>(args: SelectSubset<T, ShirtOrderDeleteArgs<ExtArgs>>): Prisma__ShirtOrderClient<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShirtOrder.
     * @param {ShirtOrderUpdateArgs} args - Arguments to update one ShirtOrder.
     * @example
     * // Update one ShirtOrder
     * const shirtOrder = await prisma.shirtOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShirtOrderUpdateArgs>(args: SelectSubset<T, ShirtOrderUpdateArgs<ExtArgs>>): Prisma__ShirtOrderClient<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShirtOrders.
     * @param {ShirtOrderDeleteManyArgs} args - Arguments to filter ShirtOrders to delete.
     * @example
     * // Delete a few ShirtOrders
     * const { count } = await prisma.shirtOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShirtOrderDeleteManyArgs>(args?: SelectSubset<T, ShirtOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShirtOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShirtOrders
     * const shirtOrder = await prisma.shirtOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShirtOrderUpdateManyArgs>(args: SelectSubset<T, ShirtOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShirtOrders and returns the data updated in the database.
     * @param {ShirtOrderUpdateManyAndReturnArgs} args - Arguments to update many ShirtOrders.
     * @example
     * // Update many ShirtOrders
     * const shirtOrder = await prisma.shirtOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShirtOrders and only return the `id`
     * const shirtOrderWithIdOnly = await prisma.shirtOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShirtOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, ShirtOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShirtOrder.
     * @param {ShirtOrderUpsertArgs} args - Arguments to update or create a ShirtOrder.
     * @example
     * // Update or create a ShirtOrder
     * const shirtOrder = await prisma.shirtOrder.upsert({
     *   create: {
     *     // ... data to create a ShirtOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShirtOrder we want to update
     *   }
     * })
     */
    upsert<T extends ShirtOrderUpsertArgs>(args: SelectSubset<T, ShirtOrderUpsertArgs<ExtArgs>>): Prisma__ShirtOrderClient<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShirtOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderCountArgs} args - Arguments to filter ShirtOrders to count.
     * @example
     * // Count the number of ShirtOrders
     * const count = await prisma.shirtOrder.count({
     *   where: {
     *     // ... the filter for the ShirtOrders we want to count
     *   }
     * })
    **/
    count<T extends ShirtOrderCountArgs>(
      args?: Subset<T, ShirtOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShirtOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShirtOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShirtOrderAggregateArgs>(args: Subset<T, ShirtOrderAggregateArgs>): Prisma.PrismaPromise<GetShirtOrderAggregateType<T>>

    /**
     * Group by ShirtOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShirtOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShirtOrderGroupByArgs['orderBy'] }
        : { orderBy?: ShirtOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShirtOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShirtOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShirtOrder model
   */
  readonly fields: ShirtOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShirtOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShirtOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    shirtOrderItem<T extends ShirtOrder$shirtOrderItemArgs<ExtArgs> = {}>(args?: Subset<T, ShirtOrder$shirtOrderItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShirtOrder model
   */
  interface ShirtOrderFieldRefs {
    readonly id: FieldRef<"ShirtOrder", 'Int'>
    readonly deliveryMethod: FieldRef<"ShirtOrder", 'String'>
    readonly message: FieldRef<"ShirtOrder", 'String'>
    readonly userId: FieldRef<"ShirtOrder", 'Int'>
    readonly year: FieldRef<"ShirtOrder", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ShirtOrder findUnique
   */
  export type ShirtOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderInclude<ExtArgs> | null
    /**
     * Filter, which ShirtOrder to fetch.
     */
    where: ShirtOrderWhereUniqueInput
  }

  /**
   * ShirtOrder findUniqueOrThrow
   */
  export type ShirtOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderInclude<ExtArgs> | null
    /**
     * Filter, which ShirtOrder to fetch.
     */
    where: ShirtOrderWhereUniqueInput
  }

  /**
   * ShirtOrder findFirst
   */
  export type ShirtOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderInclude<ExtArgs> | null
    /**
     * Filter, which ShirtOrder to fetch.
     */
    where?: ShirtOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShirtOrders to fetch.
     */
    orderBy?: ShirtOrderOrderByWithRelationInput | ShirtOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShirtOrders.
     */
    cursor?: ShirtOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShirtOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShirtOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShirtOrders.
     */
    distinct?: ShirtOrderScalarFieldEnum | ShirtOrderScalarFieldEnum[]
  }

  /**
   * ShirtOrder findFirstOrThrow
   */
  export type ShirtOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderInclude<ExtArgs> | null
    /**
     * Filter, which ShirtOrder to fetch.
     */
    where?: ShirtOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShirtOrders to fetch.
     */
    orderBy?: ShirtOrderOrderByWithRelationInput | ShirtOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShirtOrders.
     */
    cursor?: ShirtOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShirtOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShirtOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShirtOrders.
     */
    distinct?: ShirtOrderScalarFieldEnum | ShirtOrderScalarFieldEnum[]
  }

  /**
   * ShirtOrder findMany
   */
  export type ShirtOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderInclude<ExtArgs> | null
    /**
     * Filter, which ShirtOrders to fetch.
     */
    where?: ShirtOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShirtOrders to fetch.
     */
    orderBy?: ShirtOrderOrderByWithRelationInput | ShirtOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShirtOrders.
     */
    cursor?: ShirtOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShirtOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShirtOrders.
     */
    skip?: number
    distinct?: ShirtOrderScalarFieldEnum | ShirtOrderScalarFieldEnum[]
  }

  /**
   * ShirtOrder create
   */
  export type ShirtOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a ShirtOrder.
     */
    data: XOR<ShirtOrderCreateInput, ShirtOrderUncheckedCreateInput>
  }

  /**
   * ShirtOrder createMany
   */
  export type ShirtOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShirtOrders.
     */
    data: ShirtOrderCreateManyInput | ShirtOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShirtOrder createManyAndReturn
   */
  export type ShirtOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * The data used to create many ShirtOrders.
     */
    data: ShirtOrderCreateManyInput | ShirtOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShirtOrder update
   */
  export type ShirtOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a ShirtOrder.
     */
    data: XOR<ShirtOrderUpdateInput, ShirtOrderUncheckedUpdateInput>
    /**
     * Choose, which ShirtOrder to update.
     */
    where: ShirtOrderWhereUniqueInput
  }

  /**
   * ShirtOrder updateMany
   */
  export type ShirtOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShirtOrders.
     */
    data: XOR<ShirtOrderUpdateManyMutationInput, ShirtOrderUncheckedUpdateManyInput>
    /**
     * Filter which ShirtOrders to update
     */
    where?: ShirtOrderWhereInput
    /**
     * Limit how many ShirtOrders to update.
     */
    limit?: number
  }

  /**
   * ShirtOrder updateManyAndReturn
   */
  export type ShirtOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * The data used to update ShirtOrders.
     */
    data: XOR<ShirtOrderUpdateManyMutationInput, ShirtOrderUncheckedUpdateManyInput>
    /**
     * Filter which ShirtOrders to update
     */
    where?: ShirtOrderWhereInput
    /**
     * Limit how many ShirtOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShirtOrder upsert
   */
  export type ShirtOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the ShirtOrder to update in case it exists.
     */
    where: ShirtOrderWhereUniqueInput
    /**
     * In case the ShirtOrder found by the `where` argument doesn't exist, create a new ShirtOrder with this data.
     */
    create: XOR<ShirtOrderCreateInput, ShirtOrderUncheckedCreateInput>
    /**
     * In case the ShirtOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShirtOrderUpdateInput, ShirtOrderUncheckedUpdateInput>
  }

  /**
   * ShirtOrder delete
   */
  export type ShirtOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderInclude<ExtArgs> | null
    /**
     * Filter which ShirtOrder to delete.
     */
    where: ShirtOrderWhereUniqueInput
  }

  /**
   * ShirtOrder deleteMany
   */
  export type ShirtOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShirtOrders to delete
     */
    where?: ShirtOrderWhereInput
    /**
     * Limit how many ShirtOrders to delete.
     */
    limit?: number
  }

  /**
   * ShirtOrder.shirtOrderItem
   */
  export type ShirtOrder$shirtOrderItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemInclude<ExtArgs> | null
    where?: ShirtOrderItemWhereInput
    orderBy?: ShirtOrderItemOrderByWithRelationInput | ShirtOrderItemOrderByWithRelationInput[]
    cursor?: ShirtOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShirtOrderItemScalarFieldEnum | ShirtOrderItemScalarFieldEnum[]
  }

  /**
   * ShirtOrder without action
   */
  export type ShirtOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderInclude<ExtArgs> | null
  }


  /**
   * Model ShirtOrderItem
   */

  export type AggregateShirtOrderItem = {
    _count: ShirtOrderItemCountAggregateOutputType | null
    _avg: ShirtOrderItemAvgAggregateOutputType | null
    _sum: ShirtOrderItemSumAggregateOutputType | null
    _min: ShirtOrderItemMinAggregateOutputType | null
    _max: ShirtOrderItemMaxAggregateOutputType | null
  }

  export type ShirtOrderItemAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    quantity: number | null
    itemsIdx: number | null
  }

  export type ShirtOrderItemSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    quantity: number | null
    itemsIdx: number | null
  }

  export type ShirtOrderItemMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    quantity: number | null
    size: string | null
    style: string | null
    itemsIdx: number | null
  }

  export type ShirtOrderItemMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    quantity: number | null
    size: string | null
    style: string | null
    itemsIdx: number | null
  }

  export type ShirtOrderItemCountAggregateOutputType = {
    id: number
    orderId: number
    quantity: number
    size: number
    style: number
    itemsIdx: number
    _all: number
  }


  export type ShirtOrderItemAvgAggregateInputType = {
    id?: true
    orderId?: true
    quantity?: true
    itemsIdx?: true
  }

  export type ShirtOrderItemSumAggregateInputType = {
    id?: true
    orderId?: true
    quantity?: true
    itemsIdx?: true
  }

  export type ShirtOrderItemMinAggregateInputType = {
    id?: true
    orderId?: true
    quantity?: true
    size?: true
    style?: true
    itemsIdx?: true
  }

  export type ShirtOrderItemMaxAggregateInputType = {
    id?: true
    orderId?: true
    quantity?: true
    size?: true
    style?: true
    itemsIdx?: true
  }

  export type ShirtOrderItemCountAggregateInputType = {
    id?: true
    orderId?: true
    quantity?: true
    size?: true
    style?: true
    itemsIdx?: true
    _all?: true
  }

  export type ShirtOrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShirtOrderItem to aggregate.
     */
    where?: ShirtOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShirtOrderItems to fetch.
     */
    orderBy?: ShirtOrderItemOrderByWithRelationInput | ShirtOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShirtOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShirtOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShirtOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShirtOrderItems
    **/
    _count?: true | ShirtOrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShirtOrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShirtOrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShirtOrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShirtOrderItemMaxAggregateInputType
  }

  export type GetShirtOrderItemAggregateType<T extends ShirtOrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateShirtOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShirtOrderItem[P]>
      : GetScalarType<T[P], AggregateShirtOrderItem[P]>
  }




  export type ShirtOrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShirtOrderItemWhereInput
    orderBy?: ShirtOrderItemOrderByWithAggregationInput | ShirtOrderItemOrderByWithAggregationInput[]
    by: ShirtOrderItemScalarFieldEnum[] | ShirtOrderItemScalarFieldEnum
    having?: ShirtOrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShirtOrderItemCountAggregateInputType | true
    _avg?: ShirtOrderItemAvgAggregateInputType
    _sum?: ShirtOrderItemSumAggregateInputType
    _min?: ShirtOrderItemMinAggregateInputType
    _max?: ShirtOrderItemMaxAggregateInputType
  }

  export type ShirtOrderItemGroupByOutputType = {
    id: number
    orderId: number
    quantity: number
    size: string
    style: string
    itemsIdx: number | null
    _count: ShirtOrderItemCountAggregateOutputType | null
    _avg: ShirtOrderItemAvgAggregateOutputType | null
    _sum: ShirtOrderItemSumAggregateOutputType | null
    _min: ShirtOrderItemMinAggregateOutputType | null
    _max: ShirtOrderItemMaxAggregateOutputType | null
  }

  type GetShirtOrderItemGroupByPayload<T extends ShirtOrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShirtOrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShirtOrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShirtOrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], ShirtOrderItemGroupByOutputType[P]>
        }
      >
    >


  export type ShirtOrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    quantity?: boolean
    size?: boolean
    style?: boolean
    itemsIdx?: boolean
    shirtOrder?: boolean | ShirtOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shirtOrderItem"]>

  export type ShirtOrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    quantity?: boolean
    size?: boolean
    style?: boolean
    itemsIdx?: boolean
    shirtOrder?: boolean | ShirtOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shirtOrderItem"]>

  export type ShirtOrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    quantity?: boolean
    size?: boolean
    style?: boolean
    itemsIdx?: boolean
    shirtOrder?: boolean | ShirtOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shirtOrderItem"]>

  export type ShirtOrderItemSelectScalar = {
    id?: boolean
    orderId?: boolean
    quantity?: boolean
    size?: boolean
    style?: boolean
    itemsIdx?: boolean
  }

  export type ShirtOrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "quantity" | "size" | "style" | "itemsIdx", ExtArgs["result"]["shirtOrderItem"]>
  export type ShirtOrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shirtOrder?: boolean | ShirtOrderDefaultArgs<ExtArgs>
  }
  export type ShirtOrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shirtOrder?: boolean | ShirtOrderDefaultArgs<ExtArgs>
  }
  export type ShirtOrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shirtOrder?: boolean | ShirtOrderDefaultArgs<ExtArgs>
  }

  export type $ShirtOrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShirtOrderItem"
    objects: {
      shirtOrder: Prisma.$ShirtOrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number
      quantity: number
      size: string
      style: string
      itemsIdx: number | null
    }, ExtArgs["result"]["shirtOrderItem"]>
    composites: {}
  }

  type ShirtOrderItemGetPayload<S extends boolean | null | undefined | ShirtOrderItemDefaultArgs> = $Result.GetResult<Prisma.$ShirtOrderItemPayload, S>

  type ShirtOrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShirtOrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShirtOrderItemCountAggregateInputType | true
    }

  export interface ShirtOrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShirtOrderItem'], meta: { name: 'ShirtOrderItem' } }
    /**
     * Find zero or one ShirtOrderItem that matches the filter.
     * @param {ShirtOrderItemFindUniqueArgs} args - Arguments to find a ShirtOrderItem
     * @example
     * // Get one ShirtOrderItem
     * const shirtOrderItem = await prisma.shirtOrderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShirtOrderItemFindUniqueArgs>(args: SelectSubset<T, ShirtOrderItemFindUniqueArgs<ExtArgs>>): Prisma__ShirtOrderItemClient<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShirtOrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShirtOrderItemFindUniqueOrThrowArgs} args - Arguments to find a ShirtOrderItem
     * @example
     * // Get one ShirtOrderItem
     * const shirtOrderItem = await prisma.shirtOrderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShirtOrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ShirtOrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShirtOrderItemClient<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShirtOrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderItemFindFirstArgs} args - Arguments to find a ShirtOrderItem
     * @example
     * // Get one ShirtOrderItem
     * const shirtOrderItem = await prisma.shirtOrderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShirtOrderItemFindFirstArgs>(args?: SelectSubset<T, ShirtOrderItemFindFirstArgs<ExtArgs>>): Prisma__ShirtOrderItemClient<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShirtOrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderItemFindFirstOrThrowArgs} args - Arguments to find a ShirtOrderItem
     * @example
     * // Get one ShirtOrderItem
     * const shirtOrderItem = await prisma.shirtOrderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShirtOrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ShirtOrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShirtOrderItemClient<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShirtOrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShirtOrderItems
     * const shirtOrderItems = await prisma.shirtOrderItem.findMany()
     * 
     * // Get first 10 ShirtOrderItems
     * const shirtOrderItems = await prisma.shirtOrderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shirtOrderItemWithIdOnly = await prisma.shirtOrderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShirtOrderItemFindManyArgs>(args?: SelectSubset<T, ShirtOrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShirtOrderItem.
     * @param {ShirtOrderItemCreateArgs} args - Arguments to create a ShirtOrderItem.
     * @example
     * // Create one ShirtOrderItem
     * const ShirtOrderItem = await prisma.shirtOrderItem.create({
     *   data: {
     *     // ... data to create a ShirtOrderItem
     *   }
     * })
     * 
     */
    create<T extends ShirtOrderItemCreateArgs>(args: SelectSubset<T, ShirtOrderItemCreateArgs<ExtArgs>>): Prisma__ShirtOrderItemClient<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShirtOrderItems.
     * @param {ShirtOrderItemCreateManyArgs} args - Arguments to create many ShirtOrderItems.
     * @example
     * // Create many ShirtOrderItems
     * const shirtOrderItem = await prisma.shirtOrderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShirtOrderItemCreateManyArgs>(args?: SelectSubset<T, ShirtOrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShirtOrderItems and returns the data saved in the database.
     * @param {ShirtOrderItemCreateManyAndReturnArgs} args - Arguments to create many ShirtOrderItems.
     * @example
     * // Create many ShirtOrderItems
     * const shirtOrderItem = await prisma.shirtOrderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShirtOrderItems and only return the `id`
     * const shirtOrderItemWithIdOnly = await prisma.shirtOrderItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShirtOrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ShirtOrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShirtOrderItem.
     * @param {ShirtOrderItemDeleteArgs} args - Arguments to delete one ShirtOrderItem.
     * @example
     * // Delete one ShirtOrderItem
     * const ShirtOrderItem = await prisma.shirtOrderItem.delete({
     *   where: {
     *     // ... filter to delete one ShirtOrderItem
     *   }
     * })
     * 
     */
    delete<T extends ShirtOrderItemDeleteArgs>(args: SelectSubset<T, ShirtOrderItemDeleteArgs<ExtArgs>>): Prisma__ShirtOrderItemClient<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShirtOrderItem.
     * @param {ShirtOrderItemUpdateArgs} args - Arguments to update one ShirtOrderItem.
     * @example
     * // Update one ShirtOrderItem
     * const shirtOrderItem = await prisma.shirtOrderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShirtOrderItemUpdateArgs>(args: SelectSubset<T, ShirtOrderItemUpdateArgs<ExtArgs>>): Prisma__ShirtOrderItemClient<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShirtOrderItems.
     * @param {ShirtOrderItemDeleteManyArgs} args - Arguments to filter ShirtOrderItems to delete.
     * @example
     * // Delete a few ShirtOrderItems
     * const { count } = await prisma.shirtOrderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShirtOrderItemDeleteManyArgs>(args?: SelectSubset<T, ShirtOrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShirtOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShirtOrderItems
     * const shirtOrderItem = await prisma.shirtOrderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShirtOrderItemUpdateManyArgs>(args: SelectSubset<T, ShirtOrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShirtOrderItems and returns the data updated in the database.
     * @param {ShirtOrderItemUpdateManyAndReturnArgs} args - Arguments to update many ShirtOrderItems.
     * @example
     * // Update many ShirtOrderItems
     * const shirtOrderItem = await prisma.shirtOrderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShirtOrderItems and only return the `id`
     * const shirtOrderItemWithIdOnly = await prisma.shirtOrderItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShirtOrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, ShirtOrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShirtOrderItem.
     * @param {ShirtOrderItemUpsertArgs} args - Arguments to update or create a ShirtOrderItem.
     * @example
     * // Update or create a ShirtOrderItem
     * const shirtOrderItem = await prisma.shirtOrderItem.upsert({
     *   create: {
     *     // ... data to create a ShirtOrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShirtOrderItem we want to update
     *   }
     * })
     */
    upsert<T extends ShirtOrderItemUpsertArgs>(args: SelectSubset<T, ShirtOrderItemUpsertArgs<ExtArgs>>): Prisma__ShirtOrderItemClient<$Result.GetResult<Prisma.$ShirtOrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShirtOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderItemCountArgs} args - Arguments to filter ShirtOrderItems to count.
     * @example
     * // Count the number of ShirtOrderItems
     * const count = await prisma.shirtOrderItem.count({
     *   where: {
     *     // ... the filter for the ShirtOrderItems we want to count
     *   }
     * })
    **/
    count<T extends ShirtOrderItemCountArgs>(
      args?: Subset<T, ShirtOrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShirtOrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShirtOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShirtOrderItemAggregateArgs>(args: Subset<T, ShirtOrderItemAggregateArgs>): Prisma.PrismaPromise<GetShirtOrderItemAggregateType<T>>

    /**
     * Group by ShirtOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShirtOrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShirtOrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShirtOrderItemGroupByArgs['orderBy'] }
        : { orderBy?: ShirtOrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShirtOrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShirtOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShirtOrderItem model
   */
  readonly fields: ShirtOrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShirtOrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShirtOrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shirtOrder<T extends ShirtOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShirtOrderDefaultArgs<ExtArgs>>): Prisma__ShirtOrderClient<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShirtOrderItem model
   */
  interface ShirtOrderItemFieldRefs {
    readonly id: FieldRef<"ShirtOrderItem", 'Int'>
    readonly orderId: FieldRef<"ShirtOrderItem", 'Int'>
    readonly quantity: FieldRef<"ShirtOrderItem", 'Int'>
    readonly size: FieldRef<"ShirtOrderItem", 'String'>
    readonly style: FieldRef<"ShirtOrderItem", 'String'>
    readonly itemsIdx: FieldRef<"ShirtOrderItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ShirtOrderItem findUnique
   */
  export type ShirtOrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which ShirtOrderItem to fetch.
     */
    where: ShirtOrderItemWhereUniqueInput
  }

  /**
   * ShirtOrderItem findUniqueOrThrow
   */
  export type ShirtOrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which ShirtOrderItem to fetch.
     */
    where: ShirtOrderItemWhereUniqueInput
  }

  /**
   * ShirtOrderItem findFirst
   */
  export type ShirtOrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which ShirtOrderItem to fetch.
     */
    where?: ShirtOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShirtOrderItems to fetch.
     */
    orderBy?: ShirtOrderItemOrderByWithRelationInput | ShirtOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShirtOrderItems.
     */
    cursor?: ShirtOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShirtOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShirtOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShirtOrderItems.
     */
    distinct?: ShirtOrderItemScalarFieldEnum | ShirtOrderItemScalarFieldEnum[]
  }

  /**
   * ShirtOrderItem findFirstOrThrow
   */
  export type ShirtOrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which ShirtOrderItem to fetch.
     */
    where?: ShirtOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShirtOrderItems to fetch.
     */
    orderBy?: ShirtOrderItemOrderByWithRelationInput | ShirtOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShirtOrderItems.
     */
    cursor?: ShirtOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShirtOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShirtOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShirtOrderItems.
     */
    distinct?: ShirtOrderItemScalarFieldEnum | ShirtOrderItemScalarFieldEnum[]
  }

  /**
   * ShirtOrderItem findMany
   */
  export type ShirtOrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which ShirtOrderItems to fetch.
     */
    where?: ShirtOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShirtOrderItems to fetch.
     */
    orderBy?: ShirtOrderItemOrderByWithRelationInput | ShirtOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShirtOrderItems.
     */
    cursor?: ShirtOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShirtOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShirtOrderItems.
     */
    skip?: number
    distinct?: ShirtOrderItemScalarFieldEnum | ShirtOrderItemScalarFieldEnum[]
  }

  /**
   * ShirtOrderItem create
   */
  export type ShirtOrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ShirtOrderItem.
     */
    data: XOR<ShirtOrderItemCreateInput, ShirtOrderItemUncheckedCreateInput>
  }

  /**
   * ShirtOrderItem createMany
   */
  export type ShirtOrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShirtOrderItems.
     */
    data: ShirtOrderItemCreateManyInput | ShirtOrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShirtOrderItem createManyAndReturn
   */
  export type ShirtOrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many ShirtOrderItems.
     */
    data: ShirtOrderItemCreateManyInput | ShirtOrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShirtOrderItem update
   */
  export type ShirtOrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ShirtOrderItem.
     */
    data: XOR<ShirtOrderItemUpdateInput, ShirtOrderItemUncheckedUpdateInput>
    /**
     * Choose, which ShirtOrderItem to update.
     */
    where: ShirtOrderItemWhereUniqueInput
  }

  /**
   * ShirtOrderItem updateMany
   */
  export type ShirtOrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShirtOrderItems.
     */
    data: XOR<ShirtOrderItemUpdateManyMutationInput, ShirtOrderItemUncheckedUpdateManyInput>
    /**
     * Filter which ShirtOrderItems to update
     */
    where?: ShirtOrderItemWhereInput
    /**
     * Limit how many ShirtOrderItems to update.
     */
    limit?: number
  }

  /**
   * ShirtOrderItem updateManyAndReturn
   */
  export type ShirtOrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * The data used to update ShirtOrderItems.
     */
    data: XOR<ShirtOrderItemUpdateManyMutationInput, ShirtOrderItemUncheckedUpdateManyInput>
    /**
     * Filter which ShirtOrderItems to update
     */
    where?: ShirtOrderItemWhereInput
    /**
     * Limit how many ShirtOrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShirtOrderItem upsert
   */
  export type ShirtOrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ShirtOrderItem to update in case it exists.
     */
    where: ShirtOrderItemWhereUniqueInput
    /**
     * In case the ShirtOrderItem found by the `where` argument doesn't exist, create a new ShirtOrderItem with this data.
     */
    create: XOR<ShirtOrderItemCreateInput, ShirtOrderItemUncheckedCreateInput>
    /**
     * In case the ShirtOrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShirtOrderItemUpdateInput, ShirtOrderItemUncheckedUpdateInput>
  }

  /**
   * ShirtOrderItem delete
   */
  export type ShirtOrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemInclude<ExtArgs> | null
    /**
     * Filter which ShirtOrderItem to delete.
     */
    where: ShirtOrderItemWhereUniqueInput
  }

  /**
   * ShirtOrderItem deleteMany
   */
  export type ShirtOrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShirtOrderItems to delete
     */
    where?: ShirtOrderItemWhereInput
    /**
     * Limit how many ShirtOrderItems to delete.
     */
    limit?: number
  }

  /**
   * ShirtOrderItem without action
   */
  export type ShirtOrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrderItem
     */
    select?: ShirtOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrderItem
     */
    omit?: ShirtOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderItemInclude<ExtArgs> | null
  }


  /**
   * Model Slot
   */

  export type AggregateSlot = {
    _count: SlotCountAggregateOutputType | null
    _avg: SlotAvgAggregateOutputType | null
    _sum: SlotSumAggregateOutputType | null
    _min: SlotMinAggregateOutputType | null
    _max: SlotMaxAggregateOutputType | null
  }

  export type SlotAvgAggregateOutputType = {
    id: number | null
    slot: number | null
  }

  export type SlotSumAggregateOutputType = {
    id: number | null
    slot: number | null
  }

  export type SlotMinAggregateOutputType = {
    id: number | null
    slot: number | null
    day: string | null
    formattedDate: string | null
    length: string | null
    time: string | null
  }

  export type SlotMaxAggregateOutputType = {
    id: number | null
    slot: number | null
    day: string | null
    formattedDate: string | null
    length: string | null
    time: string | null
  }

  export type SlotCountAggregateOutputType = {
    id: number
    slot: number
    day: number
    formattedDate: number
    length: number
    time: number
    _all: number
  }


  export type SlotAvgAggregateInputType = {
    id?: true
    slot?: true
  }

  export type SlotSumAggregateInputType = {
    id?: true
    slot?: true
  }

  export type SlotMinAggregateInputType = {
    id?: true
    slot?: true
    day?: true
    formattedDate?: true
    length?: true
    time?: true
  }

  export type SlotMaxAggregateInputType = {
    id?: true
    slot?: true
    day?: true
    formattedDate?: true
    length?: true
    time?: true
  }

  export type SlotCountAggregateInputType = {
    id?: true
    slot?: true
    day?: true
    formattedDate?: true
    length?: true
    time?: true
    _all?: true
  }

  export type SlotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Slot to aggregate.
     */
    where?: SlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Slots to fetch.
     */
    orderBy?: SlotOrderByWithRelationInput | SlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Slots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Slots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Slots
    **/
    _count?: true | SlotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SlotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SlotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SlotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SlotMaxAggregateInputType
  }

  export type GetSlotAggregateType<T extends SlotAggregateArgs> = {
        [P in keyof T & keyof AggregateSlot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSlot[P]>
      : GetScalarType<T[P], AggregateSlot[P]>
  }




  export type SlotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SlotWhereInput
    orderBy?: SlotOrderByWithAggregationInput | SlotOrderByWithAggregationInput[]
    by: SlotScalarFieldEnum[] | SlotScalarFieldEnum
    having?: SlotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SlotCountAggregateInputType | true
    _avg?: SlotAvgAggregateInputType
    _sum?: SlotSumAggregateInputType
    _min?: SlotMinAggregateInputType
    _max?: SlotMaxAggregateInputType
  }

  export type SlotGroupByOutputType = {
    id: number
    slot: number
    day: string
    formattedDate: string
    length: string
    time: string
    _count: SlotCountAggregateOutputType | null
    _avg: SlotAvgAggregateOutputType | null
    _sum: SlotSumAggregateOutputType | null
    _min: SlotMinAggregateOutputType | null
    _max: SlotMaxAggregateOutputType | null
  }

  type GetSlotGroupByPayload<T extends SlotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SlotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SlotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SlotGroupByOutputType[P]>
            : GetScalarType<T[P], SlotGroupByOutputType[P]>
        }
      >
    >


  export type SlotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slot?: boolean
    day?: boolean
    formattedDate?: boolean
    length?: boolean
    time?: boolean
    game?: boolean | Slot$gameArgs<ExtArgs>
    gameChoice?: boolean | Slot$gameChoiceArgs<ExtArgs>
    _count?: boolean | SlotCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["slot"]>

  export type SlotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slot?: boolean
    day?: boolean
    formattedDate?: boolean
    length?: boolean
    time?: boolean
  }, ExtArgs["result"]["slot"]>

  export type SlotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slot?: boolean
    day?: boolean
    formattedDate?: boolean
    length?: boolean
    time?: boolean
  }, ExtArgs["result"]["slot"]>

  export type SlotSelectScalar = {
    id?: boolean
    slot?: boolean
    day?: boolean
    formattedDate?: boolean
    length?: boolean
    time?: boolean
  }

  export type SlotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slot" | "day" | "formattedDate" | "length" | "time", ExtArgs["result"]["slot"]>
  export type SlotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | Slot$gameArgs<ExtArgs>
    gameChoice?: boolean | Slot$gameChoiceArgs<ExtArgs>
    _count?: boolean | SlotCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SlotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SlotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SlotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Slot"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>[]
      gameChoice: Prisma.$GameChoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      slot: number
      day: string
      formattedDate: string
      length: string
      time: string
    }, ExtArgs["result"]["slot"]>
    composites: {}
  }

  type SlotGetPayload<S extends boolean | null | undefined | SlotDefaultArgs> = $Result.GetResult<Prisma.$SlotPayload, S>

  type SlotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SlotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SlotCountAggregateInputType | true
    }

  export interface SlotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Slot'], meta: { name: 'Slot' } }
    /**
     * Find zero or one Slot that matches the filter.
     * @param {SlotFindUniqueArgs} args - Arguments to find a Slot
     * @example
     * // Get one Slot
     * const slot = await prisma.slot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SlotFindUniqueArgs>(args: SelectSubset<T, SlotFindUniqueArgs<ExtArgs>>): Prisma__SlotClient<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Slot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SlotFindUniqueOrThrowArgs} args - Arguments to find a Slot
     * @example
     * // Get one Slot
     * const slot = await prisma.slot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SlotFindUniqueOrThrowArgs>(args: SelectSubset<T, SlotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SlotClient<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Slot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlotFindFirstArgs} args - Arguments to find a Slot
     * @example
     * // Get one Slot
     * const slot = await prisma.slot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SlotFindFirstArgs>(args?: SelectSubset<T, SlotFindFirstArgs<ExtArgs>>): Prisma__SlotClient<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Slot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlotFindFirstOrThrowArgs} args - Arguments to find a Slot
     * @example
     * // Get one Slot
     * const slot = await prisma.slot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SlotFindFirstOrThrowArgs>(args?: SelectSubset<T, SlotFindFirstOrThrowArgs<ExtArgs>>): Prisma__SlotClient<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Slots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Slots
     * const slots = await prisma.slot.findMany()
     * 
     * // Get first 10 Slots
     * const slots = await prisma.slot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const slotWithIdOnly = await prisma.slot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SlotFindManyArgs>(args?: SelectSubset<T, SlotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Slot.
     * @param {SlotCreateArgs} args - Arguments to create a Slot.
     * @example
     * // Create one Slot
     * const Slot = await prisma.slot.create({
     *   data: {
     *     // ... data to create a Slot
     *   }
     * })
     * 
     */
    create<T extends SlotCreateArgs>(args: SelectSubset<T, SlotCreateArgs<ExtArgs>>): Prisma__SlotClient<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Slots.
     * @param {SlotCreateManyArgs} args - Arguments to create many Slots.
     * @example
     * // Create many Slots
     * const slot = await prisma.slot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SlotCreateManyArgs>(args?: SelectSubset<T, SlotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Slots and returns the data saved in the database.
     * @param {SlotCreateManyAndReturnArgs} args - Arguments to create many Slots.
     * @example
     * // Create many Slots
     * const slot = await prisma.slot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Slots and only return the `id`
     * const slotWithIdOnly = await prisma.slot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SlotCreateManyAndReturnArgs>(args?: SelectSubset<T, SlotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Slot.
     * @param {SlotDeleteArgs} args - Arguments to delete one Slot.
     * @example
     * // Delete one Slot
     * const Slot = await prisma.slot.delete({
     *   where: {
     *     // ... filter to delete one Slot
     *   }
     * })
     * 
     */
    delete<T extends SlotDeleteArgs>(args: SelectSubset<T, SlotDeleteArgs<ExtArgs>>): Prisma__SlotClient<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Slot.
     * @param {SlotUpdateArgs} args - Arguments to update one Slot.
     * @example
     * // Update one Slot
     * const slot = await prisma.slot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SlotUpdateArgs>(args: SelectSubset<T, SlotUpdateArgs<ExtArgs>>): Prisma__SlotClient<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Slots.
     * @param {SlotDeleteManyArgs} args - Arguments to filter Slots to delete.
     * @example
     * // Delete a few Slots
     * const { count } = await prisma.slot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SlotDeleteManyArgs>(args?: SelectSubset<T, SlotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Slots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Slots
     * const slot = await prisma.slot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SlotUpdateManyArgs>(args: SelectSubset<T, SlotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Slots and returns the data updated in the database.
     * @param {SlotUpdateManyAndReturnArgs} args - Arguments to update many Slots.
     * @example
     * // Update many Slots
     * const slot = await prisma.slot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Slots and only return the `id`
     * const slotWithIdOnly = await prisma.slot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SlotUpdateManyAndReturnArgs>(args: SelectSubset<T, SlotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Slot.
     * @param {SlotUpsertArgs} args - Arguments to update or create a Slot.
     * @example
     * // Update or create a Slot
     * const slot = await prisma.slot.upsert({
     *   create: {
     *     // ... data to create a Slot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Slot we want to update
     *   }
     * })
     */
    upsert<T extends SlotUpsertArgs>(args: SelectSubset<T, SlotUpsertArgs<ExtArgs>>): Prisma__SlotClient<$Result.GetResult<Prisma.$SlotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Slots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlotCountArgs} args - Arguments to filter Slots to count.
     * @example
     * // Count the number of Slots
     * const count = await prisma.slot.count({
     *   where: {
     *     // ... the filter for the Slots we want to count
     *   }
     * })
    **/
    count<T extends SlotCountArgs>(
      args?: Subset<T, SlotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SlotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Slot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SlotAggregateArgs>(args: Subset<T, SlotAggregateArgs>): Prisma.PrismaPromise<GetSlotAggregateType<T>>

    /**
     * Group by Slot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SlotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SlotGroupByArgs['orderBy'] }
        : { orderBy?: SlotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SlotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSlotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Slot model
   */
  readonly fields: SlotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Slot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SlotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends Slot$gameArgs<ExtArgs> = {}>(args?: Subset<T, Slot$gameArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gameChoice<T extends Slot$gameChoiceArgs<ExtArgs> = {}>(args?: Subset<T, Slot$gameChoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Slot model
   */
  interface SlotFieldRefs {
    readonly id: FieldRef<"Slot", 'Int'>
    readonly slot: FieldRef<"Slot", 'Int'>
    readonly day: FieldRef<"Slot", 'String'>
    readonly formattedDate: FieldRef<"Slot", 'String'>
    readonly length: FieldRef<"Slot", 'String'>
    readonly time: FieldRef<"Slot", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Slot findUnique
   */
  export type SlotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlotInclude<ExtArgs> | null
    /**
     * Filter, which Slot to fetch.
     */
    where: SlotWhereUniqueInput
  }

  /**
   * Slot findUniqueOrThrow
   */
  export type SlotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlotInclude<ExtArgs> | null
    /**
     * Filter, which Slot to fetch.
     */
    where: SlotWhereUniqueInput
  }

  /**
   * Slot findFirst
   */
  export type SlotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlotInclude<ExtArgs> | null
    /**
     * Filter, which Slot to fetch.
     */
    where?: SlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Slots to fetch.
     */
    orderBy?: SlotOrderByWithRelationInput | SlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Slots.
     */
    cursor?: SlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Slots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Slots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Slots.
     */
    distinct?: SlotScalarFieldEnum | SlotScalarFieldEnum[]
  }

  /**
   * Slot findFirstOrThrow
   */
  export type SlotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlotInclude<ExtArgs> | null
    /**
     * Filter, which Slot to fetch.
     */
    where?: SlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Slots to fetch.
     */
    orderBy?: SlotOrderByWithRelationInput | SlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Slots.
     */
    cursor?: SlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Slots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Slots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Slots.
     */
    distinct?: SlotScalarFieldEnum | SlotScalarFieldEnum[]
  }

  /**
   * Slot findMany
   */
  export type SlotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlotInclude<ExtArgs> | null
    /**
     * Filter, which Slots to fetch.
     */
    where?: SlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Slots to fetch.
     */
    orderBy?: SlotOrderByWithRelationInput | SlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Slots.
     */
    cursor?: SlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Slots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Slots.
     */
    skip?: number
    distinct?: SlotScalarFieldEnum | SlotScalarFieldEnum[]
  }

  /**
   * Slot create
   */
  export type SlotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlotInclude<ExtArgs> | null
    /**
     * The data needed to create a Slot.
     */
    data: XOR<SlotCreateInput, SlotUncheckedCreateInput>
  }

  /**
   * Slot createMany
   */
  export type SlotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Slots.
     */
    data: SlotCreateManyInput | SlotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Slot createManyAndReturn
   */
  export type SlotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * The data used to create many Slots.
     */
    data: SlotCreateManyInput | SlotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Slot update
   */
  export type SlotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlotInclude<ExtArgs> | null
    /**
     * The data needed to update a Slot.
     */
    data: XOR<SlotUpdateInput, SlotUncheckedUpdateInput>
    /**
     * Choose, which Slot to update.
     */
    where: SlotWhereUniqueInput
  }

  /**
   * Slot updateMany
   */
  export type SlotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Slots.
     */
    data: XOR<SlotUpdateManyMutationInput, SlotUncheckedUpdateManyInput>
    /**
     * Filter which Slots to update
     */
    where?: SlotWhereInput
    /**
     * Limit how many Slots to update.
     */
    limit?: number
  }

  /**
   * Slot updateManyAndReturn
   */
  export type SlotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * The data used to update Slots.
     */
    data: XOR<SlotUpdateManyMutationInput, SlotUncheckedUpdateManyInput>
    /**
     * Filter which Slots to update
     */
    where?: SlotWhereInput
    /**
     * Limit how many Slots to update.
     */
    limit?: number
  }

  /**
   * Slot upsert
   */
  export type SlotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlotInclude<ExtArgs> | null
    /**
     * The filter to search for the Slot to update in case it exists.
     */
    where: SlotWhereUniqueInput
    /**
     * In case the Slot found by the `where` argument doesn't exist, create a new Slot with this data.
     */
    create: XOR<SlotCreateInput, SlotUncheckedCreateInput>
    /**
     * In case the Slot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SlotUpdateInput, SlotUncheckedUpdateInput>
  }

  /**
   * Slot delete
   */
  export type SlotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlotInclude<ExtArgs> | null
    /**
     * Filter which Slot to delete.
     */
    where: SlotWhereUniqueInput
  }

  /**
   * Slot deleteMany
   */
  export type SlotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Slots to delete
     */
    where?: SlotWhereInput
    /**
     * Limit how many Slots to delete.
     */
    limit?: number
  }

  /**
   * Slot.game
   */
  export type Slot$gameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Slot.gameChoice
   */
  export type Slot$gameChoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameChoice
     */
    select?: GameChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameChoice
     */
    omit?: GameChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameChoiceInclude<ExtArgs> | null
    where?: GameChoiceWhereInput
    orderBy?: GameChoiceOrderByWithRelationInput | GameChoiceOrderByWithRelationInput[]
    cursor?: GameChoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameChoiceScalarFieldEnum | GameChoiceScalarFieldEnum[]
  }

  /**
   * Slot without action
   */
  export type SlotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Slot
     */
    select?: SlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Slot
     */
    omit?: SlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlotInclude<ExtArgs> | null
  }


  /**
   * Model Stripe
   */

  export type AggregateStripe = {
    _count: StripeCountAggregateOutputType | null
    _avg: StripeAvgAggregateOutputType | null
    _sum: StripeSumAggregateOutputType | null
    _min: StripeMinAggregateOutputType | null
    _max: StripeMaxAggregateOutputType | null
  }

  export type StripeAvgAggregateOutputType = {
    id: number | null
  }

  export type StripeSumAggregateOutputType = {
    id: number | null
  }

  export type StripeMinAggregateOutputType = {
    id: number | null
  }

  export type StripeMaxAggregateOutputType = {
    id: number | null
  }

  export type StripeCountAggregateOutputType = {
    id: number
    data: number
    _all: number
  }


  export type StripeAvgAggregateInputType = {
    id?: true
  }

  export type StripeSumAggregateInputType = {
    id?: true
  }

  export type StripeMinAggregateInputType = {
    id?: true
  }

  export type StripeMaxAggregateInputType = {
    id?: true
  }

  export type StripeCountAggregateInputType = {
    id?: true
    data?: true
    _all?: true
  }

  export type StripeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stripe to aggregate.
     */
    where?: StripeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stripes to fetch.
     */
    orderBy?: StripeOrderByWithRelationInput | StripeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StripeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stripes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stripes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stripes
    **/
    _count?: true | StripeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StripeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StripeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StripeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StripeMaxAggregateInputType
  }

  export type GetStripeAggregateType<T extends StripeAggregateArgs> = {
        [P in keyof T & keyof AggregateStripe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStripe[P]>
      : GetScalarType<T[P], AggregateStripe[P]>
  }




  export type StripeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StripeWhereInput
    orderBy?: StripeOrderByWithAggregationInput | StripeOrderByWithAggregationInput[]
    by: StripeScalarFieldEnum[] | StripeScalarFieldEnum
    having?: StripeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StripeCountAggregateInputType | true
    _avg?: StripeAvgAggregateInputType
    _sum?: StripeSumAggregateInputType
    _min?: StripeMinAggregateInputType
    _max?: StripeMaxAggregateInputType
  }

  export type StripeGroupByOutputType = {
    id: number
    data: JsonValue
    _count: StripeCountAggregateOutputType | null
    _avg: StripeAvgAggregateOutputType | null
    _sum: StripeSumAggregateOutputType | null
    _min: StripeMinAggregateOutputType | null
    _max: StripeMaxAggregateOutputType | null
  }

  type GetStripeGroupByPayload<T extends StripeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StripeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StripeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StripeGroupByOutputType[P]>
            : GetScalarType<T[P], StripeGroupByOutputType[P]>
        }
      >
    >


  export type StripeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
  }, ExtArgs["result"]["stripe"]>

  export type StripeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
  }, ExtArgs["result"]["stripe"]>

  export type StripeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
  }, ExtArgs["result"]["stripe"]>

  export type StripeSelectScalar = {
    id?: boolean
    data?: boolean
  }

  export type StripeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "data", ExtArgs["result"]["stripe"]>

  export type $StripePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stripe"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      data: Prisma.JsonValue
    }, ExtArgs["result"]["stripe"]>
    composites: {}
  }

  type StripeGetPayload<S extends boolean | null | undefined | StripeDefaultArgs> = $Result.GetResult<Prisma.$StripePayload, S>

  type StripeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StripeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StripeCountAggregateInputType | true
    }

  export interface StripeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stripe'], meta: { name: 'Stripe' } }
    /**
     * Find zero or one Stripe that matches the filter.
     * @param {StripeFindUniqueArgs} args - Arguments to find a Stripe
     * @example
     * // Get one Stripe
     * const stripe = await prisma.stripe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StripeFindUniqueArgs>(args: SelectSubset<T, StripeFindUniqueArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Stripe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StripeFindUniqueOrThrowArgs} args - Arguments to find a Stripe
     * @example
     * // Get one Stripe
     * const stripe = await prisma.stripe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StripeFindUniqueOrThrowArgs>(args: SelectSubset<T, StripeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stripe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeFindFirstArgs} args - Arguments to find a Stripe
     * @example
     * // Get one Stripe
     * const stripe = await prisma.stripe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StripeFindFirstArgs>(args?: SelectSubset<T, StripeFindFirstArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stripe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeFindFirstOrThrowArgs} args - Arguments to find a Stripe
     * @example
     * // Get one Stripe
     * const stripe = await prisma.stripe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StripeFindFirstOrThrowArgs>(args?: SelectSubset<T, StripeFindFirstOrThrowArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stripes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stripes
     * const stripes = await prisma.stripe.findMany()
     * 
     * // Get first 10 Stripes
     * const stripes = await prisma.stripe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stripeWithIdOnly = await prisma.stripe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StripeFindManyArgs>(args?: SelectSubset<T, StripeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Stripe.
     * @param {StripeCreateArgs} args - Arguments to create a Stripe.
     * @example
     * // Create one Stripe
     * const Stripe = await prisma.stripe.create({
     *   data: {
     *     // ... data to create a Stripe
     *   }
     * })
     * 
     */
    create<T extends StripeCreateArgs>(args: SelectSubset<T, StripeCreateArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stripes.
     * @param {StripeCreateManyArgs} args - Arguments to create many Stripes.
     * @example
     * // Create many Stripes
     * const stripe = await prisma.stripe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StripeCreateManyArgs>(args?: SelectSubset<T, StripeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stripes and returns the data saved in the database.
     * @param {StripeCreateManyAndReturnArgs} args - Arguments to create many Stripes.
     * @example
     * // Create many Stripes
     * const stripe = await prisma.stripe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stripes and only return the `id`
     * const stripeWithIdOnly = await prisma.stripe.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StripeCreateManyAndReturnArgs>(args?: SelectSubset<T, StripeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Stripe.
     * @param {StripeDeleteArgs} args - Arguments to delete one Stripe.
     * @example
     * // Delete one Stripe
     * const Stripe = await prisma.stripe.delete({
     *   where: {
     *     // ... filter to delete one Stripe
     *   }
     * })
     * 
     */
    delete<T extends StripeDeleteArgs>(args: SelectSubset<T, StripeDeleteArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Stripe.
     * @param {StripeUpdateArgs} args - Arguments to update one Stripe.
     * @example
     * // Update one Stripe
     * const stripe = await prisma.stripe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StripeUpdateArgs>(args: SelectSubset<T, StripeUpdateArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stripes.
     * @param {StripeDeleteManyArgs} args - Arguments to filter Stripes to delete.
     * @example
     * // Delete a few Stripes
     * const { count } = await prisma.stripe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StripeDeleteManyArgs>(args?: SelectSubset<T, StripeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stripes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stripes
     * const stripe = await prisma.stripe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StripeUpdateManyArgs>(args: SelectSubset<T, StripeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stripes and returns the data updated in the database.
     * @param {StripeUpdateManyAndReturnArgs} args - Arguments to update many Stripes.
     * @example
     * // Update many Stripes
     * const stripe = await prisma.stripe.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stripes and only return the `id`
     * const stripeWithIdOnly = await prisma.stripe.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StripeUpdateManyAndReturnArgs>(args: SelectSubset<T, StripeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Stripe.
     * @param {StripeUpsertArgs} args - Arguments to update or create a Stripe.
     * @example
     * // Update or create a Stripe
     * const stripe = await prisma.stripe.upsert({
     *   create: {
     *     // ... data to create a Stripe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stripe we want to update
     *   }
     * })
     */
    upsert<T extends StripeUpsertArgs>(args: SelectSubset<T, StripeUpsertArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stripes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCountArgs} args - Arguments to filter Stripes to count.
     * @example
     * // Count the number of Stripes
     * const count = await prisma.stripe.count({
     *   where: {
     *     // ... the filter for the Stripes we want to count
     *   }
     * })
    **/
    count<T extends StripeCountArgs>(
      args?: Subset<T, StripeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StripeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stripe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StripeAggregateArgs>(args: Subset<T, StripeAggregateArgs>): Prisma.PrismaPromise<GetStripeAggregateType<T>>

    /**
     * Group by Stripe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StripeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StripeGroupByArgs['orderBy'] }
        : { orderBy?: StripeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StripeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStripeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stripe model
   */
  readonly fields: StripeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stripe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StripeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stripe model
   */
  interface StripeFieldRefs {
    readonly id: FieldRef<"Stripe", 'Int'>
    readonly data: FieldRef<"Stripe", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Stripe findUnique
   */
  export type StripeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Filter, which Stripe to fetch.
     */
    where: StripeWhereUniqueInput
  }

  /**
   * Stripe findUniqueOrThrow
   */
  export type StripeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Filter, which Stripe to fetch.
     */
    where: StripeWhereUniqueInput
  }

  /**
   * Stripe findFirst
   */
  export type StripeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Filter, which Stripe to fetch.
     */
    where?: StripeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stripes to fetch.
     */
    orderBy?: StripeOrderByWithRelationInput | StripeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stripes.
     */
    cursor?: StripeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stripes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stripes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stripes.
     */
    distinct?: StripeScalarFieldEnum | StripeScalarFieldEnum[]
  }

  /**
   * Stripe findFirstOrThrow
   */
  export type StripeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Filter, which Stripe to fetch.
     */
    where?: StripeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stripes to fetch.
     */
    orderBy?: StripeOrderByWithRelationInput | StripeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stripes.
     */
    cursor?: StripeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stripes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stripes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stripes.
     */
    distinct?: StripeScalarFieldEnum | StripeScalarFieldEnum[]
  }

  /**
   * Stripe findMany
   */
  export type StripeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Filter, which Stripes to fetch.
     */
    where?: StripeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stripes to fetch.
     */
    orderBy?: StripeOrderByWithRelationInput | StripeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stripes.
     */
    cursor?: StripeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stripes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stripes.
     */
    skip?: number
    distinct?: StripeScalarFieldEnum | StripeScalarFieldEnum[]
  }

  /**
   * Stripe create
   */
  export type StripeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * The data needed to create a Stripe.
     */
    data: XOR<StripeCreateInput, StripeUncheckedCreateInput>
  }

  /**
   * Stripe createMany
   */
  export type StripeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stripes.
     */
    data: StripeCreateManyInput | StripeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stripe createManyAndReturn
   */
  export type StripeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * The data used to create many Stripes.
     */
    data: StripeCreateManyInput | StripeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stripe update
   */
  export type StripeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * The data needed to update a Stripe.
     */
    data: XOR<StripeUpdateInput, StripeUncheckedUpdateInput>
    /**
     * Choose, which Stripe to update.
     */
    where: StripeWhereUniqueInput
  }

  /**
   * Stripe updateMany
   */
  export type StripeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stripes.
     */
    data: XOR<StripeUpdateManyMutationInput, StripeUncheckedUpdateManyInput>
    /**
     * Filter which Stripes to update
     */
    where?: StripeWhereInput
    /**
     * Limit how many Stripes to update.
     */
    limit?: number
  }

  /**
   * Stripe updateManyAndReturn
   */
  export type StripeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * The data used to update Stripes.
     */
    data: XOR<StripeUpdateManyMutationInput, StripeUncheckedUpdateManyInput>
    /**
     * Filter which Stripes to update
     */
    where?: StripeWhereInput
    /**
     * Limit how many Stripes to update.
     */
    limit?: number
  }

  /**
   * Stripe upsert
   */
  export type StripeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * The filter to search for the Stripe to update in case it exists.
     */
    where: StripeWhereUniqueInput
    /**
     * In case the Stripe found by the `where` argument doesn't exist, create a new Stripe with this data.
     */
    create: XOR<StripeCreateInput, StripeUncheckedCreateInput>
    /**
     * In case the Stripe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StripeUpdateInput, StripeUncheckedUpdateInput>
  }

  /**
   * Stripe delete
   */
  export type StripeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Filter which Stripe to delete.
     */
    where: StripeWhereUniqueInput
  }

  /**
   * Stripe deleteMany
   */
  export type StripeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stripes to delete
     */
    where?: StripeWhereInput
    /**
     * Limit how many Stripes to delete.
     */
    limit?: number
  }

  /**
   * Stripe without action
   */
  export type StripeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
  }


  /**
   * Model Transactions
   */

  export type AggregateTransactions = {
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  export type TransactionsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    memberId: number | null
    year: number | null
    amount: number | null
    origin: number | null
  }

  export type TransactionsSumAggregateOutputType = {
    id: bigint | null
    userId: number | null
    memberId: number | null
    year: number | null
    amount: number | null
    origin: number | null
  }

  export type TransactionsMinAggregateOutputType = {
    id: bigint | null
    userId: number | null
    memberId: number | null
    year: number | null
    timestamp: Date | null
    amount: number | null
    origin: number | null
    stripe: boolean | null
    notes: string | null
  }

  export type TransactionsMaxAggregateOutputType = {
    id: bigint | null
    userId: number | null
    memberId: number | null
    year: number | null
    timestamp: Date | null
    amount: number | null
    origin: number | null
    stripe: boolean | null
    notes: string | null
  }

  export type TransactionsCountAggregateOutputType = {
    id: number
    userId: number
    memberId: number
    year: number
    timestamp: number
    amount: number
    origin: number
    stripe: number
    notes: number
    data: number
    _all: number
  }


  export type TransactionsAvgAggregateInputType = {
    id?: true
    userId?: true
    memberId?: true
    year?: true
    amount?: true
    origin?: true
  }

  export type TransactionsSumAggregateInputType = {
    id?: true
    userId?: true
    memberId?: true
    year?: true
    amount?: true
    origin?: true
  }

  export type TransactionsMinAggregateInputType = {
    id?: true
    userId?: true
    memberId?: true
    year?: true
    timestamp?: true
    amount?: true
    origin?: true
    stripe?: true
    notes?: true
  }

  export type TransactionsMaxAggregateInputType = {
    id?: true
    userId?: true
    memberId?: true
    year?: true
    timestamp?: true
    amount?: true
    origin?: true
    stripe?: true
    notes?: true
  }

  export type TransactionsCountAggregateInputType = {
    id?: true
    userId?: true
    memberId?: true
    year?: true
    timestamp?: true
    amount?: true
    origin?: true
    stripe?: true
    notes?: true
    data?: true
    _all?: true
  }

  export type TransactionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to aggregate.
     */
    where?: TransactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionsMaxAggregateInputType
  }

  export type GetTransactionsAggregateType<T extends TransactionsAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactions[P]>
      : GetScalarType<T[P], AggregateTransactions[P]>
  }




  export type TransactionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionsWhereInput
    orderBy?: TransactionsOrderByWithAggregationInput | TransactionsOrderByWithAggregationInput[]
    by: TransactionsScalarFieldEnum[] | TransactionsScalarFieldEnum
    having?: TransactionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionsCountAggregateInputType | true
    _avg?: TransactionsAvgAggregateInputType
    _sum?: TransactionsSumAggregateInputType
    _min?: TransactionsMinAggregateInputType
    _max?: TransactionsMaxAggregateInputType
  }

  export type TransactionsGroupByOutputType = {
    id: bigint
    userId: number
    memberId: number | null
    year: number
    timestamp: Date
    amount: number
    origin: number | null
    stripe: boolean
    notes: string
    data: JsonValue
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  type GetTransactionsGroupByPayload<T extends TransactionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
        }
      >
    >


  export type TransactionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    memberId?: boolean
    year?: boolean
    timestamp?: boolean
    amount?: boolean
    origin?: boolean
    stripe?: boolean
    notes?: boolean
    data?: boolean
    membership?: boolean | Transactions$membershipArgs<ExtArgs>
    userTransactionsOriginTouser?: boolean | Transactions$userTransactionsOriginTouserArgs<ExtArgs>
    userTransactionsUserIdTouser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type TransactionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    memberId?: boolean
    year?: boolean
    timestamp?: boolean
    amount?: boolean
    origin?: boolean
    stripe?: boolean
    notes?: boolean
    data?: boolean
    membership?: boolean | Transactions$membershipArgs<ExtArgs>
    userTransactionsOriginTouser?: boolean | Transactions$userTransactionsOriginTouserArgs<ExtArgs>
    userTransactionsUserIdTouser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type TransactionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    memberId?: boolean
    year?: boolean
    timestamp?: boolean
    amount?: boolean
    origin?: boolean
    stripe?: boolean
    notes?: boolean
    data?: boolean
    membership?: boolean | Transactions$membershipArgs<ExtArgs>
    userTransactionsOriginTouser?: boolean | Transactions$userTransactionsOriginTouserArgs<ExtArgs>
    userTransactionsUserIdTouser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type TransactionsSelectScalar = {
    id?: boolean
    userId?: boolean
    memberId?: boolean
    year?: boolean
    timestamp?: boolean
    amount?: boolean
    origin?: boolean
    stripe?: boolean
    notes?: boolean
    data?: boolean
  }

  export type TransactionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "memberId" | "year" | "timestamp" | "amount" | "origin" | "stripe" | "notes" | "data", ExtArgs["result"]["transactions"]>
  export type TransactionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membership?: boolean | Transactions$membershipArgs<ExtArgs>
    userTransactionsOriginTouser?: boolean | Transactions$userTransactionsOriginTouserArgs<ExtArgs>
    userTransactionsUserIdTouser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TransactionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membership?: boolean | Transactions$membershipArgs<ExtArgs>
    userTransactionsOriginTouser?: boolean | Transactions$userTransactionsOriginTouserArgs<ExtArgs>
    userTransactionsUserIdTouser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TransactionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membership?: boolean | Transactions$membershipArgs<ExtArgs>
    userTransactionsOriginTouser?: boolean | Transactions$userTransactionsOriginTouserArgs<ExtArgs>
    userTransactionsUserIdTouser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TransactionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transactions"
    objects: {
      membership: Prisma.$MembershipPayload<ExtArgs> | null
      userTransactionsOriginTouser: Prisma.$UserPayload<ExtArgs> | null
      userTransactionsUserIdTouser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      userId: number
      memberId: number | null
      year: number
      timestamp: Date
      amount: number
      origin: number | null
      stripe: boolean
      notes: string
      data: Prisma.JsonValue
    }, ExtArgs["result"]["transactions"]>
    composites: {}
  }

  type TransactionsGetPayload<S extends boolean | null | undefined | TransactionsDefaultArgs> = $Result.GetResult<Prisma.$TransactionsPayload, S>

  type TransactionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionsCountAggregateInputType | true
    }

  export interface TransactionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transactions'], meta: { name: 'Transactions' } }
    /**
     * Find zero or one Transactions that matches the filter.
     * @param {TransactionsFindUniqueArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionsFindUniqueArgs>(args: SelectSubset<T, TransactionsFindUniqueArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transactions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionsFindUniqueOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionsFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFindFirstArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionsFindFirstArgs>(args?: SelectSubset<T, TransactionsFindFirstArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transactions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFindFirstOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionsFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transactions.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transactions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionsWithIdOnly = await prisma.transactions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionsFindManyArgs>(args?: SelectSubset<T, TransactionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transactions.
     * @param {TransactionsCreateArgs} args - Arguments to create a Transactions.
     * @example
     * // Create one Transactions
     * const Transactions = await prisma.transactions.create({
     *   data: {
     *     // ... data to create a Transactions
     *   }
     * })
     * 
     */
    create<T extends TransactionsCreateArgs>(args: SelectSubset<T, TransactionsCreateArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionsCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionsCreateManyArgs>(args?: SelectSubset<T, TransactionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionsCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionsWithIdOnly = await prisma.transactions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionsCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transactions.
     * @param {TransactionsDeleteArgs} args - Arguments to delete one Transactions.
     * @example
     * // Delete one Transactions
     * const Transactions = await prisma.transactions.delete({
     *   where: {
     *     // ... filter to delete one Transactions
     *   }
     * })
     * 
     */
    delete<T extends TransactionsDeleteArgs>(args: SelectSubset<T, TransactionsDeleteArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transactions.
     * @param {TransactionsUpdateArgs} args - Arguments to update one Transactions.
     * @example
     * // Update one Transactions
     * const transactions = await prisma.transactions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionsUpdateArgs>(args: SelectSubset<T, TransactionsUpdateArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionsDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transactions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionsDeleteManyArgs>(args?: SelectSubset<T, TransactionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionsUpdateManyArgs>(args: SelectSubset<T, TransactionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionsUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionsWithIdOnly = await prisma.transactions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionsUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transactions.
     * @param {TransactionsUpsertArgs} args - Arguments to update or create a Transactions.
     * @example
     * // Update or create a Transactions
     * const transactions = await prisma.transactions.upsert({
     *   create: {
     *     // ... data to create a Transactions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transactions we want to update
     *   }
     * })
     */
    upsert<T extends TransactionsUpsertArgs>(args: SelectSubset<T, TransactionsUpsertArgs<ExtArgs>>): Prisma__TransactionsClient<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transactions.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionsCountArgs>(
      args?: Subset<T, TransactionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionsAggregateArgs>(args: Subset<T, TransactionsAggregateArgs>): Prisma.PrismaPromise<GetTransactionsAggregateType<T>>

    /**
     * Group by Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionsGroupByArgs['orderBy'] }
        : { orderBy?: TransactionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transactions model
   */
  readonly fields: TransactionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transactions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    membership<T extends Transactions$membershipArgs<ExtArgs> = {}>(args?: Subset<T, Transactions$membershipArgs<ExtArgs>>): Prisma__MembershipClient<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    userTransactionsOriginTouser<T extends Transactions$userTransactionsOriginTouserArgs<ExtArgs> = {}>(args?: Subset<T, Transactions$userTransactionsOriginTouserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    userTransactionsUserIdTouser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transactions model
   */
  interface TransactionsFieldRefs {
    readonly id: FieldRef<"Transactions", 'BigInt'>
    readonly userId: FieldRef<"Transactions", 'Int'>
    readonly memberId: FieldRef<"Transactions", 'Int'>
    readonly year: FieldRef<"Transactions", 'Int'>
    readonly timestamp: FieldRef<"Transactions", 'DateTime'>
    readonly amount: FieldRef<"Transactions", 'Float'>
    readonly origin: FieldRef<"Transactions", 'Int'>
    readonly stripe: FieldRef<"Transactions", 'Boolean'>
    readonly notes: FieldRef<"Transactions", 'String'>
    readonly data: FieldRef<"Transactions", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Transactions findUnique
   */
  export type TransactionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where: TransactionsWhereUniqueInput
  }

  /**
   * Transactions findUniqueOrThrow
   */
  export type TransactionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where: TransactionsWhereUniqueInput
  }

  /**
   * Transactions findFirst
   */
  export type TransactionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * Transactions findFirstOrThrow
   */
  export type TransactionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * Transactions findMany
   */
  export type TransactionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * Transactions create
   */
  export type TransactionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * The data needed to create a Transactions.
     */
    data: XOR<TransactionsCreateInput, TransactionsUncheckedCreateInput>
  }

  /**
   * Transactions createMany
   */
  export type TransactionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionsCreateManyInput | TransactionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transactions createManyAndReturn
   */
  export type TransactionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionsCreateManyInput | TransactionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transactions update
   */
  export type TransactionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * The data needed to update a Transactions.
     */
    data: XOR<TransactionsUpdateInput, TransactionsUncheckedUpdateInput>
    /**
     * Choose, which Transactions to update.
     */
    where: TransactionsWhereUniqueInput
  }

  /**
   * Transactions updateMany
   */
  export type TransactionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionsUpdateManyMutationInput, TransactionsUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionsWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transactions updateManyAndReturn
   */
  export type TransactionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionsUpdateManyMutationInput, TransactionsUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionsWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transactions upsert
   */
  export type TransactionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * The filter to search for the Transactions to update in case it exists.
     */
    where: TransactionsWhereUniqueInput
    /**
     * In case the Transactions found by the `where` argument doesn't exist, create a new Transactions with this data.
     */
    create: XOR<TransactionsCreateInput, TransactionsUncheckedCreateInput>
    /**
     * In case the Transactions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionsUpdateInput, TransactionsUncheckedUpdateInput>
  }

  /**
   * Transactions delete
   */
  export type TransactionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    /**
     * Filter which Transactions to delete.
     */
    where: TransactionsWhereUniqueInput
  }

  /**
   * Transactions deleteMany
   */
  export type TransactionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionsWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transactions.membership
   */
  export type Transactions$membershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    where?: MembershipWhereInput
  }

  /**
   * Transactions.userTransactionsOriginTouser
   */
  export type Transactions$userTransactionsOriginTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Transactions without action
   */
  export type TransactionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    fullName: string | null
    firstName: string | null
    lastName: string | null
    displayName: string | null
    balance: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    fullName: string | null
    firstName: string | null
    lastName: string | null
    displayName: string | null
    balance: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    fullName: number
    firstName: number
    lastName: number
    displayName: number
    balance: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    balance?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    balance?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    firstName?: true
    lastName?: true
    displayName?: true
    balance?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    firstName?: true
    lastName?: true
    displayName?: true
    balance?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    firstName?: true
    lastName?: true
    displayName?: true
    balance?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    fullName: string | null
    firstName: string | null
    lastName: string | null
    displayName: string | null
    balance: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    fullName?: boolean
    firstName?: boolean
    lastName?: boolean
    displayName?: boolean
    balance?: boolean
    game?: boolean | User$gameArgs<ExtArgs>
    membership?: boolean | User$membershipArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    shirtOrder?: boolean | User$shirtOrderArgs<ExtArgs>
    transactionsTransactionsOriginTouser?: boolean | User$transactionsTransactionsOriginTouserArgs<ExtArgs>
    transactionsTransactionsUserIdTouser?: boolean | User$transactionsTransactionsUserIdTouserArgs<ExtArgs>
    userRole?: boolean | User$userRoleArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    fullName?: boolean
    firstName?: boolean
    lastName?: boolean
    displayName?: boolean
    balance?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    fullName?: boolean
    firstName?: boolean
    lastName?: boolean
    displayName?: boolean
    balance?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    fullName?: boolean
    firstName?: boolean
    lastName?: boolean
    displayName?: boolean
    balance?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "fullName" | "firstName" | "lastName" | "displayName" | "balance", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | User$gameArgs<ExtArgs>
    membership?: boolean | User$membershipArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    shirtOrder?: boolean | User$shirtOrderArgs<ExtArgs>
    transactionsTransactionsOriginTouser?: boolean | User$transactionsTransactionsOriginTouserArgs<ExtArgs>
    transactionsTransactionsUserIdTouser?: boolean | User$transactionsTransactionsUserIdTouserArgs<ExtArgs>
    userRole?: boolean | User$userRoleArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>[]
      membership: Prisma.$MembershipPayload<ExtArgs>[]
      profile: Prisma.$ProfilePayload<ExtArgs>[]
      shirtOrder: Prisma.$ShirtOrderPayload<ExtArgs>[]
      transactionsTransactionsOriginTouser: Prisma.$TransactionsPayload<ExtArgs>[]
      transactionsTransactionsUserIdTouser: Prisma.$TransactionsPayload<ExtArgs>[]
      userRole: Prisma.$UserRolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      fullName: string | null
      firstName: string | null
      lastName: string | null
      displayName: string | null
      balance: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends User$gameArgs<ExtArgs> = {}>(args?: Subset<T, User$gameArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    membership<T extends User$membershipArgs<ExtArgs> = {}>(args?: Subset<T, User$membershipArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shirtOrder<T extends User$shirtOrderArgs<ExtArgs> = {}>(args?: Subset<T, User$shirtOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShirtOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactionsTransactionsOriginTouser<T extends User$transactionsTransactionsOriginTouserArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsTransactionsOriginTouserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactionsTransactionsUserIdTouser<T extends User$transactionsTransactionsUserIdTouserArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsTransactionsUserIdTouserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userRole<T extends User$userRoleArgs<ExtArgs> = {}>(args?: Subset<T, User$userRoleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly balance: FieldRef<"User", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.game
   */
  export type User$gameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * User.membership
   */
  export type User$membershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Membership
     */
    omit?: MembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembershipInclude<ExtArgs> | null
    where?: MembershipWhereInput
    orderBy?: MembershipOrderByWithRelationInput | MembershipOrderByWithRelationInput[]
    cursor?: MembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MembershipScalarFieldEnum | MembershipScalarFieldEnum[]
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * User.shirtOrder
   */
  export type User$shirtOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShirtOrder
     */
    select?: ShirtOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShirtOrder
     */
    omit?: ShirtOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShirtOrderInclude<ExtArgs> | null
    where?: ShirtOrderWhereInput
    orderBy?: ShirtOrderOrderByWithRelationInput | ShirtOrderOrderByWithRelationInput[]
    cursor?: ShirtOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShirtOrderScalarFieldEnum | ShirtOrderScalarFieldEnum[]
  }

  /**
   * User.transactionsTransactionsOriginTouser
   */
  export type User$transactionsTransactionsOriginTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    where?: TransactionsWhereInput
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    cursor?: TransactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * User.transactionsTransactionsUserIdTouser
   */
  export type User$transactionsTransactionsUserIdTouserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions
     */
    select?: TransactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transactions
     */
    omit?: TransactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionsInclude<ExtArgs> | null
    where?: TransactionsWhereInput
    orderBy?: TransactionsOrderByWithRelationInput | TransactionsOrderByWithRelationInput[]
    cursor?: TransactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * User.userRole
   */
  export type User$userRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleAvgAggregateOutputType = {
    roleId: number | null
    userId: number | null
  }

  export type UserRoleSumAggregateOutputType = {
    roleId: number | null
    userId: number | null
  }

  export type UserRoleMinAggregateOutputType = {
    roleId: number | null
    userId: number | null
  }

  export type UserRoleMaxAggregateOutputType = {
    roleId: number | null
    userId: number | null
  }

  export type UserRoleCountAggregateOutputType = {
    roleId: number
    userId: number
    _all: number
  }


  export type UserRoleAvgAggregateInputType = {
    roleId?: true
    userId?: true
  }

  export type UserRoleSumAggregateInputType = {
    roleId?: true
    userId?: true
  }

  export type UserRoleMinAggregateInputType = {
    roleId?: true
    userId?: true
  }

  export type UserRoleMaxAggregateInputType = {
    roleId?: true
    userId?: true
  }

  export type UserRoleCountAggregateInputType = {
    roleId?: true
    userId?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _avg?: UserRoleAvgAggregateInputType
    _sum?: UserRoleSumAggregateInputType
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    roleId: number
    userId: number
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    userId?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    userId?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    userId?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectScalar = {
    roleId?: boolean
    userId?: boolean
  }

  export type UserRoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"roleId" | "userId", ExtArgs["result"]["userRole"]>
  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserRoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      roleId: number
      userId: number
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `roleId`
     * const userRoleWithRoleIdOnly = await prisma.userRole.findMany({ select: { roleId: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRoles and returns the data saved in the database.
     * @param {UserRoleCreateManyAndReturnArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRoles and only return the `roleId`
     * const userRoleWithRoleIdOnly = await prisma.userRole.createManyAndReturn({
     *   select: { roleId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles and returns the data updated in the database.
     * @param {UserRoleUpdateManyAndReturnArgs} args - Arguments to update many UserRoles.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserRoles and only return the `roleId`
     * const userRoleWithRoleIdOnly = await prisma.userRole.updateManyAndReturn({
     *   select: { roleId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserRoleUpdateManyAndReturnArgs>(args: SelectSubset<T, UserRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */
  interface UserRoleFieldRefs {
    readonly roleId: FieldRef<"UserRole", 'Int'>
    readonly userId: FieldRef<"UserRole", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole createManyAndReturn
   */
  export type UserRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
  }

  /**
   * UserRole updateManyAndReturn
   */
  export type UserRoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to delete.
     */
    limit?: number
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GameScalarFieldEnum: {
    id: 'id',
    description: 'description',
    lateFinish: 'lateFinish',
    lateStart: 'lateStart',
    name: 'name',
    playerMax: 'playerMax',
    playerMin: 'playerMin',
    roomId: 'roomId',
    shortName: 'shortName',
    slotId: 'slotId',
    charInstructions: 'charInstructions',
    estimatedLength: 'estimatedLength',
    gameContactEmail: 'gameContactEmail',
    genre: 'genre',
    gmNames: 'gmNames',
    message: 'message',
    playerPreference: 'playerPreference',
    playersContactGm: 'playersContactGm',
    returningPlayers: 'returningPlayers',
    setting: 'setting',
    slotConflicts: 'slotConflicts',
    slotPreference: 'slotPreference',
    teenFriendly: 'teenFriendly',
    type: 'type',
    year: 'year',
    authorId: 'authorId',
    full: 'full'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const GameAssignmentScalarFieldEnum: {
    memberId: 'memberId',
    gameId: 'gameId',
    gm: 'gm',
    year: 'year'
  };

  export type GameAssignmentScalarFieldEnum = (typeof GameAssignmentScalarFieldEnum)[keyof typeof GameAssignmentScalarFieldEnum]


  export const GameChoiceScalarFieldEnum: {
    id: 'id',
    gameId: 'gameId',
    memberId: 'memberId',
    rank: 'rank',
    slotId: 'slotId',
    year: 'year',
    returningPlayer: 'returningPlayer'
  };

  export type GameChoiceScalarFieldEnum = (typeof GameChoiceScalarFieldEnum)[keyof typeof GameChoiceScalarFieldEnum]


  export const GameSubmissionScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    message: 'message',
    year: 'year'
  };

  export type GameSubmissionScalarFieldEnum = (typeof GameSubmissionScalarFieldEnum)[keyof typeof GameSubmissionScalarFieldEnum]


  export const HotelRoomScalarFieldEnum: {
    id: 'id',
    description: 'description',
    gamingRoom: 'gamingRoom',
    occupancy: 'occupancy',
    quantity: 'quantity',
    rate: 'rate',
    bathroomType: 'bathroomType',
    type: 'type'
  };

  export type HotelRoomScalarFieldEnum = (typeof HotelRoomScalarFieldEnum)[keyof typeof HotelRoomScalarFieldEnum]


  export const HotelRoomDetailsScalarFieldEnum: {
    id: 'id',
    version: 'version',
    bathroomType: 'bathroomType',
    comment: 'comment',
    enabled: 'enabled',
    gamingRoom: 'gamingRoom',
    internalRoomType: 'internalRoomType',
    name: 'name',
    reserved: 'reserved',
    reservedFor: 'reservedFor',
    roomType: 'roomType',
    formattedRoomType: 'formattedRoomType'
  };

  export type HotelRoomDetailsScalarFieldEnum = (typeof HotelRoomDetailsScalarFieldEnum)[keyof typeof HotelRoomDetailsScalarFieldEnum]


  export const KnexMigrationsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    batch: 'batch',
    migrationTime: 'migrationTime'
  };

  export type KnexMigrationsScalarFieldEnum = (typeof KnexMigrationsScalarFieldEnum)[keyof typeof KnexMigrationsScalarFieldEnum]


  export const KnexMigrationsLockScalarFieldEnum: {
    index: 'index',
    isLocked: 'isLocked'
  };

  export type KnexMigrationsLockScalarFieldEnum = (typeof KnexMigrationsLockScalarFieldEnum)[keyof typeof KnexMigrationsLockScalarFieldEnum]


  export const LookupScalarFieldEnum: {
    id: 'id',
    codeMaximum: 'codeMaximum',
    codeMinimum: 'codeMinimum',
    codeScale: 'codeScale',
    codeType: 'codeType',
    internationalize: 'internationalize',
    ordering: 'ordering',
    realm: 'realm',
    valueMaximum: 'valueMaximum',
    valueMinimum: 'valueMinimum',
    valueScale: 'valueScale',
    valueType: 'valueType'
  };

  export type LookupScalarFieldEnum = (typeof LookupScalarFieldEnum)[keyof typeof LookupScalarFieldEnum]


  export const LookupValueScalarFieldEnum: {
    id: 'id',
    code: 'code',
    lookupId: 'lookupId',
    numericSequencer: 'numericSequencer',
    sequencer: 'sequencer',
    stringSequencer: 'stringSequencer',
    value: 'value'
  };

  export type LookupValueScalarFieldEnum = (typeof LookupValueScalarFieldEnum)[keyof typeof LookupValueScalarFieldEnum]


  export const MembershipScalarFieldEnum: {
    id: 'id',
    arrivalDate: 'arrivalDate',
    attendance: 'attendance',
    attending: 'attending',
    departureDate: 'departureDate',
    hotelRoomId: 'hotelRoomId',
    interestLevel: 'interestLevel',
    message: 'message',
    roomPreferenceAndNotes: 'roomPreferenceAndNotes',
    roomingPreferences: 'roomingPreferences',
    roomingWith: 'roomingWith',
    userId: 'userId',
    volunteer: 'volunteer',
    year: 'year',
    offerSubsidy: 'offerSubsidy',
    requestOldPrice: 'requestOldPrice',
    slotsAttending: 'slotsAttending'
  };

  export type MembershipScalarFieldEnum = (typeof MembershipScalarFieldEnum)[keyof typeof MembershipScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    snailMailAddress: 'snailMailAddress',
    phoneNumber: 'phoneNumber'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    authority: 'authority'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    description: 'description',
    size: 'size',
    type: 'type',
    updated: 'updated'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const SettingScalarFieldEnum: {
    id: 'id',
    code: 'code',
    type: 'type',
    value: 'value'
  };

  export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


  export const ShirtOrderScalarFieldEnum: {
    id: 'id',
    deliveryMethod: 'deliveryMethod',
    message: 'message',
    userId: 'userId',
    year: 'year'
  };

  export type ShirtOrderScalarFieldEnum = (typeof ShirtOrderScalarFieldEnum)[keyof typeof ShirtOrderScalarFieldEnum]


  export const ShirtOrderItemScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    quantity: 'quantity',
    size: 'size',
    style: 'style',
    itemsIdx: 'itemsIdx'
  };

  export type ShirtOrderItemScalarFieldEnum = (typeof ShirtOrderItemScalarFieldEnum)[keyof typeof ShirtOrderItemScalarFieldEnum]


  export const SlotScalarFieldEnum: {
    id: 'id',
    slot: 'slot',
    day: 'day',
    formattedDate: 'formattedDate',
    length: 'length',
    time: 'time'
  };

  export type SlotScalarFieldEnum = (typeof SlotScalarFieldEnum)[keyof typeof SlotScalarFieldEnum]


  export const StripeScalarFieldEnum: {
    id: 'id',
    data: 'data'
  };

  export type StripeScalarFieldEnum = (typeof StripeScalarFieldEnum)[keyof typeof StripeScalarFieldEnum]


  export const TransactionsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    memberId: 'memberId',
    year: 'year',
    timestamp: 'timestamp',
    amount: 'amount',
    origin: 'origin',
    stripe: 'stripe',
    notes: 'notes',
    data: 'data'
  };

  export type TransactionsScalarFieldEnum = (typeof TransactionsScalarFieldEnum)[keyof typeof TransactionsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    fullName: 'fullName',
    firstName: 'firstName',
    lastName: 'lastName',
    displayName: 'displayName',
    balance: 'balance'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    roleId: 'roleId',
    userId: 'userId'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: IntFilter<"Game"> | number
    description?: StringFilter<"Game"> | string
    lateFinish?: BoolNullableFilter<"Game"> | boolean | null
    lateStart?: StringNullableFilter<"Game"> | string | null
    name?: StringFilter<"Game"> | string
    playerMax?: IntFilter<"Game"> | number
    playerMin?: IntFilter<"Game"> | number
    roomId?: IntNullableFilter<"Game"> | number | null
    shortName?: StringNullableFilter<"Game"> | string | null
    slotId?: IntNullableFilter<"Game"> | number | null
    charInstructions?: StringFilter<"Game"> | string
    estimatedLength?: StringFilter<"Game"> | string
    gameContactEmail?: StringFilter<"Game"> | string
    genre?: StringFilter<"Game"> | string
    gmNames?: StringNullableFilter<"Game"> | string | null
    message?: StringFilter<"Game"> | string
    playerPreference?: StringFilter<"Game"> | string
    playersContactGm?: BoolFilter<"Game"> | boolean
    returningPlayers?: StringFilter<"Game"> | string
    setting?: StringFilter<"Game"> | string
    slotConflicts?: StringFilter<"Game"> | string
    slotPreference?: IntFilter<"Game"> | number
    teenFriendly?: BoolFilter<"Game"> | boolean
    type?: StringFilter<"Game"> | string
    year?: IntFilter<"Game"> | number
    authorId?: IntNullableFilter<"Game"> | number | null
    full?: BoolNullableFilter<"Game"> | boolean | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    room?: XOR<RoomNullableScalarRelationFilter, RoomWhereInput> | null
    slot?: XOR<SlotNullableScalarRelationFilter, SlotWhereInput> | null
    gameAssignment?: GameAssignmentListRelationFilter
    gameChoice?: GameChoiceListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    lateFinish?: SortOrderInput | SortOrder
    lateStart?: SortOrderInput | SortOrder
    name?: SortOrder
    playerMax?: SortOrder
    playerMin?: SortOrder
    roomId?: SortOrderInput | SortOrder
    shortName?: SortOrderInput | SortOrder
    slotId?: SortOrderInput | SortOrder
    charInstructions?: SortOrder
    estimatedLength?: SortOrder
    gameContactEmail?: SortOrder
    genre?: SortOrder
    gmNames?: SortOrderInput | SortOrder
    message?: SortOrder
    playerPreference?: SortOrder
    playersContactGm?: SortOrder
    returningPlayers?: SortOrder
    setting?: SortOrder
    slotConflicts?: SortOrder
    slotPreference?: SortOrder
    teenFriendly?: SortOrder
    type?: SortOrder
    year?: SortOrder
    authorId?: SortOrderInput | SortOrder
    full?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    room?: RoomOrderByWithRelationInput
    slot?: SlotOrderByWithRelationInput
    gameAssignment?: GameAssignmentOrderByRelationAggregateInput
    gameChoice?: GameChoiceOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    description?: StringFilter<"Game"> | string
    lateFinish?: BoolNullableFilter<"Game"> | boolean | null
    lateStart?: StringNullableFilter<"Game"> | string | null
    name?: StringFilter<"Game"> | string
    playerMax?: IntFilter<"Game"> | number
    playerMin?: IntFilter<"Game"> | number
    roomId?: IntNullableFilter<"Game"> | number | null
    shortName?: StringNullableFilter<"Game"> | string | null
    slotId?: IntNullableFilter<"Game"> | number | null
    charInstructions?: StringFilter<"Game"> | string
    estimatedLength?: StringFilter<"Game"> | string
    gameContactEmail?: StringFilter<"Game"> | string
    genre?: StringFilter<"Game"> | string
    gmNames?: StringNullableFilter<"Game"> | string | null
    message?: StringFilter<"Game"> | string
    playerPreference?: StringFilter<"Game"> | string
    playersContactGm?: BoolFilter<"Game"> | boolean
    returningPlayers?: StringFilter<"Game"> | string
    setting?: StringFilter<"Game"> | string
    slotConflicts?: StringFilter<"Game"> | string
    slotPreference?: IntFilter<"Game"> | number
    teenFriendly?: BoolFilter<"Game"> | boolean
    type?: StringFilter<"Game"> | string
    year?: IntFilter<"Game"> | number
    authorId?: IntNullableFilter<"Game"> | number | null
    full?: BoolNullableFilter<"Game"> | boolean | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    room?: XOR<RoomNullableScalarRelationFilter, RoomWhereInput> | null
    slot?: XOR<SlotNullableScalarRelationFilter, SlotWhereInput> | null
    gameAssignment?: GameAssignmentListRelationFilter
    gameChoice?: GameChoiceListRelationFilter
  }, "id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    lateFinish?: SortOrderInput | SortOrder
    lateStart?: SortOrderInput | SortOrder
    name?: SortOrder
    playerMax?: SortOrder
    playerMin?: SortOrder
    roomId?: SortOrderInput | SortOrder
    shortName?: SortOrderInput | SortOrder
    slotId?: SortOrderInput | SortOrder
    charInstructions?: SortOrder
    estimatedLength?: SortOrder
    gameContactEmail?: SortOrder
    genre?: SortOrder
    gmNames?: SortOrderInput | SortOrder
    message?: SortOrder
    playerPreference?: SortOrder
    playersContactGm?: SortOrder
    returningPlayers?: SortOrder
    setting?: SortOrder
    slotConflicts?: SortOrder
    slotPreference?: SortOrder
    teenFriendly?: SortOrder
    type?: SortOrder
    year?: SortOrder
    authorId?: SortOrderInput | SortOrder
    full?: SortOrderInput | SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Game"> | number
    description?: StringWithAggregatesFilter<"Game"> | string
    lateFinish?: BoolNullableWithAggregatesFilter<"Game"> | boolean | null
    lateStart?: StringNullableWithAggregatesFilter<"Game"> | string | null
    name?: StringWithAggregatesFilter<"Game"> | string
    playerMax?: IntWithAggregatesFilter<"Game"> | number
    playerMin?: IntWithAggregatesFilter<"Game"> | number
    roomId?: IntNullableWithAggregatesFilter<"Game"> | number | null
    shortName?: StringNullableWithAggregatesFilter<"Game"> | string | null
    slotId?: IntNullableWithAggregatesFilter<"Game"> | number | null
    charInstructions?: StringWithAggregatesFilter<"Game"> | string
    estimatedLength?: StringWithAggregatesFilter<"Game"> | string
    gameContactEmail?: StringWithAggregatesFilter<"Game"> | string
    genre?: StringWithAggregatesFilter<"Game"> | string
    gmNames?: StringNullableWithAggregatesFilter<"Game"> | string | null
    message?: StringWithAggregatesFilter<"Game"> | string
    playerPreference?: StringWithAggregatesFilter<"Game"> | string
    playersContactGm?: BoolWithAggregatesFilter<"Game"> | boolean
    returningPlayers?: StringWithAggregatesFilter<"Game"> | string
    setting?: StringWithAggregatesFilter<"Game"> | string
    slotConflicts?: StringWithAggregatesFilter<"Game"> | string
    slotPreference?: IntWithAggregatesFilter<"Game"> | number
    teenFriendly?: BoolWithAggregatesFilter<"Game"> | boolean
    type?: StringWithAggregatesFilter<"Game"> | string
    year?: IntWithAggregatesFilter<"Game"> | number
    authorId?: IntNullableWithAggregatesFilter<"Game"> | number | null
    full?: BoolNullableWithAggregatesFilter<"Game"> | boolean | null
  }

  export type GameAssignmentWhereInput = {
    AND?: GameAssignmentWhereInput | GameAssignmentWhereInput[]
    OR?: GameAssignmentWhereInput[]
    NOT?: GameAssignmentWhereInput | GameAssignmentWhereInput[]
    memberId?: IntFilter<"GameAssignment"> | number
    gameId?: IntFilter<"GameAssignment"> | number
    gm?: IntFilter<"GameAssignment"> | number
    year?: IntFilter<"GameAssignment"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    membership?: XOR<MembershipScalarRelationFilter, MembershipWhereInput>
  }

  export type GameAssignmentOrderByWithRelationInput = {
    memberId?: SortOrder
    gameId?: SortOrder
    gm?: SortOrder
    year?: SortOrder
    game?: GameOrderByWithRelationInput
    membership?: MembershipOrderByWithRelationInput
  }

  export type GameAssignmentWhereUniqueInput = Prisma.AtLeast<{
    memberId_gameId_gm_year?: GameAssignmentMemberIdGameIdGmYearCompoundUniqueInput
    AND?: GameAssignmentWhereInput | GameAssignmentWhereInput[]
    OR?: GameAssignmentWhereInput[]
    NOT?: GameAssignmentWhereInput | GameAssignmentWhereInput[]
    memberId?: IntFilter<"GameAssignment"> | number
    gameId?: IntFilter<"GameAssignment"> | number
    gm?: IntFilter<"GameAssignment"> | number
    year?: IntFilter<"GameAssignment"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    membership?: XOR<MembershipScalarRelationFilter, MembershipWhereInput>
  }, "memberId_gameId_gm_year">

  export type GameAssignmentOrderByWithAggregationInput = {
    memberId?: SortOrder
    gameId?: SortOrder
    gm?: SortOrder
    year?: SortOrder
    _count?: GameAssignmentCountOrderByAggregateInput
    _avg?: GameAssignmentAvgOrderByAggregateInput
    _max?: GameAssignmentMaxOrderByAggregateInput
    _min?: GameAssignmentMinOrderByAggregateInput
    _sum?: GameAssignmentSumOrderByAggregateInput
  }

  export type GameAssignmentScalarWhereWithAggregatesInput = {
    AND?: GameAssignmentScalarWhereWithAggregatesInput | GameAssignmentScalarWhereWithAggregatesInput[]
    OR?: GameAssignmentScalarWhereWithAggregatesInput[]
    NOT?: GameAssignmentScalarWhereWithAggregatesInput | GameAssignmentScalarWhereWithAggregatesInput[]
    memberId?: IntWithAggregatesFilter<"GameAssignment"> | number
    gameId?: IntWithAggregatesFilter<"GameAssignment"> | number
    gm?: IntWithAggregatesFilter<"GameAssignment"> | number
    year?: IntWithAggregatesFilter<"GameAssignment"> | number
  }

  export type GameChoiceWhereInput = {
    AND?: GameChoiceWhereInput | GameChoiceWhereInput[]
    OR?: GameChoiceWhereInput[]
    NOT?: GameChoiceWhereInput | GameChoiceWhereInput[]
    id?: IntFilter<"GameChoice"> | number
    gameId?: IntNullableFilter<"GameChoice"> | number | null
    memberId?: IntFilter<"GameChoice"> | number
    rank?: IntFilter<"GameChoice"> | number
    slotId?: IntFilter<"GameChoice"> | number
    year?: IntFilter<"GameChoice"> | number
    returningPlayer?: BoolFilter<"GameChoice"> | boolean
    game?: XOR<GameNullableScalarRelationFilter, GameWhereInput> | null
    membership?: XOR<MembershipScalarRelationFilter, MembershipWhereInput>
    slot?: XOR<SlotScalarRelationFilter, SlotWhereInput>
  }

  export type GameChoiceOrderByWithRelationInput = {
    id?: SortOrder
    gameId?: SortOrderInput | SortOrder
    memberId?: SortOrder
    rank?: SortOrder
    slotId?: SortOrder
    year?: SortOrder
    returningPlayer?: SortOrder
    game?: GameOrderByWithRelationInput
    membership?: MembershipOrderByWithRelationInput
    slot?: SlotOrderByWithRelationInput
  }

  export type GameChoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameChoiceWhereInput | GameChoiceWhereInput[]
    OR?: GameChoiceWhereInput[]
    NOT?: GameChoiceWhereInput | GameChoiceWhereInput[]
    gameId?: IntNullableFilter<"GameChoice"> | number | null
    memberId?: IntFilter<"GameChoice"> | number
    rank?: IntFilter<"GameChoice"> | number
    slotId?: IntFilter<"GameChoice"> | number
    year?: IntFilter<"GameChoice"> | number
    returningPlayer?: BoolFilter<"GameChoice"> | boolean
    game?: XOR<GameNullableScalarRelationFilter, GameWhereInput> | null
    membership?: XOR<MembershipScalarRelationFilter, MembershipWhereInput>
    slot?: XOR<SlotScalarRelationFilter, SlotWhereInput>
  }, "id">

  export type GameChoiceOrderByWithAggregationInput = {
    id?: SortOrder
    gameId?: SortOrderInput | SortOrder
    memberId?: SortOrder
    rank?: SortOrder
    slotId?: SortOrder
    year?: SortOrder
    returningPlayer?: SortOrder
    _count?: GameChoiceCountOrderByAggregateInput
    _avg?: GameChoiceAvgOrderByAggregateInput
    _max?: GameChoiceMaxOrderByAggregateInput
    _min?: GameChoiceMinOrderByAggregateInput
    _sum?: GameChoiceSumOrderByAggregateInput
  }

  export type GameChoiceScalarWhereWithAggregatesInput = {
    AND?: GameChoiceScalarWhereWithAggregatesInput | GameChoiceScalarWhereWithAggregatesInput[]
    OR?: GameChoiceScalarWhereWithAggregatesInput[]
    NOT?: GameChoiceScalarWhereWithAggregatesInput | GameChoiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GameChoice"> | number
    gameId?: IntNullableWithAggregatesFilter<"GameChoice"> | number | null
    memberId?: IntWithAggregatesFilter<"GameChoice"> | number
    rank?: IntWithAggregatesFilter<"GameChoice"> | number
    slotId?: IntWithAggregatesFilter<"GameChoice"> | number
    year?: IntWithAggregatesFilter<"GameChoice"> | number
    returningPlayer?: BoolWithAggregatesFilter<"GameChoice"> | boolean
  }

  export type GameSubmissionWhereInput = {
    AND?: GameSubmissionWhereInput | GameSubmissionWhereInput[]
    OR?: GameSubmissionWhereInput[]
    NOT?: GameSubmissionWhereInput | GameSubmissionWhereInput[]
    id?: IntFilter<"GameSubmission"> | number
    memberId?: IntFilter<"GameSubmission"> | number
    message?: StringFilter<"GameSubmission"> | string
    year?: IntFilter<"GameSubmission"> | number
    membership?: XOR<MembershipScalarRelationFilter, MembershipWhereInput>
  }

  export type GameSubmissionOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    message?: SortOrder
    year?: SortOrder
    membership?: MembershipOrderByWithRelationInput
  }

  export type GameSubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameSubmissionWhereInput | GameSubmissionWhereInput[]
    OR?: GameSubmissionWhereInput[]
    NOT?: GameSubmissionWhereInput | GameSubmissionWhereInput[]
    memberId?: IntFilter<"GameSubmission"> | number
    message?: StringFilter<"GameSubmission"> | string
    year?: IntFilter<"GameSubmission"> | number
    membership?: XOR<MembershipScalarRelationFilter, MembershipWhereInput>
  }, "id">

  export type GameSubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    message?: SortOrder
    year?: SortOrder
    _count?: GameSubmissionCountOrderByAggregateInput
    _avg?: GameSubmissionAvgOrderByAggregateInput
    _max?: GameSubmissionMaxOrderByAggregateInput
    _min?: GameSubmissionMinOrderByAggregateInput
    _sum?: GameSubmissionSumOrderByAggregateInput
  }

  export type GameSubmissionScalarWhereWithAggregatesInput = {
    AND?: GameSubmissionScalarWhereWithAggregatesInput | GameSubmissionScalarWhereWithAggregatesInput[]
    OR?: GameSubmissionScalarWhereWithAggregatesInput[]
    NOT?: GameSubmissionScalarWhereWithAggregatesInput | GameSubmissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GameSubmission"> | number
    memberId?: IntWithAggregatesFilter<"GameSubmission"> | number
    message?: StringWithAggregatesFilter<"GameSubmission"> | string
    year?: IntWithAggregatesFilter<"GameSubmission"> | number
  }

  export type HotelRoomWhereInput = {
    AND?: HotelRoomWhereInput | HotelRoomWhereInput[]
    OR?: HotelRoomWhereInput[]
    NOT?: HotelRoomWhereInput | HotelRoomWhereInput[]
    id?: IntFilter<"HotelRoom"> | number
    description?: StringFilter<"HotelRoom"> | string
    gamingRoom?: BoolFilter<"HotelRoom"> | boolean
    occupancy?: StringFilter<"HotelRoom"> | string
    quantity?: IntFilter<"HotelRoom"> | number
    rate?: StringFilter<"HotelRoom"> | string
    bathroomType?: StringFilter<"HotelRoom"> | string
    type?: StringFilter<"HotelRoom"> | string
    membership?: MembershipListRelationFilter
  }

  export type HotelRoomOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    gamingRoom?: SortOrder
    occupancy?: SortOrder
    quantity?: SortOrder
    rate?: SortOrder
    bathroomType?: SortOrder
    type?: SortOrder
    membership?: MembershipOrderByRelationAggregateInput
  }

  export type HotelRoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HotelRoomWhereInput | HotelRoomWhereInput[]
    OR?: HotelRoomWhereInput[]
    NOT?: HotelRoomWhereInput | HotelRoomWhereInput[]
    description?: StringFilter<"HotelRoom"> | string
    gamingRoom?: BoolFilter<"HotelRoom"> | boolean
    occupancy?: StringFilter<"HotelRoom"> | string
    quantity?: IntFilter<"HotelRoom"> | number
    rate?: StringFilter<"HotelRoom"> | string
    bathroomType?: StringFilter<"HotelRoom"> | string
    type?: StringFilter<"HotelRoom"> | string
    membership?: MembershipListRelationFilter
  }, "id">

  export type HotelRoomOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    gamingRoom?: SortOrder
    occupancy?: SortOrder
    quantity?: SortOrder
    rate?: SortOrder
    bathroomType?: SortOrder
    type?: SortOrder
    _count?: HotelRoomCountOrderByAggregateInput
    _avg?: HotelRoomAvgOrderByAggregateInput
    _max?: HotelRoomMaxOrderByAggregateInput
    _min?: HotelRoomMinOrderByAggregateInput
    _sum?: HotelRoomSumOrderByAggregateInput
  }

  export type HotelRoomScalarWhereWithAggregatesInput = {
    AND?: HotelRoomScalarWhereWithAggregatesInput | HotelRoomScalarWhereWithAggregatesInput[]
    OR?: HotelRoomScalarWhereWithAggregatesInput[]
    NOT?: HotelRoomScalarWhereWithAggregatesInput | HotelRoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HotelRoom"> | number
    description?: StringWithAggregatesFilter<"HotelRoom"> | string
    gamingRoom?: BoolWithAggregatesFilter<"HotelRoom"> | boolean
    occupancy?: StringWithAggregatesFilter<"HotelRoom"> | string
    quantity?: IntWithAggregatesFilter<"HotelRoom"> | number
    rate?: StringWithAggregatesFilter<"HotelRoom"> | string
    bathroomType?: StringWithAggregatesFilter<"HotelRoom"> | string
    type?: StringWithAggregatesFilter<"HotelRoom"> | string
  }

  export type HotelRoomDetailsWhereInput = {
    AND?: HotelRoomDetailsWhereInput | HotelRoomDetailsWhereInput[]
    OR?: HotelRoomDetailsWhereInput[]
    NOT?: HotelRoomDetailsWhereInput | HotelRoomDetailsWhereInput[]
    id?: BigIntFilter<"HotelRoomDetails"> | bigint | number
    version?: BigIntFilter<"HotelRoomDetails"> | bigint | number
    bathroomType?: StringFilter<"HotelRoomDetails"> | string
    comment?: StringFilter<"HotelRoomDetails"> | string
    enabled?: BoolFilter<"HotelRoomDetails"> | boolean
    gamingRoom?: BoolFilter<"HotelRoomDetails"> | boolean
    internalRoomType?: StringFilter<"HotelRoomDetails"> | string
    name?: StringFilter<"HotelRoomDetails"> | string
    reserved?: BoolFilter<"HotelRoomDetails"> | boolean
    reservedFor?: StringFilter<"HotelRoomDetails"> | string
    roomType?: StringFilter<"HotelRoomDetails"> | string
    formattedRoomType?: StringFilter<"HotelRoomDetails"> | string
  }

  export type HotelRoomDetailsOrderByWithRelationInput = {
    id?: SortOrder
    version?: SortOrder
    bathroomType?: SortOrder
    comment?: SortOrder
    enabled?: SortOrder
    gamingRoom?: SortOrder
    internalRoomType?: SortOrder
    name?: SortOrder
    reserved?: SortOrder
    reservedFor?: SortOrder
    roomType?: SortOrder
    formattedRoomType?: SortOrder
  }

  export type HotelRoomDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: HotelRoomDetailsWhereInput | HotelRoomDetailsWhereInput[]
    OR?: HotelRoomDetailsWhereInput[]
    NOT?: HotelRoomDetailsWhereInput | HotelRoomDetailsWhereInput[]
    version?: BigIntFilter<"HotelRoomDetails"> | bigint | number
    bathroomType?: StringFilter<"HotelRoomDetails"> | string
    comment?: StringFilter<"HotelRoomDetails"> | string
    enabled?: BoolFilter<"HotelRoomDetails"> | boolean
    gamingRoom?: BoolFilter<"HotelRoomDetails"> | boolean
    internalRoomType?: StringFilter<"HotelRoomDetails"> | string
    name?: StringFilter<"HotelRoomDetails"> | string
    reserved?: BoolFilter<"HotelRoomDetails"> | boolean
    reservedFor?: StringFilter<"HotelRoomDetails"> | string
    roomType?: StringFilter<"HotelRoomDetails"> | string
    formattedRoomType?: StringFilter<"HotelRoomDetails"> | string
  }, "id">

  export type HotelRoomDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    version?: SortOrder
    bathroomType?: SortOrder
    comment?: SortOrder
    enabled?: SortOrder
    gamingRoom?: SortOrder
    internalRoomType?: SortOrder
    name?: SortOrder
    reserved?: SortOrder
    reservedFor?: SortOrder
    roomType?: SortOrder
    formattedRoomType?: SortOrder
    _count?: HotelRoomDetailsCountOrderByAggregateInput
    _avg?: HotelRoomDetailsAvgOrderByAggregateInput
    _max?: HotelRoomDetailsMaxOrderByAggregateInput
    _min?: HotelRoomDetailsMinOrderByAggregateInput
    _sum?: HotelRoomDetailsSumOrderByAggregateInput
  }

  export type HotelRoomDetailsScalarWhereWithAggregatesInput = {
    AND?: HotelRoomDetailsScalarWhereWithAggregatesInput | HotelRoomDetailsScalarWhereWithAggregatesInput[]
    OR?: HotelRoomDetailsScalarWhereWithAggregatesInput[]
    NOT?: HotelRoomDetailsScalarWhereWithAggregatesInput | HotelRoomDetailsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"HotelRoomDetails"> | bigint | number
    version?: BigIntWithAggregatesFilter<"HotelRoomDetails"> | bigint | number
    bathroomType?: StringWithAggregatesFilter<"HotelRoomDetails"> | string
    comment?: StringWithAggregatesFilter<"HotelRoomDetails"> | string
    enabled?: BoolWithAggregatesFilter<"HotelRoomDetails"> | boolean
    gamingRoom?: BoolWithAggregatesFilter<"HotelRoomDetails"> | boolean
    internalRoomType?: StringWithAggregatesFilter<"HotelRoomDetails"> | string
    name?: StringWithAggregatesFilter<"HotelRoomDetails"> | string
    reserved?: BoolWithAggregatesFilter<"HotelRoomDetails"> | boolean
    reservedFor?: StringWithAggregatesFilter<"HotelRoomDetails"> | string
    roomType?: StringWithAggregatesFilter<"HotelRoomDetails"> | string
    formattedRoomType?: StringWithAggregatesFilter<"HotelRoomDetails"> | string
  }

  export type KnexMigrationsWhereInput = {
    AND?: KnexMigrationsWhereInput | KnexMigrationsWhereInput[]
    OR?: KnexMigrationsWhereInput[]
    NOT?: KnexMigrationsWhereInput | KnexMigrationsWhereInput[]
    id?: IntFilter<"KnexMigrations"> | number
    name?: StringNullableFilter<"KnexMigrations"> | string | null
    batch?: IntNullableFilter<"KnexMigrations"> | number | null
    migrationTime?: DateTimeNullableFilter<"KnexMigrations"> | Date | string | null
  }

  export type KnexMigrationsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    batch?: SortOrderInput | SortOrder
    migrationTime?: SortOrderInput | SortOrder
  }

  export type KnexMigrationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KnexMigrationsWhereInput | KnexMigrationsWhereInput[]
    OR?: KnexMigrationsWhereInput[]
    NOT?: KnexMigrationsWhereInput | KnexMigrationsWhereInput[]
    name?: StringNullableFilter<"KnexMigrations"> | string | null
    batch?: IntNullableFilter<"KnexMigrations"> | number | null
    migrationTime?: DateTimeNullableFilter<"KnexMigrations"> | Date | string | null
  }, "id">

  export type KnexMigrationsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    batch?: SortOrderInput | SortOrder
    migrationTime?: SortOrderInput | SortOrder
    _count?: KnexMigrationsCountOrderByAggregateInput
    _avg?: KnexMigrationsAvgOrderByAggregateInput
    _max?: KnexMigrationsMaxOrderByAggregateInput
    _min?: KnexMigrationsMinOrderByAggregateInput
    _sum?: KnexMigrationsSumOrderByAggregateInput
  }

  export type KnexMigrationsScalarWhereWithAggregatesInput = {
    AND?: KnexMigrationsScalarWhereWithAggregatesInput | KnexMigrationsScalarWhereWithAggregatesInput[]
    OR?: KnexMigrationsScalarWhereWithAggregatesInput[]
    NOT?: KnexMigrationsScalarWhereWithAggregatesInput | KnexMigrationsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KnexMigrations"> | number
    name?: StringNullableWithAggregatesFilter<"KnexMigrations"> | string | null
    batch?: IntNullableWithAggregatesFilter<"KnexMigrations"> | number | null
    migrationTime?: DateTimeNullableWithAggregatesFilter<"KnexMigrations"> | Date | string | null
  }

  export type KnexMigrationsLockWhereInput = {
    AND?: KnexMigrationsLockWhereInput | KnexMigrationsLockWhereInput[]
    OR?: KnexMigrationsLockWhereInput[]
    NOT?: KnexMigrationsLockWhereInput | KnexMigrationsLockWhereInput[]
    index?: IntFilter<"KnexMigrationsLock"> | number
    isLocked?: IntNullableFilter<"KnexMigrationsLock"> | number | null
  }

  export type KnexMigrationsLockOrderByWithRelationInput = {
    index?: SortOrder
    isLocked?: SortOrderInput | SortOrder
  }

  export type KnexMigrationsLockWhereUniqueInput = Prisma.AtLeast<{
    index?: number
    AND?: KnexMigrationsLockWhereInput | KnexMigrationsLockWhereInput[]
    OR?: KnexMigrationsLockWhereInput[]
    NOT?: KnexMigrationsLockWhereInput | KnexMigrationsLockWhereInput[]
    isLocked?: IntNullableFilter<"KnexMigrationsLock"> | number | null
  }, "index">

  export type KnexMigrationsLockOrderByWithAggregationInput = {
    index?: SortOrder
    isLocked?: SortOrderInput | SortOrder
    _count?: KnexMigrationsLockCountOrderByAggregateInput
    _avg?: KnexMigrationsLockAvgOrderByAggregateInput
    _max?: KnexMigrationsLockMaxOrderByAggregateInput
    _min?: KnexMigrationsLockMinOrderByAggregateInput
    _sum?: KnexMigrationsLockSumOrderByAggregateInput
  }

  export type KnexMigrationsLockScalarWhereWithAggregatesInput = {
    AND?: KnexMigrationsLockScalarWhereWithAggregatesInput | KnexMigrationsLockScalarWhereWithAggregatesInput[]
    OR?: KnexMigrationsLockScalarWhereWithAggregatesInput[]
    NOT?: KnexMigrationsLockScalarWhereWithAggregatesInput | KnexMigrationsLockScalarWhereWithAggregatesInput[]
    index?: IntWithAggregatesFilter<"KnexMigrationsLock"> | number
    isLocked?: IntNullableWithAggregatesFilter<"KnexMigrationsLock"> | number | null
  }

  export type LookupWhereInput = {
    AND?: LookupWhereInput | LookupWhereInput[]
    OR?: LookupWhereInput[]
    NOT?: LookupWhereInput | LookupWhereInput[]
    id?: IntFilter<"Lookup"> | number
    codeMaximum?: StringNullableFilter<"Lookup"> | string | null
    codeMinimum?: StringNullableFilter<"Lookup"> | string | null
    codeScale?: IntNullableFilter<"Lookup"> | number | null
    codeType?: StringFilter<"Lookup"> | string
    internationalize?: BoolFilter<"Lookup"> | boolean
    ordering?: StringFilter<"Lookup"> | string
    realm?: StringFilter<"Lookup"> | string
    valueMaximum?: StringNullableFilter<"Lookup"> | string | null
    valueMinimum?: StringNullableFilter<"Lookup"> | string | null
    valueScale?: IntNullableFilter<"Lookup"> | number | null
    valueType?: StringFilter<"Lookup"> | string
    lookupValue?: LookupValueListRelationFilter
  }

  export type LookupOrderByWithRelationInput = {
    id?: SortOrder
    codeMaximum?: SortOrderInput | SortOrder
    codeMinimum?: SortOrderInput | SortOrder
    codeScale?: SortOrderInput | SortOrder
    codeType?: SortOrder
    internationalize?: SortOrder
    ordering?: SortOrder
    realm?: SortOrder
    valueMaximum?: SortOrderInput | SortOrder
    valueMinimum?: SortOrderInput | SortOrder
    valueScale?: SortOrderInput | SortOrder
    valueType?: SortOrder
    lookupValue?: LookupValueOrderByRelationAggregateInput
  }

  export type LookupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    realm?: string
    AND?: LookupWhereInput | LookupWhereInput[]
    OR?: LookupWhereInput[]
    NOT?: LookupWhereInput | LookupWhereInput[]
    codeMaximum?: StringNullableFilter<"Lookup"> | string | null
    codeMinimum?: StringNullableFilter<"Lookup"> | string | null
    codeScale?: IntNullableFilter<"Lookup"> | number | null
    codeType?: StringFilter<"Lookup"> | string
    internationalize?: BoolFilter<"Lookup"> | boolean
    ordering?: StringFilter<"Lookup"> | string
    valueMaximum?: StringNullableFilter<"Lookup"> | string | null
    valueMinimum?: StringNullableFilter<"Lookup"> | string | null
    valueScale?: IntNullableFilter<"Lookup"> | number | null
    valueType?: StringFilter<"Lookup"> | string
    lookupValue?: LookupValueListRelationFilter
  }, "id" | "realm">

  export type LookupOrderByWithAggregationInput = {
    id?: SortOrder
    codeMaximum?: SortOrderInput | SortOrder
    codeMinimum?: SortOrderInput | SortOrder
    codeScale?: SortOrderInput | SortOrder
    codeType?: SortOrder
    internationalize?: SortOrder
    ordering?: SortOrder
    realm?: SortOrder
    valueMaximum?: SortOrderInput | SortOrder
    valueMinimum?: SortOrderInput | SortOrder
    valueScale?: SortOrderInput | SortOrder
    valueType?: SortOrder
    _count?: LookupCountOrderByAggregateInput
    _avg?: LookupAvgOrderByAggregateInput
    _max?: LookupMaxOrderByAggregateInput
    _min?: LookupMinOrderByAggregateInput
    _sum?: LookupSumOrderByAggregateInput
  }

  export type LookupScalarWhereWithAggregatesInput = {
    AND?: LookupScalarWhereWithAggregatesInput | LookupScalarWhereWithAggregatesInput[]
    OR?: LookupScalarWhereWithAggregatesInput[]
    NOT?: LookupScalarWhereWithAggregatesInput | LookupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lookup"> | number
    codeMaximum?: StringNullableWithAggregatesFilter<"Lookup"> | string | null
    codeMinimum?: StringNullableWithAggregatesFilter<"Lookup"> | string | null
    codeScale?: IntNullableWithAggregatesFilter<"Lookup"> | number | null
    codeType?: StringWithAggregatesFilter<"Lookup"> | string
    internationalize?: BoolWithAggregatesFilter<"Lookup"> | boolean
    ordering?: StringWithAggregatesFilter<"Lookup"> | string
    realm?: StringWithAggregatesFilter<"Lookup"> | string
    valueMaximum?: StringNullableWithAggregatesFilter<"Lookup"> | string | null
    valueMinimum?: StringNullableWithAggregatesFilter<"Lookup"> | string | null
    valueScale?: IntNullableWithAggregatesFilter<"Lookup"> | number | null
    valueType?: StringWithAggregatesFilter<"Lookup"> | string
  }

  export type LookupValueWhereInput = {
    AND?: LookupValueWhereInput | LookupValueWhereInput[]
    OR?: LookupValueWhereInput[]
    NOT?: LookupValueWhereInput | LookupValueWhereInput[]
    id?: IntFilter<"LookupValue"> | number
    code?: StringFilter<"LookupValue"> | string
    lookupId?: IntFilter<"LookupValue"> | number
    numericSequencer?: FloatFilter<"LookupValue"> | number
    sequencer?: IntFilter<"LookupValue"> | number
    stringSequencer?: StringFilter<"LookupValue"> | string
    value?: StringFilter<"LookupValue"> | string
    lookup?: XOR<LookupScalarRelationFilter, LookupWhereInput>
  }

  export type LookupValueOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    lookupId?: SortOrder
    numericSequencer?: SortOrder
    sequencer?: SortOrder
    stringSequencer?: SortOrder
    value?: SortOrder
    lookup?: LookupOrderByWithRelationInput
  }

  export type LookupValueWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    lookupId_code?: LookupValueLookupIdCodeCompoundUniqueInput
    AND?: LookupValueWhereInput | LookupValueWhereInput[]
    OR?: LookupValueWhereInput[]
    NOT?: LookupValueWhereInput | LookupValueWhereInput[]
    code?: StringFilter<"LookupValue"> | string
    lookupId?: IntFilter<"LookupValue"> | number
    numericSequencer?: FloatFilter<"LookupValue"> | number
    sequencer?: IntFilter<"LookupValue"> | number
    stringSequencer?: StringFilter<"LookupValue"> | string
    value?: StringFilter<"LookupValue"> | string
    lookup?: XOR<LookupScalarRelationFilter, LookupWhereInput>
  }, "id" | "lookupId_code">

  export type LookupValueOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    lookupId?: SortOrder
    numericSequencer?: SortOrder
    sequencer?: SortOrder
    stringSequencer?: SortOrder
    value?: SortOrder
    _count?: LookupValueCountOrderByAggregateInput
    _avg?: LookupValueAvgOrderByAggregateInput
    _max?: LookupValueMaxOrderByAggregateInput
    _min?: LookupValueMinOrderByAggregateInput
    _sum?: LookupValueSumOrderByAggregateInput
  }

  export type LookupValueScalarWhereWithAggregatesInput = {
    AND?: LookupValueScalarWhereWithAggregatesInput | LookupValueScalarWhereWithAggregatesInput[]
    OR?: LookupValueScalarWhereWithAggregatesInput[]
    NOT?: LookupValueScalarWhereWithAggregatesInput | LookupValueScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LookupValue"> | number
    code?: StringWithAggregatesFilter<"LookupValue"> | string
    lookupId?: IntWithAggregatesFilter<"LookupValue"> | number
    numericSequencer?: FloatWithAggregatesFilter<"LookupValue"> | number
    sequencer?: IntWithAggregatesFilter<"LookupValue"> | number
    stringSequencer?: StringWithAggregatesFilter<"LookupValue"> | string
    value?: StringWithAggregatesFilter<"LookupValue"> | string
  }

  export type MembershipWhereInput = {
    AND?: MembershipWhereInput | MembershipWhereInput[]
    OR?: MembershipWhereInput[]
    NOT?: MembershipWhereInput | MembershipWhereInput[]
    id?: IntFilter<"Membership"> | number
    arrivalDate?: DateTimeFilter<"Membership"> | Date | string
    attendance?: StringFilter<"Membership"> | string
    attending?: BoolFilter<"Membership"> | boolean
    departureDate?: DateTimeFilter<"Membership"> | Date | string
    hotelRoomId?: IntFilter<"Membership"> | number
    interestLevel?: StringFilter<"Membership"> | string
    message?: StringFilter<"Membership"> | string
    roomPreferenceAndNotes?: StringFilter<"Membership"> | string
    roomingPreferences?: StringFilter<"Membership"> | string
    roomingWith?: StringFilter<"Membership"> | string
    userId?: IntFilter<"Membership"> | number
    volunteer?: BoolFilter<"Membership"> | boolean
    year?: IntFilter<"Membership"> | number
    offerSubsidy?: BoolFilter<"Membership"> | boolean
    requestOldPrice?: BoolFilter<"Membership"> | boolean
    slotsAttending?: StringNullableFilter<"Membership"> | string | null
    gameAssignment?: GameAssignmentListRelationFilter
    gameChoice?: GameChoiceListRelationFilter
    gameSubmission?: GameSubmissionListRelationFilter
    hotelRoom?: XOR<HotelRoomScalarRelationFilter, HotelRoomWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactions?: TransactionsListRelationFilter
  }

  export type MembershipOrderByWithRelationInput = {
    id?: SortOrder
    arrivalDate?: SortOrder
    attendance?: SortOrder
    attending?: SortOrder
    departureDate?: SortOrder
    hotelRoomId?: SortOrder
    interestLevel?: SortOrder
    message?: SortOrder
    roomPreferenceAndNotes?: SortOrder
    roomingPreferences?: SortOrder
    roomingWith?: SortOrder
    userId?: SortOrder
    volunteer?: SortOrder
    year?: SortOrder
    offerSubsidy?: SortOrder
    requestOldPrice?: SortOrder
    slotsAttending?: SortOrderInput | SortOrder
    gameAssignment?: GameAssignmentOrderByRelationAggregateInput
    gameChoice?: GameChoiceOrderByRelationAggregateInput
    gameSubmission?: GameSubmissionOrderByRelationAggregateInput
    hotelRoom?: HotelRoomOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    transactions?: TransactionsOrderByRelationAggregateInput
  }

  export type MembershipWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MembershipWhereInput | MembershipWhereInput[]
    OR?: MembershipWhereInput[]
    NOT?: MembershipWhereInput | MembershipWhereInput[]
    arrivalDate?: DateTimeFilter<"Membership"> | Date | string
    attendance?: StringFilter<"Membership"> | string
    attending?: BoolFilter<"Membership"> | boolean
    departureDate?: DateTimeFilter<"Membership"> | Date | string
    hotelRoomId?: IntFilter<"Membership"> | number
    interestLevel?: StringFilter<"Membership"> | string
    message?: StringFilter<"Membership"> | string
    roomPreferenceAndNotes?: StringFilter<"Membership"> | string
    roomingPreferences?: StringFilter<"Membership"> | string
    roomingWith?: StringFilter<"Membership"> | string
    userId?: IntFilter<"Membership"> | number
    volunteer?: BoolFilter<"Membership"> | boolean
    year?: IntFilter<"Membership"> | number
    offerSubsidy?: BoolFilter<"Membership"> | boolean
    requestOldPrice?: BoolFilter<"Membership"> | boolean
    slotsAttending?: StringNullableFilter<"Membership"> | string | null
    gameAssignment?: GameAssignmentListRelationFilter
    gameChoice?: GameChoiceListRelationFilter
    gameSubmission?: GameSubmissionListRelationFilter
    hotelRoom?: XOR<HotelRoomScalarRelationFilter, HotelRoomWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactions?: TransactionsListRelationFilter
  }, "id">

  export type MembershipOrderByWithAggregationInput = {
    id?: SortOrder
    arrivalDate?: SortOrder
    attendance?: SortOrder
    attending?: SortOrder
    departureDate?: SortOrder
    hotelRoomId?: SortOrder
    interestLevel?: SortOrder
    message?: SortOrder
    roomPreferenceAndNotes?: SortOrder
    roomingPreferences?: SortOrder
    roomingWith?: SortOrder
    userId?: SortOrder
    volunteer?: SortOrder
    year?: SortOrder
    offerSubsidy?: SortOrder
    requestOldPrice?: SortOrder
    slotsAttending?: SortOrderInput | SortOrder
    _count?: MembershipCountOrderByAggregateInput
    _avg?: MembershipAvgOrderByAggregateInput
    _max?: MembershipMaxOrderByAggregateInput
    _min?: MembershipMinOrderByAggregateInput
    _sum?: MembershipSumOrderByAggregateInput
  }

  export type MembershipScalarWhereWithAggregatesInput = {
    AND?: MembershipScalarWhereWithAggregatesInput | MembershipScalarWhereWithAggregatesInput[]
    OR?: MembershipScalarWhereWithAggregatesInput[]
    NOT?: MembershipScalarWhereWithAggregatesInput | MembershipScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Membership"> | number
    arrivalDate?: DateTimeWithAggregatesFilter<"Membership"> | Date | string
    attendance?: StringWithAggregatesFilter<"Membership"> | string
    attending?: BoolWithAggregatesFilter<"Membership"> | boolean
    departureDate?: DateTimeWithAggregatesFilter<"Membership"> | Date | string
    hotelRoomId?: IntWithAggregatesFilter<"Membership"> | number
    interestLevel?: StringWithAggregatesFilter<"Membership"> | string
    message?: StringWithAggregatesFilter<"Membership"> | string
    roomPreferenceAndNotes?: StringWithAggregatesFilter<"Membership"> | string
    roomingPreferences?: StringWithAggregatesFilter<"Membership"> | string
    roomingWith?: StringWithAggregatesFilter<"Membership"> | string
    userId?: IntWithAggregatesFilter<"Membership"> | number
    volunteer?: BoolWithAggregatesFilter<"Membership"> | boolean
    year?: IntWithAggregatesFilter<"Membership"> | number
    offerSubsidy?: BoolWithAggregatesFilter<"Membership"> | boolean
    requestOldPrice?: BoolWithAggregatesFilter<"Membership"> | boolean
    slotsAttending?: StringNullableWithAggregatesFilter<"Membership"> | string | null
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: IntFilter<"Profile"> | number
    userId?: IntFilter<"Profile"> | number
    snailMailAddress?: StringNullableFilter<"Profile"> | string | null
    phoneNumber?: StringNullableFilter<"Profile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    snailMailAddress?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    userId?: IntFilter<"Profile"> | number
    snailMailAddress?: StringNullableFilter<"Profile"> | string | null
    phoneNumber?: StringNullableFilter<"Profile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    snailMailAddress?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profile"> | number
    userId?: IntWithAggregatesFilter<"Profile"> | number
    snailMailAddress?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Profile"> | string | null
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    authority?: StringFilter<"Role"> | string
    userRole?: UserRoleListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    authority?: SortOrder
    userRole?: UserRoleOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    authority?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    userRole?: UserRoleListRelationFilter
  }, "id" | "authority">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    authority?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    authority?: StringWithAggregatesFilter<"Role"> | string
  }

  export type RoomWhereInput = {
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    id?: IntFilter<"Room"> | number
    description?: StringFilter<"Room"> | string
    size?: IntFilter<"Room"> | number
    type?: StringFilter<"Room"> | string
    updated?: BoolFilter<"Room"> | boolean
    game?: GameListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    size?: SortOrder
    type?: SortOrder
    updated?: SortOrder
    game?: GameOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    description?: StringFilter<"Room"> | string
    size?: IntFilter<"Room"> | number
    type?: StringFilter<"Room"> | string
    updated?: BoolFilter<"Room"> | boolean
    game?: GameListRelationFilter
  }, "id">

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    size?: SortOrder
    type?: SortOrder
    updated?: SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    OR?: RoomScalarWhereWithAggregatesInput[]
    NOT?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Room"> | number
    description?: StringWithAggregatesFilter<"Room"> | string
    size?: IntWithAggregatesFilter<"Room"> | number
    type?: StringWithAggregatesFilter<"Room"> | string
    updated?: BoolWithAggregatesFilter<"Room"> | boolean
  }

  export type SettingWhereInput = {
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    id?: IntFilter<"Setting"> | number
    code?: StringFilter<"Setting"> | string
    type?: StringFilter<"Setting"> | string
    value?: StringFilter<"Setting"> | string
  }

  export type SettingOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
  }

  export type SettingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    code?: StringFilter<"Setting"> | string
    type?: StringFilter<"Setting"> | string
    value?: StringFilter<"Setting"> | string
  }, "id">

  export type SettingOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    _count?: SettingCountOrderByAggregateInput
    _avg?: SettingAvgOrderByAggregateInput
    _max?: SettingMaxOrderByAggregateInput
    _min?: SettingMinOrderByAggregateInput
    _sum?: SettingSumOrderByAggregateInput
  }

  export type SettingScalarWhereWithAggregatesInput = {
    AND?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    OR?: SettingScalarWhereWithAggregatesInput[]
    NOT?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Setting"> | number
    code?: StringWithAggregatesFilter<"Setting"> | string
    type?: StringWithAggregatesFilter<"Setting"> | string
    value?: StringWithAggregatesFilter<"Setting"> | string
  }

  export type ShirtOrderWhereInput = {
    AND?: ShirtOrderWhereInput | ShirtOrderWhereInput[]
    OR?: ShirtOrderWhereInput[]
    NOT?: ShirtOrderWhereInput | ShirtOrderWhereInput[]
    id?: IntFilter<"ShirtOrder"> | number
    deliveryMethod?: StringFilter<"ShirtOrder"> | string
    message?: StringFilter<"ShirtOrder"> | string
    userId?: IntFilter<"ShirtOrder"> | number
    year?: IntFilter<"ShirtOrder"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    shirtOrderItem?: ShirtOrderItemListRelationFilter
  }

  export type ShirtOrderOrderByWithRelationInput = {
    id?: SortOrder
    deliveryMethod?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    year?: SortOrder
    user?: UserOrderByWithRelationInput
    shirtOrderItem?: ShirtOrderItemOrderByRelationAggregateInput
  }

  export type ShirtOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShirtOrderWhereInput | ShirtOrderWhereInput[]
    OR?: ShirtOrderWhereInput[]
    NOT?: ShirtOrderWhereInput | ShirtOrderWhereInput[]
    deliveryMethod?: StringFilter<"ShirtOrder"> | string
    message?: StringFilter<"ShirtOrder"> | string
    userId?: IntFilter<"ShirtOrder"> | number
    year?: IntFilter<"ShirtOrder"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    shirtOrderItem?: ShirtOrderItemListRelationFilter
  }, "id">

  export type ShirtOrderOrderByWithAggregationInput = {
    id?: SortOrder
    deliveryMethod?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    year?: SortOrder
    _count?: ShirtOrderCountOrderByAggregateInput
    _avg?: ShirtOrderAvgOrderByAggregateInput
    _max?: ShirtOrderMaxOrderByAggregateInput
    _min?: ShirtOrderMinOrderByAggregateInput
    _sum?: ShirtOrderSumOrderByAggregateInput
  }

  export type ShirtOrderScalarWhereWithAggregatesInput = {
    AND?: ShirtOrderScalarWhereWithAggregatesInput | ShirtOrderScalarWhereWithAggregatesInput[]
    OR?: ShirtOrderScalarWhereWithAggregatesInput[]
    NOT?: ShirtOrderScalarWhereWithAggregatesInput | ShirtOrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShirtOrder"> | number
    deliveryMethod?: StringWithAggregatesFilter<"ShirtOrder"> | string
    message?: StringWithAggregatesFilter<"ShirtOrder"> | string
    userId?: IntWithAggregatesFilter<"ShirtOrder"> | number
    year?: IntWithAggregatesFilter<"ShirtOrder"> | number
  }

  export type ShirtOrderItemWhereInput = {
    AND?: ShirtOrderItemWhereInput | ShirtOrderItemWhereInput[]
    OR?: ShirtOrderItemWhereInput[]
    NOT?: ShirtOrderItemWhereInput | ShirtOrderItemWhereInput[]
    id?: IntFilter<"ShirtOrderItem"> | number
    orderId?: IntFilter<"ShirtOrderItem"> | number
    quantity?: IntFilter<"ShirtOrderItem"> | number
    size?: StringFilter<"ShirtOrderItem"> | string
    style?: StringFilter<"ShirtOrderItem"> | string
    itemsIdx?: IntNullableFilter<"ShirtOrderItem"> | number | null
    shirtOrder?: XOR<ShirtOrderScalarRelationFilter, ShirtOrderWhereInput>
  }

  export type ShirtOrderItemOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    size?: SortOrder
    style?: SortOrder
    itemsIdx?: SortOrderInput | SortOrder
    shirtOrder?: ShirtOrderOrderByWithRelationInput
  }

  export type ShirtOrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShirtOrderItemWhereInput | ShirtOrderItemWhereInput[]
    OR?: ShirtOrderItemWhereInput[]
    NOT?: ShirtOrderItemWhereInput | ShirtOrderItemWhereInput[]
    orderId?: IntFilter<"ShirtOrderItem"> | number
    quantity?: IntFilter<"ShirtOrderItem"> | number
    size?: StringFilter<"ShirtOrderItem"> | string
    style?: StringFilter<"ShirtOrderItem"> | string
    itemsIdx?: IntNullableFilter<"ShirtOrderItem"> | number | null
    shirtOrder?: XOR<ShirtOrderScalarRelationFilter, ShirtOrderWhereInput>
  }, "id">

  export type ShirtOrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    size?: SortOrder
    style?: SortOrder
    itemsIdx?: SortOrderInput | SortOrder
    _count?: ShirtOrderItemCountOrderByAggregateInput
    _avg?: ShirtOrderItemAvgOrderByAggregateInput
    _max?: ShirtOrderItemMaxOrderByAggregateInput
    _min?: ShirtOrderItemMinOrderByAggregateInput
    _sum?: ShirtOrderItemSumOrderByAggregateInput
  }

  export type ShirtOrderItemScalarWhereWithAggregatesInput = {
    AND?: ShirtOrderItemScalarWhereWithAggregatesInput | ShirtOrderItemScalarWhereWithAggregatesInput[]
    OR?: ShirtOrderItemScalarWhereWithAggregatesInput[]
    NOT?: ShirtOrderItemScalarWhereWithAggregatesInput | ShirtOrderItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShirtOrderItem"> | number
    orderId?: IntWithAggregatesFilter<"ShirtOrderItem"> | number
    quantity?: IntWithAggregatesFilter<"ShirtOrderItem"> | number
    size?: StringWithAggregatesFilter<"ShirtOrderItem"> | string
    style?: StringWithAggregatesFilter<"ShirtOrderItem"> | string
    itemsIdx?: IntNullableWithAggregatesFilter<"ShirtOrderItem"> | number | null
  }

  export type SlotWhereInput = {
    AND?: SlotWhereInput | SlotWhereInput[]
    OR?: SlotWhereInput[]
    NOT?: SlotWhereInput | SlotWhereInput[]
    id?: IntFilter<"Slot"> | number
    slot?: IntFilter<"Slot"> | number
    day?: StringFilter<"Slot"> | string
    formattedDate?: StringFilter<"Slot"> | string
    length?: StringFilter<"Slot"> | string
    time?: StringFilter<"Slot"> | string
    game?: GameListRelationFilter
    gameChoice?: GameChoiceListRelationFilter
  }

  export type SlotOrderByWithRelationInput = {
    id?: SortOrder
    slot?: SortOrder
    day?: SortOrder
    formattedDate?: SortOrder
    length?: SortOrder
    time?: SortOrder
    game?: GameOrderByRelationAggregateInput
    gameChoice?: GameChoiceOrderByRelationAggregateInput
  }

  export type SlotWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SlotWhereInput | SlotWhereInput[]
    OR?: SlotWhereInput[]
    NOT?: SlotWhereInput | SlotWhereInput[]
    slot?: IntFilter<"Slot"> | number
    day?: StringFilter<"Slot"> | string
    formattedDate?: StringFilter<"Slot"> | string
    length?: StringFilter<"Slot"> | string
    time?: StringFilter<"Slot"> | string
    game?: GameListRelationFilter
    gameChoice?: GameChoiceListRelationFilter
  }, "id">

  export type SlotOrderByWithAggregationInput = {
    id?: SortOrder
    slot?: SortOrder
    day?: SortOrder
    formattedDate?: SortOrder
    length?: SortOrder
    time?: SortOrder
    _count?: SlotCountOrderByAggregateInput
    _avg?: SlotAvgOrderByAggregateInput
    _max?: SlotMaxOrderByAggregateInput
    _min?: SlotMinOrderByAggregateInput
    _sum?: SlotSumOrderByAggregateInput
  }

  export type SlotScalarWhereWithAggregatesInput = {
    AND?: SlotScalarWhereWithAggregatesInput | SlotScalarWhereWithAggregatesInput[]
    OR?: SlotScalarWhereWithAggregatesInput[]
    NOT?: SlotScalarWhereWithAggregatesInput | SlotScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Slot"> | number
    slot?: IntWithAggregatesFilter<"Slot"> | number
    day?: StringWithAggregatesFilter<"Slot"> | string
    formattedDate?: StringWithAggregatesFilter<"Slot"> | string
    length?: StringWithAggregatesFilter<"Slot"> | string
    time?: StringWithAggregatesFilter<"Slot"> | string
  }

  export type StripeWhereInput = {
    AND?: StripeWhereInput | StripeWhereInput[]
    OR?: StripeWhereInput[]
    NOT?: StripeWhereInput | StripeWhereInput[]
    id?: IntFilter<"Stripe"> | number
    data?: JsonFilter<"Stripe">
  }

  export type StripeOrderByWithRelationInput = {
    id?: SortOrder
    data?: SortOrder
  }

  export type StripeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StripeWhereInput | StripeWhereInput[]
    OR?: StripeWhereInput[]
    NOT?: StripeWhereInput | StripeWhereInput[]
    data?: JsonFilter<"Stripe">
  }, "id">

  export type StripeOrderByWithAggregationInput = {
    id?: SortOrder
    data?: SortOrder
    _count?: StripeCountOrderByAggregateInput
    _avg?: StripeAvgOrderByAggregateInput
    _max?: StripeMaxOrderByAggregateInput
    _min?: StripeMinOrderByAggregateInput
    _sum?: StripeSumOrderByAggregateInput
  }

  export type StripeScalarWhereWithAggregatesInput = {
    AND?: StripeScalarWhereWithAggregatesInput | StripeScalarWhereWithAggregatesInput[]
    OR?: StripeScalarWhereWithAggregatesInput[]
    NOT?: StripeScalarWhereWithAggregatesInput | StripeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Stripe"> | number
    data?: JsonWithAggregatesFilter<"Stripe">
  }

  export type TransactionsWhereInput = {
    AND?: TransactionsWhereInput | TransactionsWhereInput[]
    OR?: TransactionsWhereInput[]
    NOT?: TransactionsWhereInput | TransactionsWhereInput[]
    id?: BigIntFilter<"Transactions"> | bigint | number
    userId?: IntFilter<"Transactions"> | number
    memberId?: IntNullableFilter<"Transactions"> | number | null
    year?: IntFilter<"Transactions"> | number
    timestamp?: DateTimeFilter<"Transactions"> | Date | string
    amount?: FloatFilter<"Transactions"> | number
    origin?: IntNullableFilter<"Transactions"> | number | null
    stripe?: BoolFilter<"Transactions"> | boolean
    notes?: StringFilter<"Transactions"> | string
    data?: JsonFilter<"Transactions">
    membership?: XOR<MembershipNullableScalarRelationFilter, MembershipWhereInput> | null
    userTransactionsOriginTouser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    userTransactionsUserIdTouser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TransactionsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    memberId?: SortOrderInput | SortOrder
    year?: SortOrder
    timestamp?: SortOrder
    amount?: SortOrder
    origin?: SortOrderInput | SortOrder
    stripe?: SortOrder
    notes?: SortOrder
    data?: SortOrder
    membership?: MembershipOrderByWithRelationInput
    userTransactionsOriginTouser?: UserOrderByWithRelationInput
    userTransactionsUserIdTouser?: UserOrderByWithRelationInput
  }

  export type TransactionsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: TransactionsWhereInput | TransactionsWhereInput[]
    OR?: TransactionsWhereInput[]
    NOT?: TransactionsWhereInput | TransactionsWhereInput[]
    userId?: IntFilter<"Transactions"> | number
    memberId?: IntNullableFilter<"Transactions"> | number | null
    year?: IntFilter<"Transactions"> | number
    timestamp?: DateTimeFilter<"Transactions"> | Date | string
    amount?: FloatFilter<"Transactions"> | number
    origin?: IntNullableFilter<"Transactions"> | number | null
    stripe?: BoolFilter<"Transactions"> | boolean
    notes?: StringFilter<"Transactions"> | string
    data?: JsonFilter<"Transactions">
    membership?: XOR<MembershipNullableScalarRelationFilter, MembershipWhereInput> | null
    userTransactionsOriginTouser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    userTransactionsUserIdTouser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TransactionsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    memberId?: SortOrderInput | SortOrder
    year?: SortOrder
    timestamp?: SortOrder
    amount?: SortOrder
    origin?: SortOrderInput | SortOrder
    stripe?: SortOrder
    notes?: SortOrder
    data?: SortOrder
    _count?: TransactionsCountOrderByAggregateInput
    _avg?: TransactionsAvgOrderByAggregateInput
    _max?: TransactionsMaxOrderByAggregateInput
    _min?: TransactionsMinOrderByAggregateInput
    _sum?: TransactionsSumOrderByAggregateInput
  }

  export type TransactionsScalarWhereWithAggregatesInput = {
    AND?: TransactionsScalarWhereWithAggregatesInput | TransactionsScalarWhereWithAggregatesInput[]
    OR?: TransactionsScalarWhereWithAggregatesInput[]
    NOT?: TransactionsScalarWhereWithAggregatesInput | TransactionsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Transactions"> | bigint | number
    userId?: IntWithAggregatesFilter<"Transactions"> | number
    memberId?: IntNullableWithAggregatesFilter<"Transactions"> | number | null
    year?: IntWithAggregatesFilter<"Transactions"> | number
    timestamp?: DateTimeWithAggregatesFilter<"Transactions"> | Date | string
    amount?: FloatWithAggregatesFilter<"Transactions"> | number
    origin?: IntNullableWithAggregatesFilter<"Transactions"> | number | null
    stripe?: BoolWithAggregatesFilter<"Transactions"> | boolean
    notes?: StringWithAggregatesFilter<"Transactions"> | string
    data?: JsonWithAggregatesFilter<"Transactions">
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    fullName?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    displayName?: StringNullableFilter<"User"> | string | null
    balance?: FloatFilter<"User"> | number
    game?: GameListRelationFilter
    membership?: MembershipListRelationFilter
    profile?: ProfileListRelationFilter
    shirtOrder?: ShirtOrderListRelationFilter
    transactionsTransactionsOriginTouser?: TransactionsListRelationFilter
    transactionsTransactionsUserIdTouser?: TransactionsListRelationFilter
    userRole?: UserRoleListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    displayName?: SortOrderInput | SortOrder
    balance?: SortOrder
    game?: GameOrderByRelationAggregateInput
    membership?: MembershipOrderByRelationAggregateInput
    profile?: ProfileOrderByRelationAggregateInput
    shirtOrder?: ShirtOrderOrderByRelationAggregateInput
    transactionsTransactionsOriginTouser?: TransactionsOrderByRelationAggregateInput
    transactionsTransactionsUserIdTouser?: TransactionsOrderByRelationAggregateInput
    userRole?: UserRoleOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullName?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    displayName?: StringNullableFilter<"User"> | string | null
    balance?: FloatFilter<"User"> | number
    game?: GameListRelationFilter
    membership?: MembershipListRelationFilter
    profile?: ProfileListRelationFilter
    shirtOrder?: ShirtOrderListRelationFilter
    transactionsTransactionsOriginTouser?: TransactionsListRelationFilter
    transactionsTransactionsUserIdTouser?: TransactionsListRelationFilter
    userRole?: UserRoleListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    displayName?: SortOrderInput | SortOrder
    balance?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    displayName?: StringNullableWithAggregatesFilter<"User"> | string | null
    balance?: FloatWithAggregatesFilter<"User"> | number
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    roleId?: IntFilter<"UserRole"> | number
    userId?: IntFilter<"UserRole"> | number
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserRoleOrderByWithRelationInput = {
    roleId?: SortOrder
    userId?: SortOrder
    role?: RoleOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    roleId_userId?: UserRoleRoleIdUserIdCompoundUniqueInput
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    roleId?: IntFilter<"UserRole"> | number
    userId?: IntFilter<"UserRole"> | number
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "roleId_userId">

  export type UserRoleOrderByWithAggregationInput = {
    roleId?: SortOrder
    userId?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _avg?: UserRoleAvgOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
    _sum?: UserRoleSumOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    roleId?: IntWithAggregatesFilter<"UserRole"> | number
    userId?: IntWithAggregatesFilter<"UserRole"> | number
  }

  export type GameCreateInput = {
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    shortName?: string | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    full?: boolean | null
    user?: UserCreateNestedOneWithoutGameInput
    room?: RoomCreateNestedOneWithoutGameInput
    slot?: SlotCreateNestedOneWithoutGameInput
    gameAssignment?: GameAssignmentCreateNestedManyWithoutGameInput
    gameChoice?: GameChoiceCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: number
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    roomId?: number | null
    shortName?: string | null
    slotId?: number | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    authorId?: number | null
    full?: boolean | null
    gameAssignment?: GameAssignmentUncheckedCreateNestedManyWithoutGameInput
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneWithoutGameNestedInput
    room?: RoomUpdateOneWithoutGameNestedInput
    slot?: SlotUpdateOneWithoutGameNestedInput
    gameAssignment?: GameAssignmentUpdateManyWithoutGameNestedInput
    gameChoice?: GameChoiceUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    roomId?: NullableIntFieldUpdateOperationsInput | number | null
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slotId?: NullableIntFieldUpdateOperationsInput | number | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameAssignment?: GameAssignmentUncheckedUpdateManyWithoutGameNestedInput
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: number
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    roomId?: number | null
    shortName?: string | null
    slotId?: number | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    authorId?: number | null
    full?: boolean | null
  }

  export type GameUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type GameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    roomId?: NullableIntFieldUpdateOperationsInput | number | null
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slotId?: NullableIntFieldUpdateOperationsInput | number | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type GameAssignmentCreateInput = {
    gm: number
    year: number
    game: GameCreateNestedOneWithoutGameAssignmentInput
    membership: MembershipCreateNestedOneWithoutGameAssignmentInput
  }

  export type GameAssignmentUncheckedCreateInput = {
    memberId: number
    gameId: number
    gm: number
    year: number
  }

  export type GameAssignmentUpdateInput = {
    gm?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    game?: GameUpdateOneRequiredWithoutGameAssignmentNestedInput
    membership?: MembershipUpdateOneRequiredWithoutGameAssignmentNestedInput
  }

  export type GameAssignmentUncheckedUpdateInput = {
    memberId?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    gm?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameAssignmentCreateManyInput = {
    memberId: number
    gameId: number
    gm: number
    year: number
  }

  export type GameAssignmentUpdateManyMutationInput = {
    gm?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameAssignmentUncheckedUpdateManyInput = {
    memberId?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    gm?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameChoiceCreateInput = {
    rank: number
    year: number
    returningPlayer: boolean
    game?: GameCreateNestedOneWithoutGameChoiceInput
    membership: MembershipCreateNestedOneWithoutGameChoiceInput
    slot: SlotCreateNestedOneWithoutGameChoiceInput
  }

  export type GameChoiceUncheckedCreateInput = {
    id?: number
    gameId?: number | null
    memberId: number
    rank: number
    slotId: number
    year: number
    returningPlayer: boolean
  }

  export type GameChoiceUpdateInput = {
    rank?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
    game?: GameUpdateOneWithoutGameChoiceNestedInput
    membership?: MembershipUpdateOneRequiredWithoutGameChoiceNestedInput
    slot?: SlotUpdateOneRequiredWithoutGameChoiceNestedInput
  }

  export type GameChoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
    memberId?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    slotId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameChoiceCreateManyInput = {
    id?: number
    gameId?: number | null
    memberId: number
    rank: number
    slotId: number
    year: number
    returningPlayer: boolean
  }

  export type GameChoiceUpdateManyMutationInput = {
    rank?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameChoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
    memberId?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    slotId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameSubmissionCreateInput = {
    message: string
    year: number
    membership: MembershipCreateNestedOneWithoutGameSubmissionInput
  }

  export type GameSubmissionUncheckedCreateInput = {
    id?: number
    memberId: number
    message: string
    year: number
  }

  export type GameSubmissionUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    membership?: MembershipUpdateOneRequiredWithoutGameSubmissionNestedInput
  }

  export type GameSubmissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameSubmissionCreateManyInput = {
    id?: number
    memberId: number
    message: string
    year: number
  }

  export type GameSubmissionUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameSubmissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
  }

  export type HotelRoomCreateInput = {
    description: string
    gamingRoom: boolean
    occupancy: string
    quantity: number
    rate: string
    bathroomType: string
    type: string
    membership?: MembershipCreateNestedManyWithoutHotelRoomInput
  }

  export type HotelRoomUncheckedCreateInput = {
    id?: number
    description: string
    gamingRoom: boolean
    occupancy: string
    quantity: number
    rate: string
    bathroomType: string
    type: string
    membership?: MembershipUncheckedCreateNestedManyWithoutHotelRoomInput
  }

  export type HotelRoomUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    gamingRoom?: BoolFieldUpdateOperationsInput | boolean
    occupancy?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    rate?: StringFieldUpdateOperationsInput | string
    bathroomType?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    membership?: MembershipUpdateManyWithoutHotelRoomNestedInput
  }

  export type HotelRoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    gamingRoom?: BoolFieldUpdateOperationsInput | boolean
    occupancy?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    rate?: StringFieldUpdateOperationsInput | string
    bathroomType?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    membership?: MembershipUncheckedUpdateManyWithoutHotelRoomNestedInput
  }

  export type HotelRoomCreateManyInput = {
    id?: number
    description: string
    gamingRoom: boolean
    occupancy: string
    quantity: number
    rate: string
    bathroomType: string
    type: string
  }

  export type HotelRoomUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    gamingRoom?: BoolFieldUpdateOperationsInput | boolean
    occupancy?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    rate?: StringFieldUpdateOperationsInput | string
    bathroomType?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type HotelRoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    gamingRoom?: BoolFieldUpdateOperationsInput | boolean
    occupancy?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    rate?: StringFieldUpdateOperationsInput | string
    bathroomType?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type HotelRoomDetailsCreateInput = {
    id?: bigint | number
    version: bigint | number
    bathroomType: string
    comment: string
    enabled: boolean
    gamingRoom: boolean
    internalRoomType: string
    name: string
    reserved: boolean
    reservedFor: string
    roomType: string
    formattedRoomType: string
  }

  export type HotelRoomDetailsUncheckedCreateInput = {
    id?: bigint | number
    version: bigint | number
    bathroomType: string
    comment: string
    enabled: boolean
    gamingRoom: boolean
    internalRoomType: string
    name: string
    reserved: boolean
    reservedFor: string
    roomType: string
    formattedRoomType: string
  }

  export type HotelRoomDetailsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    version?: BigIntFieldUpdateOperationsInput | bigint | number
    bathroomType?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    gamingRoom?: BoolFieldUpdateOperationsInput | boolean
    internalRoomType?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    reserved?: BoolFieldUpdateOperationsInput | boolean
    reservedFor?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    formattedRoomType?: StringFieldUpdateOperationsInput | string
  }

  export type HotelRoomDetailsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    version?: BigIntFieldUpdateOperationsInput | bigint | number
    bathroomType?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    gamingRoom?: BoolFieldUpdateOperationsInput | boolean
    internalRoomType?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    reserved?: BoolFieldUpdateOperationsInput | boolean
    reservedFor?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    formattedRoomType?: StringFieldUpdateOperationsInput | string
  }

  export type HotelRoomDetailsCreateManyInput = {
    id?: bigint | number
    version: bigint | number
    bathroomType: string
    comment: string
    enabled: boolean
    gamingRoom: boolean
    internalRoomType: string
    name: string
    reserved: boolean
    reservedFor: string
    roomType: string
    formattedRoomType: string
  }

  export type HotelRoomDetailsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    version?: BigIntFieldUpdateOperationsInput | bigint | number
    bathroomType?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    gamingRoom?: BoolFieldUpdateOperationsInput | boolean
    internalRoomType?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    reserved?: BoolFieldUpdateOperationsInput | boolean
    reservedFor?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    formattedRoomType?: StringFieldUpdateOperationsInput | string
  }

  export type HotelRoomDetailsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    version?: BigIntFieldUpdateOperationsInput | bigint | number
    bathroomType?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    gamingRoom?: BoolFieldUpdateOperationsInput | boolean
    internalRoomType?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    reserved?: BoolFieldUpdateOperationsInput | boolean
    reservedFor?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    formattedRoomType?: StringFieldUpdateOperationsInput | string
  }

  export type KnexMigrationsCreateInput = {
    name?: string | null
    batch?: number | null
    migrationTime?: Date | string | null
  }

  export type KnexMigrationsUncheckedCreateInput = {
    id?: number
    name?: string | null
    batch?: number | null
    migrationTime?: Date | string | null
  }

  export type KnexMigrationsUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    batch?: NullableIntFieldUpdateOperationsInput | number | null
    migrationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KnexMigrationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    batch?: NullableIntFieldUpdateOperationsInput | number | null
    migrationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KnexMigrationsCreateManyInput = {
    id?: number
    name?: string | null
    batch?: number | null
    migrationTime?: Date | string | null
  }

  export type KnexMigrationsUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    batch?: NullableIntFieldUpdateOperationsInput | number | null
    migrationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KnexMigrationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    batch?: NullableIntFieldUpdateOperationsInput | number | null
    migrationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KnexMigrationsLockCreateInput = {
    isLocked?: number | null
  }

  export type KnexMigrationsLockUncheckedCreateInput = {
    index?: number
    isLocked?: number | null
  }

  export type KnexMigrationsLockUpdateInput = {
    isLocked?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type KnexMigrationsLockUncheckedUpdateInput = {
    index?: IntFieldUpdateOperationsInput | number
    isLocked?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type KnexMigrationsLockCreateManyInput = {
    index?: number
    isLocked?: number | null
  }

  export type KnexMigrationsLockUpdateManyMutationInput = {
    isLocked?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type KnexMigrationsLockUncheckedUpdateManyInput = {
    index?: IntFieldUpdateOperationsInput | number
    isLocked?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LookupCreateInput = {
    codeMaximum?: string | null
    codeMinimum?: string | null
    codeScale?: number | null
    codeType: string
    internationalize: boolean
    ordering: string
    realm: string
    valueMaximum?: string | null
    valueMinimum?: string | null
    valueScale?: number | null
    valueType: string
    lookupValue?: LookupValueCreateNestedManyWithoutLookupInput
  }

  export type LookupUncheckedCreateInput = {
    id?: number
    codeMaximum?: string | null
    codeMinimum?: string | null
    codeScale?: number | null
    codeType: string
    internationalize: boolean
    ordering: string
    realm: string
    valueMaximum?: string | null
    valueMinimum?: string | null
    valueScale?: number | null
    valueType: string
    lookupValue?: LookupValueUncheckedCreateNestedManyWithoutLookupInput
  }

  export type LookupUpdateInput = {
    codeMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    codeMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    codeScale?: NullableIntFieldUpdateOperationsInput | number | null
    codeType?: StringFieldUpdateOperationsInput | string
    internationalize?: BoolFieldUpdateOperationsInput | boolean
    ordering?: StringFieldUpdateOperationsInput | string
    realm?: StringFieldUpdateOperationsInput | string
    valueMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    valueMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    valueScale?: NullableIntFieldUpdateOperationsInput | number | null
    valueType?: StringFieldUpdateOperationsInput | string
    lookupValue?: LookupValueUpdateManyWithoutLookupNestedInput
  }

  export type LookupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    codeMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    codeMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    codeScale?: NullableIntFieldUpdateOperationsInput | number | null
    codeType?: StringFieldUpdateOperationsInput | string
    internationalize?: BoolFieldUpdateOperationsInput | boolean
    ordering?: StringFieldUpdateOperationsInput | string
    realm?: StringFieldUpdateOperationsInput | string
    valueMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    valueMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    valueScale?: NullableIntFieldUpdateOperationsInput | number | null
    valueType?: StringFieldUpdateOperationsInput | string
    lookupValue?: LookupValueUncheckedUpdateManyWithoutLookupNestedInput
  }

  export type LookupCreateManyInput = {
    id?: number
    codeMaximum?: string | null
    codeMinimum?: string | null
    codeScale?: number | null
    codeType: string
    internationalize: boolean
    ordering: string
    realm: string
    valueMaximum?: string | null
    valueMinimum?: string | null
    valueScale?: number | null
    valueType: string
  }

  export type LookupUpdateManyMutationInput = {
    codeMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    codeMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    codeScale?: NullableIntFieldUpdateOperationsInput | number | null
    codeType?: StringFieldUpdateOperationsInput | string
    internationalize?: BoolFieldUpdateOperationsInput | boolean
    ordering?: StringFieldUpdateOperationsInput | string
    realm?: StringFieldUpdateOperationsInput | string
    valueMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    valueMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    valueScale?: NullableIntFieldUpdateOperationsInput | number | null
    valueType?: StringFieldUpdateOperationsInput | string
  }

  export type LookupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    codeMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    codeMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    codeScale?: NullableIntFieldUpdateOperationsInput | number | null
    codeType?: StringFieldUpdateOperationsInput | string
    internationalize?: BoolFieldUpdateOperationsInput | boolean
    ordering?: StringFieldUpdateOperationsInput | string
    realm?: StringFieldUpdateOperationsInput | string
    valueMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    valueMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    valueScale?: NullableIntFieldUpdateOperationsInput | number | null
    valueType?: StringFieldUpdateOperationsInput | string
  }

  export type LookupValueCreateInput = {
    code: string
    numericSequencer: number
    sequencer: number
    stringSequencer: string
    value: string
    lookup: LookupCreateNestedOneWithoutLookupValueInput
  }

  export type LookupValueUncheckedCreateInput = {
    id?: number
    code: string
    lookupId: number
    numericSequencer: number
    sequencer: number
    stringSequencer: string
    value: string
  }

  export type LookupValueUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    numericSequencer?: FloatFieldUpdateOperationsInput | number
    sequencer?: IntFieldUpdateOperationsInput | number
    stringSequencer?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    lookup?: LookupUpdateOneRequiredWithoutLookupValueNestedInput
  }

  export type LookupValueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    lookupId?: IntFieldUpdateOperationsInput | number
    numericSequencer?: FloatFieldUpdateOperationsInput | number
    sequencer?: IntFieldUpdateOperationsInput | number
    stringSequencer?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type LookupValueCreateManyInput = {
    id?: number
    code: string
    lookupId: number
    numericSequencer: number
    sequencer: number
    stringSequencer: string
    value: string
  }

  export type LookupValueUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    numericSequencer?: FloatFieldUpdateOperationsInput | number
    sequencer?: IntFieldUpdateOperationsInput | number
    stringSequencer?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type LookupValueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    lookupId?: IntFieldUpdateOperationsInput | number
    numericSequencer?: FloatFieldUpdateOperationsInput | number
    sequencer?: IntFieldUpdateOperationsInput | number
    stringSequencer?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type MembershipCreateInput = {
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentCreateNestedManyWithoutMembershipInput
    gameChoice?: GameChoiceCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionCreateNestedManyWithoutMembershipInput
    hotelRoom: HotelRoomCreateNestedOneWithoutMembershipInput
    user: UserCreateNestedOneWithoutMembershipInput
    transactions?: TransactionsCreateNestedManyWithoutMembershipInput
  }

  export type MembershipUncheckedCreateInput = {
    id?: number
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    hotelRoomId: number
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    userId: number
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentUncheckedCreateNestedManyWithoutMembershipInput
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionUncheckedCreateNestedManyWithoutMembershipInput
    transactions?: TransactionsUncheckedCreateNestedManyWithoutMembershipInput
  }

  export type MembershipUpdateInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUpdateManyWithoutMembershipNestedInput
    gameChoice?: GameChoiceUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUpdateManyWithoutMembershipNestedInput
    hotelRoom?: HotelRoomUpdateOneRequiredWithoutMembershipNestedInput
    user?: UserUpdateOneRequiredWithoutMembershipNestedInput
    transactions?: TransactionsUpdateManyWithoutMembershipNestedInput
  }

  export type MembershipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hotelRoomId?: IntFieldUpdateOperationsInput | number
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUncheckedUpdateManyWithoutMembershipNestedInput
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUncheckedUpdateManyWithoutMembershipNestedInput
    transactions?: TransactionsUncheckedUpdateManyWithoutMembershipNestedInput
  }

  export type MembershipCreateManyInput = {
    id?: number
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    hotelRoomId: number
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    userId: number
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
  }

  export type MembershipUpdateManyMutationInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MembershipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hotelRoomId?: IntFieldUpdateOperationsInput | number
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateInput = {
    snailMailAddress?: string | null
    phoneNumber?: string | null
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    userId: number
    snailMailAddress?: string | null
    phoneNumber?: string | null
  }

  export type ProfileUpdateInput = {
    snailMailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    snailMailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateManyInput = {
    id?: number
    userId: number
    snailMailAddress?: string | null
    phoneNumber?: string | null
  }

  export type ProfileUpdateManyMutationInput = {
    snailMailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    snailMailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleCreateInput = {
    authority: string
    userRole?: UserRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    authority: string
    userRole?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    authority?: StringFieldUpdateOperationsInput | string
    userRole?: UserRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    authority?: StringFieldUpdateOperationsInput | string
    userRole?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    authority: string
  }

  export type RoleUpdateManyMutationInput = {
    authority?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    authority?: StringFieldUpdateOperationsInput | string
  }

  export type RoomCreateInput = {
    description: string
    size: number
    type: string
    updated: boolean
    game?: GameCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateInput = {
    id?: number
    description: string
    size: number
    type: string
    updated: boolean
    game?: GameUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updated?: BoolFieldUpdateOperationsInput | boolean
    game?: GameUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updated?: BoolFieldUpdateOperationsInput | boolean
    game?: GameUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomCreateManyInput = {
    id?: number
    description: string
    size: number
    type: string
    updated: boolean
  }

  export type RoomUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SettingCreateInput = {
    code: string
    type: string
    value: string
  }

  export type SettingUncheckedCreateInput = {
    id?: number
    code: string
    type: string
    value: string
  }

  export type SettingUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SettingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SettingCreateManyInput = {
    id?: number
    code: string
    type: string
    value: string
  }

  export type SettingUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SettingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ShirtOrderCreateInput = {
    deliveryMethod: string
    message: string
    year: number
    user: UserCreateNestedOneWithoutShirtOrderInput
    shirtOrderItem?: ShirtOrderItemCreateNestedManyWithoutShirtOrderInput
  }

  export type ShirtOrderUncheckedCreateInput = {
    id?: number
    deliveryMethod: string
    message: string
    userId: number
    year: number
    shirtOrderItem?: ShirtOrderItemUncheckedCreateNestedManyWithoutShirtOrderInput
  }

  export type ShirtOrderUpdateInput = {
    deliveryMethod?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutShirtOrderNestedInput
    shirtOrderItem?: ShirtOrderItemUpdateManyWithoutShirtOrderNestedInput
  }

  export type ShirtOrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryMethod?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    shirtOrderItem?: ShirtOrderItemUncheckedUpdateManyWithoutShirtOrderNestedInput
  }

  export type ShirtOrderCreateManyInput = {
    id?: number
    deliveryMethod: string
    message: string
    userId: number
    year: number
  }

  export type ShirtOrderUpdateManyMutationInput = {
    deliveryMethod?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
  }

  export type ShirtOrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryMethod?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
  }

  export type ShirtOrderItemCreateInput = {
    quantity: number
    size: string
    style: string
    itemsIdx?: number | null
    shirtOrder: ShirtOrderCreateNestedOneWithoutShirtOrderItemInput
  }

  export type ShirtOrderItemUncheckedCreateInput = {
    id?: number
    orderId: number
    quantity: number
    size: string
    style: string
    itemsIdx?: number | null
  }

  export type ShirtOrderItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    size?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    itemsIdx?: NullableIntFieldUpdateOperationsInput | number | null
    shirtOrder?: ShirtOrderUpdateOneRequiredWithoutShirtOrderItemNestedInput
  }

  export type ShirtOrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    size?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    itemsIdx?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShirtOrderItemCreateManyInput = {
    id?: number
    orderId: number
    quantity: number
    size: string
    style: string
    itemsIdx?: number | null
  }

  export type ShirtOrderItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    size?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    itemsIdx?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShirtOrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    size?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    itemsIdx?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SlotCreateInput = {
    slot: number
    day: string
    formattedDate: string
    length: string
    time: string
    game?: GameCreateNestedManyWithoutSlotInput
    gameChoice?: GameChoiceCreateNestedManyWithoutSlotInput
  }

  export type SlotUncheckedCreateInput = {
    id?: number
    slot: number
    day: string
    formattedDate: string
    length: string
    time: string
    game?: GameUncheckedCreateNestedManyWithoutSlotInput
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutSlotInput
  }

  export type SlotUpdateInput = {
    slot?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    formattedDate?: StringFieldUpdateOperationsInput | string
    length?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    game?: GameUpdateManyWithoutSlotNestedInput
    gameChoice?: GameChoiceUpdateManyWithoutSlotNestedInput
  }

  export type SlotUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    slot?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    formattedDate?: StringFieldUpdateOperationsInput | string
    length?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    game?: GameUncheckedUpdateManyWithoutSlotNestedInput
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutSlotNestedInput
  }

  export type SlotCreateManyInput = {
    id?: number
    slot: number
    day: string
    formattedDate: string
    length: string
    time: string
  }

  export type SlotUpdateManyMutationInput = {
    slot?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    formattedDate?: StringFieldUpdateOperationsInput | string
    length?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type SlotUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    slot?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    formattedDate?: StringFieldUpdateOperationsInput | string
    length?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type StripeCreateInput = {
    data: JsonNullValueInput | InputJsonValue
  }

  export type StripeUncheckedCreateInput = {
    id?: number
    data: JsonNullValueInput | InputJsonValue
  }

  export type StripeUpdateInput = {
    data?: JsonNullValueInput | InputJsonValue
  }

  export type StripeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: JsonNullValueInput | InputJsonValue
  }

  export type StripeCreateManyInput = {
    id?: number
    data: JsonNullValueInput | InputJsonValue
  }

  export type StripeUpdateManyMutationInput = {
    data?: JsonNullValueInput | InputJsonValue
  }

  export type StripeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsCreateInput = {
    id?: bigint | number
    year: number
    timestamp?: Date | string
    amount: number
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
    membership?: MembershipCreateNestedOneWithoutTransactionsInput
    userTransactionsOriginTouser?: UserCreateNestedOneWithoutTransactionsTransactionsOriginTouserInput
    userTransactionsUserIdTouser: UserCreateNestedOneWithoutTransactionsTransactionsUserIdTouserInput
  }

  export type TransactionsUncheckedCreateInput = {
    id?: bigint | number
    userId: number
    memberId?: number | null
    year: number
    timestamp?: Date | string
    amount: number
    origin?: number | null
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    membership?: MembershipUpdateOneWithoutTransactionsNestedInput
    userTransactionsOriginTouser?: UserUpdateOneWithoutTransactionsTransactionsOriginTouserNestedInput
    userTransactionsUserIdTouser?: UserUpdateOneRequiredWithoutTransactionsTransactionsUserIdTouserNestedInput
  }

  export type TransactionsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    origin?: NullableIntFieldUpdateOperationsInput | number | null
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsCreateManyInput = {
    id?: bigint | number
    userId: number
    memberId?: number | null
    year: number
    timestamp?: Date | string
    amount: number
    origin?: number | null
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    origin?: NullableIntFieldUpdateOperationsInput | number | null
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type UserCreateInput = {
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameCreateNestedManyWithoutUserInput
    membership?: MembershipCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameUncheckedCreateNestedManyWithoutUserInput
    membership?: MembershipUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderUncheckedCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUpdateManyWithoutUserNestedInput
    membership?: MembershipUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUncheckedUpdateManyWithoutUserNestedInput
    membership?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUncheckedUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
  }

  export type UserRoleCreateInput = {
    role: RoleCreateNestedOneWithoutUserRoleInput
    user: UserCreateNestedOneWithoutUserRoleInput
  }

  export type UserRoleUncheckedCreateInput = {
    roleId: number
    userId: number
  }

  export type UserRoleUpdateInput = {
    role?: RoleUpdateOneRequiredWithoutUserRoleNestedInput
    user?: UserUpdateOneRequiredWithoutUserRoleNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserRoleCreateManyInput = {
    roleId: number
    userId: number
  }

  export type UserRoleUpdateManyMutationInput = {

  }

  export type UserRoleUncheckedUpdateManyInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type RoomNullableScalarRelationFilter = {
    is?: RoomWhereInput | null
    isNot?: RoomWhereInput | null
  }

  export type SlotNullableScalarRelationFilter = {
    is?: SlotWhereInput | null
    isNot?: SlotWhereInput | null
  }

  export type GameAssignmentListRelationFilter = {
    every?: GameAssignmentWhereInput
    some?: GameAssignmentWhereInput
    none?: GameAssignmentWhereInput
  }

  export type GameChoiceListRelationFilter = {
    every?: GameChoiceWhereInput
    some?: GameChoiceWhereInput
    none?: GameChoiceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GameAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameChoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    lateFinish?: SortOrder
    lateStart?: SortOrder
    name?: SortOrder
    playerMax?: SortOrder
    playerMin?: SortOrder
    roomId?: SortOrder
    shortName?: SortOrder
    slotId?: SortOrder
    charInstructions?: SortOrder
    estimatedLength?: SortOrder
    gameContactEmail?: SortOrder
    genre?: SortOrder
    gmNames?: SortOrder
    message?: SortOrder
    playerPreference?: SortOrder
    playersContactGm?: SortOrder
    returningPlayers?: SortOrder
    setting?: SortOrder
    slotConflicts?: SortOrder
    slotPreference?: SortOrder
    teenFriendly?: SortOrder
    type?: SortOrder
    year?: SortOrder
    authorId?: SortOrder
    full?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    id?: SortOrder
    playerMax?: SortOrder
    playerMin?: SortOrder
    roomId?: SortOrder
    slotId?: SortOrder
    slotPreference?: SortOrder
    year?: SortOrder
    authorId?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    lateFinish?: SortOrder
    lateStart?: SortOrder
    name?: SortOrder
    playerMax?: SortOrder
    playerMin?: SortOrder
    roomId?: SortOrder
    shortName?: SortOrder
    slotId?: SortOrder
    charInstructions?: SortOrder
    estimatedLength?: SortOrder
    gameContactEmail?: SortOrder
    genre?: SortOrder
    gmNames?: SortOrder
    message?: SortOrder
    playerPreference?: SortOrder
    playersContactGm?: SortOrder
    returningPlayers?: SortOrder
    setting?: SortOrder
    slotConflicts?: SortOrder
    slotPreference?: SortOrder
    teenFriendly?: SortOrder
    type?: SortOrder
    year?: SortOrder
    authorId?: SortOrder
    full?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    lateFinish?: SortOrder
    lateStart?: SortOrder
    name?: SortOrder
    playerMax?: SortOrder
    playerMin?: SortOrder
    roomId?: SortOrder
    shortName?: SortOrder
    slotId?: SortOrder
    charInstructions?: SortOrder
    estimatedLength?: SortOrder
    gameContactEmail?: SortOrder
    genre?: SortOrder
    gmNames?: SortOrder
    message?: SortOrder
    playerPreference?: SortOrder
    playersContactGm?: SortOrder
    returningPlayers?: SortOrder
    setting?: SortOrder
    slotConflicts?: SortOrder
    slotPreference?: SortOrder
    teenFriendly?: SortOrder
    type?: SortOrder
    year?: SortOrder
    authorId?: SortOrder
    full?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    id?: SortOrder
    playerMax?: SortOrder
    playerMin?: SortOrder
    roomId?: SortOrder
    slotId?: SortOrder
    slotPreference?: SortOrder
    year?: SortOrder
    authorId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type GameScalarRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type MembershipScalarRelationFilter = {
    is?: MembershipWhereInput
    isNot?: MembershipWhereInput
  }

  export type GameAssignmentMemberIdGameIdGmYearCompoundUniqueInput = {
    memberId: number
    gameId: number
    gm: number
    year: number
  }

  export type GameAssignmentCountOrderByAggregateInput = {
    memberId?: SortOrder
    gameId?: SortOrder
    gm?: SortOrder
    year?: SortOrder
  }

  export type GameAssignmentAvgOrderByAggregateInput = {
    memberId?: SortOrder
    gameId?: SortOrder
    gm?: SortOrder
    year?: SortOrder
  }

  export type GameAssignmentMaxOrderByAggregateInput = {
    memberId?: SortOrder
    gameId?: SortOrder
    gm?: SortOrder
    year?: SortOrder
  }

  export type GameAssignmentMinOrderByAggregateInput = {
    memberId?: SortOrder
    gameId?: SortOrder
    gm?: SortOrder
    year?: SortOrder
  }

  export type GameAssignmentSumOrderByAggregateInput = {
    memberId?: SortOrder
    gameId?: SortOrder
    gm?: SortOrder
    year?: SortOrder
  }

  export type GameNullableScalarRelationFilter = {
    is?: GameWhereInput | null
    isNot?: GameWhereInput | null
  }

  export type SlotScalarRelationFilter = {
    is?: SlotWhereInput
    isNot?: SlotWhereInput
  }

  export type GameChoiceCountOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    memberId?: SortOrder
    rank?: SortOrder
    slotId?: SortOrder
    year?: SortOrder
    returningPlayer?: SortOrder
  }

  export type GameChoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    memberId?: SortOrder
    rank?: SortOrder
    slotId?: SortOrder
    year?: SortOrder
  }

  export type GameChoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    memberId?: SortOrder
    rank?: SortOrder
    slotId?: SortOrder
    year?: SortOrder
    returningPlayer?: SortOrder
  }

  export type GameChoiceMinOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    memberId?: SortOrder
    rank?: SortOrder
    slotId?: SortOrder
    year?: SortOrder
    returningPlayer?: SortOrder
  }

  export type GameChoiceSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    memberId?: SortOrder
    rank?: SortOrder
    slotId?: SortOrder
    year?: SortOrder
  }

  export type GameSubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    message?: SortOrder
    year?: SortOrder
  }

  export type GameSubmissionAvgOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    year?: SortOrder
  }

  export type GameSubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    message?: SortOrder
    year?: SortOrder
  }

  export type GameSubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    message?: SortOrder
    year?: SortOrder
  }

  export type GameSubmissionSumOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    year?: SortOrder
  }

  export type MembershipListRelationFilter = {
    every?: MembershipWhereInput
    some?: MembershipWhereInput
    none?: MembershipWhereInput
  }

  export type MembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HotelRoomCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    gamingRoom?: SortOrder
    occupancy?: SortOrder
    quantity?: SortOrder
    rate?: SortOrder
    bathroomType?: SortOrder
    type?: SortOrder
  }

  export type HotelRoomAvgOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
  }

  export type HotelRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    gamingRoom?: SortOrder
    occupancy?: SortOrder
    quantity?: SortOrder
    rate?: SortOrder
    bathroomType?: SortOrder
    type?: SortOrder
  }

  export type HotelRoomMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    gamingRoom?: SortOrder
    occupancy?: SortOrder
    quantity?: SortOrder
    rate?: SortOrder
    bathroomType?: SortOrder
    type?: SortOrder
  }

  export type HotelRoomSumOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type HotelRoomDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
    bathroomType?: SortOrder
    comment?: SortOrder
    enabled?: SortOrder
    gamingRoom?: SortOrder
    internalRoomType?: SortOrder
    name?: SortOrder
    reserved?: SortOrder
    reservedFor?: SortOrder
    roomType?: SortOrder
    formattedRoomType?: SortOrder
  }

  export type HotelRoomDetailsAvgOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
  }

  export type HotelRoomDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
    bathroomType?: SortOrder
    comment?: SortOrder
    enabled?: SortOrder
    gamingRoom?: SortOrder
    internalRoomType?: SortOrder
    name?: SortOrder
    reserved?: SortOrder
    reservedFor?: SortOrder
    roomType?: SortOrder
    formattedRoomType?: SortOrder
  }

  export type HotelRoomDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
    bathroomType?: SortOrder
    comment?: SortOrder
    enabled?: SortOrder
    gamingRoom?: SortOrder
    internalRoomType?: SortOrder
    name?: SortOrder
    reserved?: SortOrder
    reservedFor?: SortOrder
    roomType?: SortOrder
    formattedRoomType?: SortOrder
  }

  export type HotelRoomDetailsSumOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type KnexMigrationsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    batch?: SortOrder
    migrationTime?: SortOrder
  }

  export type KnexMigrationsAvgOrderByAggregateInput = {
    id?: SortOrder
    batch?: SortOrder
  }

  export type KnexMigrationsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    batch?: SortOrder
    migrationTime?: SortOrder
  }

  export type KnexMigrationsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    batch?: SortOrder
    migrationTime?: SortOrder
  }

  export type KnexMigrationsSumOrderByAggregateInput = {
    id?: SortOrder
    batch?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type KnexMigrationsLockCountOrderByAggregateInput = {
    index?: SortOrder
    isLocked?: SortOrder
  }

  export type KnexMigrationsLockAvgOrderByAggregateInput = {
    index?: SortOrder
    isLocked?: SortOrder
  }

  export type KnexMigrationsLockMaxOrderByAggregateInput = {
    index?: SortOrder
    isLocked?: SortOrder
  }

  export type KnexMigrationsLockMinOrderByAggregateInput = {
    index?: SortOrder
    isLocked?: SortOrder
  }

  export type KnexMigrationsLockSumOrderByAggregateInput = {
    index?: SortOrder
    isLocked?: SortOrder
  }

  export type LookupValueListRelationFilter = {
    every?: LookupValueWhereInput
    some?: LookupValueWhereInput
    none?: LookupValueWhereInput
  }

  export type LookupValueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LookupCountOrderByAggregateInput = {
    id?: SortOrder
    codeMaximum?: SortOrder
    codeMinimum?: SortOrder
    codeScale?: SortOrder
    codeType?: SortOrder
    internationalize?: SortOrder
    ordering?: SortOrder
    realm?: SortOrder
    valueMaximum?: SortOrder
    valueMinimum?: SortOrder
    valueScale?: SortOrder
    valueType?: SortOrder
  }

  export type LookupAvgOrderByAggregateInput = {
    id?: SortOrder
    codeScale?: SortOrder
    valueScale?: SortOrder
  }

  export type LookupMaxOrderByAggregateInput = {
    id?: SortOrder
    codeMaximum?: SortOrder
    codeMinimum?: SortOrder
    codeScale?: SortOrder
    codeType?: SortOrder
    internationalize?: SortOrder
    ordering?: SortOrder
    realm?: SortOrder
    valueMaximum?: SortOrder
    valueMinimum?: SortOrder
    valueScale?: SortOrder
    valueType?: SortOrder
  }

  export type LookupMinOrderByAggregateInput = {
    id?: SortOrder
    codeMaximum?: SortOrder
    codeMinimum?: SortOrder
    codeScale?: SortOrder
    codeType?: SortOrder
    internationalize?: SortOrder
    ordering?: SortOrder
    realm?: SortOrder
    valueMaximum?: SortOrder
    valueMinimum?: SortOrder
    valueScale?: SortOrder
    valueType?: SortOrder
  }

  export type LookupSumOrderByAggregateInput = {
    id?: SortOrder
    codeScale?: SortOrder
    valueScale?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type LookupScalarRelationFilter = {
    is?: LookupWhereInput
    isNot?: LookupWhereInput
  }

  export type LookupValueLookupIdCodeCompoundUniqueInput = {
    lookupId: number
    code: string
  }

  export type LookupValueCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    lookupId?: SortOrder
    numericSequencer?: SortOrder
    sequencer?: SortOrder
    stringSequencer?: SortOrder
    value?: SortOrder
  }

  export type LookupValueAvgOrderByAggregateInput = {
    id?: SortOrder
    lookupId?: SortOrder
    numericSequencer?: SortOrder
    sequencer?: SortOrder
  }

  export type LookupValueMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    lookupId?: SortOrder
    numericSequencer?: SortOrder
    sequencer?: SortOrder
    stringSequencer?: SortOrder
    value?: SortOrder
  }

  export type LookupValueMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    lookupId?: SortOrder
    numericSequencer?: SortOrder
    sequencer?: SortOrder
    stringSequencer?: SortOrder
    value?: SortOrder
  }

  export type LookupValueSumOrderByAggregateInput = {
    id?: SortOrder
    lookupId?: SortOrder
    numericSequencer?: SortOrder
    sequencer?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type GameSubmissionListRelationFilter = {
    every?: GameSubmissionWhereInput
    some?: GameSubmissionWhereInput
    none?: GameSubmissionWhereInput
  }

  export type HotelRoomScalarRelationFilter = {
    is?: HotelRoomWhereInput
    isNot?: HotelRoomWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TransactionsListRelationFilter = {
    every?: TransactionsWhereInput
    some?: TransactionsWhereInput
    none?: TransactionsWhereInput
  }

  export type GameSubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MembershipCountOrderByAggregateInput = {
    id?: SortOrder
    arrivalDate?: SortOrder
    attendance?: SortOrder
    attending?: SortOrder
    departureDate?: SortOrder
    hotelRoomId?: SortOrder
    interestLevel?: SortOrder
    message?: SortOrder
    roomPreferenceAndNotes?: SortOrder
    roomingPreferences?: SortOrder
    roomingWith?: SortOrder
    userId?: SortOrder
    volunteer?: SortOrder
    year?: SortOrder
    offerSubsidy?: SortOrder
    requestOldPrice?: SortOrder
    slotsAttending?: SortOrder
  }

  export type MembershipAvgOrderByAggregateInput = {
    id?: SortOrder
    hotelRoomId?: SortOrder
    userId?: SortOrder
    year?: SortOrder
  }

  export type MembershipMaxOrderByAggregateInput = {
    id?: SortOrder
    arrivalDate?: SortOrder
    attendance?: SortOrder
    attending?: SortOrder
    departureDate?: SortOrder
    hotelRoomId?: SortOrder
    interestLevel?: SortOrder
    message?: SortOrder
    roomPreferenceAndNotes?: SortOrder
    roomingPreferences?: SortOrder
    roomingWith?: SortOrder
    userId?: SortOrder
    volunteer?: SortOrder
    year?: SortOrder
    offerSubsidy?: SortOrder
    requestOldPrice?: SortOrder
    slotsAttending?: SortOrder
  }

  export type MembershipMinOrderByAggregateInput = {
    id?: SortOrder
    arrivalDate?: SortOrder
    attendance?: SortOrder
    attending?: SortOrder
    departureDate?: SortOrder
    hotelRoomId?: SortOrder
    interestLevel?: SortOrder
    message?: SortOrder
    roomPreferenceAndNotes?: SortOrder
    roomingPreferences?: SortOrder
    roomingWith?: SortOrder
    userId?: SortOrder
    volunteer?: SortOrder
    year?: SortOrder
    offerSubsidy?: SortOrder
    requestOldPrice?: SortOrder
    slotsAttending?: SortOrder
  }

  export type MembershipSumOrderByAggregateInput = {
    id?: SortOrder
    hotelRoomId?: SortOrder
    userId?: SortOrder
    year?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    snailMailAddress?: SortOrder
    phoneNumber?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    snailMailAddress?: SortOrder
    phoneNumber?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    snailMailAddress?: SortOrder
    phoneNumber?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserRoleListRelationFilter = {
    every?: UserRoleWhereInput
    some?: UserRoleWhereInput
    none?: UserRoleWhereInput
  }

  export type UserRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    authority?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    authority?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    authority?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    size?: SortOrder
    type?: SortOrder
    updated?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    size?: SortOrder
    type?: SortOrder
    updated?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    size?: SortOrder
    type?: SortOrder
    updated?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
  }

  export type SettingCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
  }

  export type SettingAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SettingMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
  }

  export type SettingMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
  }

  export type SettingSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShirtOrderItemListRelationFilter = {
    every?: ShirtOrderItemWhereInput
    some?: ShirtOrderItemWhereInput
    none?: ShirtOrderItemWhereInput
  }

  export type ShirtOrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShirtOrderCountOrderByAggregateInput = {
    id?: SortOrder
    deliveryMethod?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    year?: SortOrder
  }

  export type ShirtOrderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    year?: SortOrder
  }

  export type ShirtOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    deliveryMethod?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    year?: SortOrder
  }

  export type ShirtOrderMinOrderByAggregateInput = {
    id?: SortOrder
    deliveryMethod?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    year?: SortOrder
  }

  export type ShirtOrderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    year?: SortOrder
  }

  export type ShirtOrderScalarRelationFilter = {
    is?: ShirtOrderWhereInput
    isNot?: ShirtOrderWhereInput
  }

  export type ShirtOrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    size?: SortOrder
    style?: SortOrder
    itemsIdx?: SortOrder
  }

  export type ShirtOrderItemAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    itemsIdx?: SortOrder
  }

  export type ShirtOrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    size?: SortOrder
    style?: SortOrder
    itemsIdx?: SortOrder
  }

  export type ShirtOrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    size?: SortOrder
    style?: SortOrder
    itemsIdx?: SortOrder
  }

  export type ShirtOrderItemSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    itemsIdx?: SortOrder
  }

  export type SlotCountOrderByAggregateInput = {
    id?: SortOrder
    slot?: SortOrder
    day?: SortOrder
    formattedDate?: SortOrder
    length?: SortOrder
    time?: SortOrder
  }

  export type SlotAvgOrderByAggregateInput = {
    id?: SortOrder
    slot?: SortOrder
  }

  export type SlotMaxOrderByAggregateInput = {
    id?: SortOrder
    slot?: SortOrder
    day?: SortOrder
    formattedDate?: SortOrder
    length?: SortOrder
    time?: SortOrder
  }

  export type SlotMinOrderByAggregateInput = {
    id?: SortOrder
    slot?: SortOrder
    day?: SortOrder
    formattedDate?: SortOrder
    length?: SortOrder
    time?: SortOrder
  }

  export type SlotSumOrderByAggregateInput = {
    id?: SortOrder
    slot?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StripeCountOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
  }

  export type StripeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StripeMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StripeMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StripeSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type MembershipNullableScalarRelationFilter = {
    is?: MembershipWhereInput | null
    isNot?: MembershipWhereInput | null
  }

  export type TransactionsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memberId?: SortOrder
    year?: SortOrder
    timestamp?: SortOrder
    amount?: SortOrder
    origin?: SortOrder
    stripe?: SortOrder
    notes?: SortOrder
    data?: SortOrder
  }

  export type TransactionsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memberId?: SortOrder
    year?: SortOrder
    amount?: SortOrder
    origin?: SortOrder
  }

  export type TransactionsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memberId?: SortOrder
    year?: SortOrder
    timestamp?: SortOrder
    amount?: SortOrder
    origin?: SortOrder
    stripe?: SortOrder
    notes?: SortOrder
  }

  export type TransactionsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memberId?: SortOrder
    year?: SortOrder
    timestamp?: SortOrder
    amount?: SortOrder
    origin?: SortOrder
    stripe?: SortOrder
    notes?: SortOrder
  }

  export type TransactionsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    memberId?: SortOrder
    year?: SortOrder
    amount?: SortOrder
    origin?: SortOrder
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type ShirtOrderListRelationFilter = {
    every?: ShirtOrderWhereInput
    some?: ShirtOrderWhereInput
    none?: ShirtOrderWhereInput
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShirtOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrder
    balance?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrder
    balance?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrder
    balance?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type UserRoleRoleIdUserIdCompoundUniqueInput = {
    roleId: number
    userId: number
  }

  export type UserRoleCountOrderByAggregateInput = {
    roleId?: SortOrder
    userId?: SortOrder
  }

  export type UserRoleAvgOrderByAggregateInput = {
    roleId?: SortOrder
    userId?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    roleId?: SortOrder
    userId?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    roleId?: SortOrder
    userId?: SortOrder
  }

  export type UserRoleSumOrderByAggregateInput = {
    roleId?: SortOrder
    userId?: SortOrder
  }

  export type UserCreateNestedOneWithoutGameInput = {
    create?: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameInput
    connect?: UserWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutGameInput = {
    create?: XOR<RoomCreateWithoutGameInput, RoomUncheckedCreateWithoutGameInput>
    connectOrCreate?: RoomCreateOrConnectWithoutGameInput
    connect?: RoomWhereUniqueInput
  }

  export type SlotCreateNestedOneWithoutGameInput = {
    create?: XOR<SlotCreateWithoutGameInput, SlotUncheckedCreateWithoutGameInput>
    connectOrCreate?: SlotCreateOrConnectWithoutGameInput
    connect?: SlotWhereUniqueInput
  }

  export type GameAssignmentCreateNestedManyWithoutGameInput = {
    create?: XOR<GameAssignmentCreateWithoutGameInput, GameAssignmentUncheckedCreateWithoutGameInput> | GameAssignmentCreateWithoutGameInput[] | GameAssignmentUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameAssignmentCreateOrConnectWithoutGameInput | GameAssignmentCreateOrConnectWithoutGameInput[]
    createMany?: GameAssignmentCreateManyGameInputEnvelope
    connect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
  }

  export type GameChoiceCreateNestedManyWithoutGameInput = {
    create?: XOR<GameChoiceCreateWithoutGameInput, GameChoiceUncheckedCreateWithoutGameInput> | GameChoiceCreateWithoutGameInput[] | GameChoiceUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutGameInput | GameChoiceCreateOrConnectWithoutGameInput[]
    createMany?: GameChoiceCreateManyGameInputEnvelope
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
  }

  export type GameAssignmentUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GameAssignmentCreateWithoutGameInput, GameAssignmentUncheckedCreateWithoutGameInput> | GameAssignmentCreateWithoutGameInput[] | GameAssignmentUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameAssignmentCreateOrConnectWithoutGameInput | GameAssignmentCreateOrConnectWithoutGameInput[]
    createMany?: GameAssignmentCreateManyGameInputEnvelope
    connect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
  }

  export type GameChoiceUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GameChoiceCreateWithoutGameInput, GameChoiceUncheckedCreateWithoutGameInput> | GameChoiceCreateWithoutGameInput[] | GameChoiceUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutGameInput | GameChoiceCreateOrConnectWithoutGameInput[]
    createMany?: GameChoiceCreateManyGameInputEnvelope
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutGameNestedInput = {
    create?: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameInput
    upsert?: UserUpsertWithoutGameInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGameInput, UserUpdateWithoutGameInput>, UserUncheckedUpdateWithoutGameInput>
  }

  export type RoomUpdateOneWithoutGameNestedInput = {
    create?: XOR<RoomCreateWithoutGameInput, RoomUncheckedCreateWithoutGameInput>
    connectOrCreate?: RoomCreateOrConnectWithoutGameInput
    upsert?: RoomUpsertWithoutGameInput
    disconnect?: RoomWhereInput | boolean
    delete?: RoomWhereInput | boolean
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutGameInput, RoomUpdateWithoutGameInput>, RoomUncheckedUpdateWithoutGameInput>
  }

  export type SlotUpdateOneWithoutGameNestedInput = {
    create?: XOR<SlotCreateWithoutGameInput, SlotUncheckedCreateWithoutGameInput>
    connectOrCreate?: SlotCreateOrConnectWithoutGameInput
    upsert?: SlotUpsertWithoutGameInput
    disconnect?: SlotWhereInput | boolean
    delete?: SlotWhereInput | boolean
    connect?: SlotWhereUniqueInput
    update?: XOR<XOR<SlotUpdateToOneWithWhereWithoutGameInput, SlotUpdateWithoutGameInput>, SlotUncheckedUpdateWithoutGameInput>
  }

  export type GameAssignmentUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameAssignmentCreateWithoutGameInput, GameAssignmentUncheckedCreateWithoutGameInput> | GameAssignmentCreateWithoutGameInput[] | GameAssignmentUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameAssignmentCreateOrConnectWithoutGameInput | GameAssignmentCreateOrConnectWithoutGameInput[]
    upsert?: GameAssignmentUpsertWithWhereUniqueWithoutGameInput | GameAssignmentUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameAssignmentCreateManyGameInputEnvelope
    set?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    disconnect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    delete?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    connect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    update?: GameAssignmentUpdateWithWhereUniqueWithoutGameInput | GameAssignmentUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameAssignmentUpdateManyWithWhereWithoutGameInput | GameAssignmentUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameAssignmentScalarWhereInput | GameAssignmentScalarWhereInput[]
  }

  export type GameChoiceUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameChoiceCreateWithoutGameInput, GameChoiceUncheckedCreateWithoutGameInput> | GameChoiceCreateWithoutGameInput[] | GameChoiceUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutGameInput | GameChoiceCreateOrConnectWithoutGameInput[]
    upsert?: GameChoiceUpsertWithWhereUniqueWithoutGameInput | GameChoiceUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameChoiceCreateManyGameInputEnvelope
    set?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    disconnect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    delete?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    update?: GameChoiceUpdateWithWhereUniqueWithoutGameInput | GameChoiceUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameChoiceUpdateManyWithWhereWithoutGameInput | GameChoiceUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameChoiceScalarWhereInput | GameChoiceScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GameAssignmentUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameAssignmentCreateWithoutGameInput, GameAssignmentUncheckedCreateWithoutGameInput> | GameAssignmentCreateWithoutGameInput[] | GameAssignmentUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameAssignmentCreateOrConnectWithoutGameInput | GameAssignmentCreateOrConnectWithoutGameInput[]
    upsert?: GameAssignmentUpsertWithWhereUniqueWithoutGameInput | GameAssignmentUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameAssignmentCreateManyGameInputEnvelope
    set?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    disconnect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    delete?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    connect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    update?: GameAssignmentUpdateWithWhereUniqueWithoutGameInput | GameAssignmentUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameAssignmentUpdateManyWithWhereWithoutGameInput | GameAssignmentUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameAssignmentScalarWhereInput | GameAssignmentScalarWhereInput[]
  }

  export type GameChoiceUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameChoiceCreateWithoutGameInput, GameChoiceUncheckedCreateWithoutGameInput> | GameChoiceCreateWithoutGameInput[] | GameChoiceUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutGameInput | GameChoiceCreateOrConnectWithoutGameInput[]
    upsert?: GameChoiceUpsertWithWhereUniqueWithoutGameInput | GameChoiceUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameChoiceCreateManyGameInputEnvelope
    set?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    disconnect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    delete?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    update?: GameChoiceUpdateWithWhereUniqueWithoutGameInput | GameChoiceUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameChoiceUpdateManyWithWhereWithoutGameInput | GameChoiceUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameChoiceScalarWhereInput | GameChoiceScalarWhereInput[]
  }

  export type GameCreateNestedOneWithoutGameAssignmentInput = {
    create?: XOR<GameCreateWithoutGameAssignmentInput, GameUncheckedCreateWithoutGameAssignmentInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameAssignmentInput
    connect?: GameWhereUniqueInput
  }

  export type MembershipCreateNestedOneWithoutGameAssignmentInput = {
    create?: XOR<MembershipCreateWithoutGameAssignmentInput, MembershipUncheckedCreateWithoutGameAssignmentInput>
    connectOrCreate?: MembershipCreateOrConnectWithoutGameAssignmentInput
    connect?: MembershipWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutGameAssignmentNestedInput = {
    create?: XOR<GameCreateWithoutGameAssignmentInput, GameUncheckedCreateWithoutGameAssignmentInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameAssignmentInput
    upsert?: GameUpsertWithoutGameAssignmentInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutGameAssignmentInput, GameUpdateWithoutGameAssignmentInput>, GameUncheckedUpdateWithoutGameAssignmentInput>
  }

  export type MembershipUpdateOneRequiredWithoutGameAssignmentNestedInput = {
    create?: XOR<MembershipCreateWithoutGameAssignmentInput, MembershipUncheckedCreateWithoutGameAssignmentInput>
    connectOrCreate?: MembershipCreateOrConnectWithoutGameAssignmentInput
    upsert?: MembershipUpsertWithoutGameAssignmentInput
    connect?: MembershipWhereUniqueInput
    update?: XOR<XOR<MembershipUpdateToOneWithWhereWithoutGameAssignmentInput, MembershipUpdateWithoutGameAssignmentInput>, MembershipUncheckedUpdateWithoutGameAssignmentInput>
  }

  export type GameCreateNestedOneWithoutGameChoiceInput = {
    create?: XOR<GameCreateWithoutGameChoiceInput, GameUncheckedCreateWithoutGameChoiceInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameChoiceInput
    connect?: GameWhereUniqueInput
  }

  export type MembershipCreateNestedOneWithoutGameChoiceInput = {
    create?: XOR<MembershipCreateWithoutGameChoiceInput, MembershipUncheckedCreateWithoutGameChoiceInput>
    connectOrCreate?: MembershipCreateOrConnectWithoutGameChoiceInput
    connect?: MembershipWhereUniqueInput
  }

  export type SlotCreateNestedOneWithoutGameChoiceInput = {
    create?: XOR<SlotCreateWithoutGameChoiceInput, SlotUncheckedCreateWithoutGameChoiceInput>
    connectOrCreate?: SlotCreateOrConnectWithoutGameChoiceInput
    connect?: SlotWhereUniqueInput
  }

  export type GameUpdateOneWithoutGameChoiceNestedInput = {
    create?: XOR<GameCreateWithoutGameChoiceInput, GameUncheckedCreateWithoutGameChoiceInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameChoiceInput
    upsert?: GameUpsertWithoutGameChoiceInput
    disconnect?: GameWhereInput | boolean
    delete?: GameWhereInput | boolean
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutGameChoiceInput, GameUpdateWithoutGameChoiceInput>, GameUncheckedUpdateWithoutGameChoiceInput>
  }

  export type MembershipUpdateOneRequiredWithoutGameChoiceNestedInput = {
    create?: XOR<MembershipCreateWithoutGameChoiceInput, MembershipUncheckedCreateWithoutGameChoiceInput>
    connectOrCreate?: MembershipCreateOrConnectWithoutGameChoiceInput
    upsert?: MembershipUpsertWithoutGameChoiceInput
    connect?: MembershipWhereUniqueInput
    update?: XOR<XOR<MembershipUpdateToOneWithWhereWithoutGameChoiceInput, MembershipUpdateWithoutGameChoiceInput>, MembershipUncheckedUpdateWithoutGameChoiceInput>
  }

  export type SlotUpdateOneRequiredWithoutGameChoiceNestedInput = {
    create?: XOR<SlotCreateWithoutGameChoiceInput, SlotUncheckedCreateWithoutGameChoiceInput>
    connectOrCreate?: SlotCreateOrConnectWithoutGameChoiceInput
    upsert?: SlotUpsertWithoutGameChoiceInput
    connect?: SlotWhereUniqueInput
    update?: XOR<XOR<SlotUpdateToOneWithWhereWithoutGameChoiceInput, SlotUpdateWithoutGameChoiceInput>, SlotUncheckedUpdateWithoutGameChoiceInput>
  }

  export type MembershipCreateNestedOneWithoutGameSubmissionInput = {
    create?: XOR<MembershipCreateWithoutGameSubmissionInput, MembershipUncheckedCreateWithoutGameSubmissionInput>
    connectOrCreate?: MembershipCreateOrConnectWithoutGameSubmissionInput
    connect?: MembershipWhereUniqueInput
  }

  export type MembershipUpdateOneRequiredWithoutGameSubmissionNestedInput = {
    create?: XOR<MembershipCreateWithoutGameSubmissionInput, MembershipUncheckedCreateWithoutGameSubmissionInput>
    connectOrCreate?: MembershipCreateOrConnectWithoutGameSubmissionInput
    upsert?: MembershipUpsertWithoutGameSubmissionInput
    connect?: MembershipWhereUniqueInput
    update?: XOR<XOR<MembershipUpdateToOneWithWhereWithoutGameSubmissionInput, MembershipUpdateWithoutGameSubmissionInput>, MembershipUncheckedUpdateWithoutGameSubmissionInput>
  }

  export type MembershipCreateNestedManyWithoutHotelRoomInput = {
    create?: XOR<MembershipCreateWithoutHotelRoomInput, MembershipUncheckedCreateWithoutHotelRoomInput> | MembershipCreateWithoutHotelRoomInput[] | MembershipUncheckedCreateWithoutHotelRoomInput[]
    connectOrCreate?: MembershipCreateOrConnectWithoutHotelRoomInput | MembershipCreateOrConnectWithoutHotelRoomInput[]
    createMany?: MembershipCreateManyHotelRoomInputEnvelope
    connect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
  }

  export type MembershipUncheckedCreateNestedManyWithoutHotelRoomInput = {
    create?: XOR<MembershipCreateWithoutHotelRoomInput, MembershipUncheckedCreateWithoutHotelRoomInput> | MembershipCreateWithoutHotelRoomInput[] | MembershipUncheckedCreateWithoutHotelRoomInput[]
    connectOrCreate?: MembershipCreateOrConnectWithoutHotelRoomInput | MembershipCreateOrConnectWithoutHotelRoomInput[]
    createMany?: MembershipCreateManyHotelRoomInputEnvelope
    connect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
  }

  export type MembershipUpdateManyWithoutHotelRoomNestedInput = {
    create?: XOR<MembershipCreateWithoutHotelRoomInput, MembershipUncheckedCreateWithoutHotelRoomInput> | MembershipCreateWithoutHotelRoomInput[] | MembershipUncheckedCreateWithoutHotelRoomInput[]
    connectOrCreate?: MembershipCreateOrConnectWithoutHotelRoomInput | MembershipCreateOrConnectWithoutHotelRoomInput[]
    upsert?: MembershipUpsertWithWhereUniqueWithoutHotelRoomInput | MembershipUpsertWithWhereUniqueWithoutHotelRoomInput[]
    createMany?: MembershipCreateManyHotelRoomInputEnvelope
    set?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    disconnect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    delete?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    connect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    update?: MembershipUpdateWithWhereUniqueWithoutHotelRoomInput | MembershipUpdateWithWhereUniqueWithoutHotelRoomInput[]
    updateMany?: MembershipUpdateManyWithWhereWithoutHotelRoomInput | MembershipUpdateManyWithWhereWithoutHotelRoomInput[]
    deleteMany?: MembershipScalarWhereInput | MembershipScalarWhereInput[]
  }

  export type MembershipUncheckedUpdateManyWithoutHotelRoomNestedInput = {
    create?: XOR<MembershipCreateWithoutHotelRoomInput, MembershipUncheckedCreateWithoutHotelRoomInput> | MembershipCreateWithoutHotelRoomInput[] | MembershipUncheckedCreateWithoutHotelRoomInput[]
    connectOrCreate?: MembershipCreateOrConnectWithoutHotelRoomInput | MembershipCreateOrConnectWithoutHotelRoomInput[]
    upsert?: MembershipUpsertWithWhereUniqueWithoutHotelRoomInput | MembershipUpsertWithWhereUniqueWithoutHotelRoomInput[]
    createMany?: MembershipCreateManyHotelRoomInputEnvelope
    set?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    disconnect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    delete?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    connect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    update?: MembershipUpdateWithWhereUniqueWithoutHotelRoomInput | MembershipUpdateWithWhereUniqueWithoutHotelRoomInput[]
    updateMany?: MembershipUpdateManyWithWhereWithoutHotelRoomInput | MembershipUpdateManyWithWhereWithoutHotelRoomInput[]
    deleteMany?: MembershipScalarWhereInput | MembershipScalarWhereInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type LookupValueCreateNestedManyWithoutLookupInput = {
    create?: XOR<LookupValueCreateWithoutLookupInput, LookupValueUncheckedCreateWithoutLookupInput> | LookupValueCreateWithoutLookupInput[] | LookupValueUncheckedCreateWithoutLookupInput[]
    connectOrCreate?: LookupValueCreateOrConnectWithoutLookupInput | LookupValueCreateOrConnectWithoutLookupInput[]
    createMany?: LookupValueCreateManyLookupInputEnvelope
    connect?: LookupValueWhereUniqueInput | LookupValueWhereUniqueInput[]
  }

  export type LookupValueUncheckedCreateNestedManyWithoutLookupInput = {
    create?: XOR<LookupValueCreateWithoutLookupInput, LookupValueUncheckedCreateWithoutLookupInput> | LookupValueCreateWithoutLookupInput[] | LookupValueUncheckedCreateWithoutLookupInput[]
    connectOrCreate?: LookupValueCreateOrConnectWithoutLookupInput | LookupValueCreateOrConnectWithoutLookupInput[]
    createMany?: LookupValueCreateManyLookupInputEnvelope
    connect?: LookupValueWhereUniqueInput | LookupValueWhereUniqueInput[]
  }

  export type LookupValueUpdateManyWithoutLookupNestedInput = {
    create?: XOR<LookupValueCreateWithoutLookupInput, LookupValueUncheckedCreateWithoutLookupInput> | LookupValueCreateWithoutLookupInput[] | LookupValueUncheckedCreateWithoutLookupInput[]
    connectOrCreate?: LookupValueCreateOrConnectWithoutLookupInput | LookupValueCreateOrConnectWithoutLookupInput[]
    upsert?: LookupValueUpsertWithWhereUniqueWithoutLookupInput | LookupValueUpsertWithWhereUniqueWithoutLookupInput[]
    createMany?: LookupValueCreateManyLookupInputEnvelope
    set?: LookupValueWhereUniqueInput | LookupValueWhereUniqueInput[]
    disconnect?: LookupValueWhereUniqueInput | LookupValueWhereUniqueInput[]
    delete?: LookupValueWhereUniqueInput | LookupValueWhereUniqueInput[]
    connect?: LookupValueWhereUniqueInput | LookupValueWhereUniqueInput[]
    update?: LookupValueUpdateWithWhereUniqueWithoutLookupInput | LookupValueUpdateWithWhereUniqueWithoutLookupInput[]
    updateMany?: LookupValueUpdateManyWithWhereWithoutLookupInput | LookupValueUpdateManyWithWhereWithoutLookupInput[]
    deleteMany?: LookupValueScalarWhereInput | LookupValueScalarWhereInput[]
  }

  export type LookupValueUncheckedUpdateManyWithoutLookupNestedInput = {
    create?: XOR<LookupValueCreateWithoutLookupInput, LookupValueUncheckedCreateWithoutLookupInput> | LookupValueCreateWithoutLookupInput[] | LookupValueUncheckedCreateWithoutLookupInput[]
    connectOrCreate?: LookupValueCreateOrConnectWithoutLookupInput | LookupValueCreateOrConnectWithoutLookupInput[]
    upsert?: LookupValueUpsertWithWhereUniqueWithoutLookupInput | LookupValueUpsertWithWhereUniqueWithoutLookupInput[]
    createMany?: LookupValueCreateManyLookupInputEnvelope
    set?: LookupValueWhereUniqueInput | LookupValueWhereUniqueInput[]
    disconnect?: LookupValueWhereUniqueInput | LookupValueWhereUniqueInput[]
    delete?: LookupValueWhereUniqueInput | LookupValueWhereUniqueInput[]
    connect?: LookupValueWhereUniqueInput | LookupValueWhereUniqueInput[]
    update?: LookupValueUpdateWithWhereUniqueWithoutLookupInput | LookupValueUpdateWithWhereUniqueWithoutLookupInput[]
    updateMany?: LookupValueUpdateManyWithWhereWithoutLookupInput | LookupValueUpdateManyWithWhereWithoutLookupInput[]
    deleteMany?: LookupValueScalarWhereInput | LookupValueScalarWhereInput[]
  }

  export type LookupCreateNestedOneWithoutLookupValueInput = {
    create?: XOR<LookupCreateWithoutLookupValueInput, LookupUncheckedCreateWithoutLookupValueInput>
    connectOrCreate?: LookupCreateOrConnectWithoutLookupValueInput
    connect?: LookupWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LookupUpdateOneRequiredWithoutLookupValueNestedInput = {
    create?: XOR<LookupCreateWithoutLookupValueInput, LookupUncheckedCreateWithoutLookupValueInput>
    connectOrCreate?: LookupCreateOrConnectWithoutLookupValueInput
    upsert?: LookupUpsertWithoutLookupValueInput
    connect?: LookupWhereUniqueInput
    update?: XOR<XOR<LookupUpdateToOneWithWhereWithoutLookupValueInput, LookupUpdateWithoutLookupValueInput>, LookupUncheckedUpdateWithoutLookupValueInput>
  }

  export type GameAssignmentCreateNestedManyWithoutMembershipInput = {
    create?: XOR<GameAssignmentCreateWithoutMembershipInput, GameAssignmentUncheckedCreateWithoutMembershipInput> | GameAssignmentCreateWithoutMembershipInput[] | GameAssignmentUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameAssignmentCreateOrConnectWithoutMembershipInput | GameAssignmentCreateOrConnectWithoutMembershipInput[]
    createMany?: GameAssignmentCreateManyMembershipInputEnvelope
    connect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
  }

  export type GameChoiceCreateNestedManyWithoutMembershipInput = {
    create?: XOR<GameChoiceCreateWithoutMembershipInput, GameChoiceUncheckedCreateWithoutMembershipInput> | GameChoiceCreateWithoutMembershipInput[] | GameChoiceUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutMembershipInput | GameChoiceCreateOrConnectWithoutMembershipInput[]
    createMany?: GameChoiceCreateManyMembershipInputEnvelope
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
  }

  export type GameSubmissionCreateNestedManyWithoutMembershipInput = {
    create?: XOR<GameSubmissionCreateWithoutMembershipInput, GameSubmissionUncheckedCreateWithoutMembershipInput> | GameSubmissionCreateWithoutMembershipInput[] | GameSubmissionUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameSubmissionCreateOrConnectWithoutMembershipInput | GameSubmissionCreateOrConnectWithoutMembershipInput[]
    createMany?: GameSubmissionCreateManyMembershipInputEnvelope
    connect?: GameSubmissionWhereUniqueInput | GameSubmissionWhereUniqueInput[]
  }

  export type HotelRoomCreateNestedOneWithoutMembershipInput = {
    create?: XOR<HotelRoomCreateWithoutMembershipInput, HotelRoomUncheckedCreateWithoutMembershipInput>
    connectOrCreate?: HotelRoomCreateOrConnectWithoutMembershipInput
    connect?: HotelRoomWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMembershipInput = {
    create?: XOR<UserCreateWithoutMembershipInput, UserUncheckedCreateWithoutMembershipInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembershipInput
    connect?: UserWhereUniqueInput
  }

  export type TransactionsCreateNestedManyWithoutMembershipInput = {
    create?: XOR<TransactionsCreateWithoutMembershipInput, TransactionsUncheckedCreateWithoutMembershipInput> | TransactionsCreateWithoutMembershipInput[] | TransactionsUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutMembershipInput | TransactionsCreateOrConnectWithoutMembershipInput[]
    createMany?: TransactionsCreateManyMembershipInputEnvelope
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
  }

  export type GameAssignmentUncheckedCreateNestedManyWithoutMembershipInput = {
    create?: XOR<GameAssignmentCreateWithoutMembershipInput, GameAssignmentUncheckedCreateWithoutMembershipInput> | GameAssignmentCreateWithoutMembershipInput[] | GameAssignmentUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameAssignmentCreateOrConnectWithoutMembershipInput | GameAssignmentCreateOrConnectWithoutMembershipInput[]
    createMany?: GameAssignmentCreateManyMembershipInputEnvelope
    connect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
  }

  export type GameChoiceUncheckedCreateNestedManyWithoutMembershipInput = {
    create?: XOR<GameChoiceCreateWithoutMembershipInput, GameChoiceUncheckedCreateWithoutMembershipInput> | GameChoiceCreateWithoutMembershipInput[] | GameChoiceUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutMembershipInput | GameChoiceCreateOrConnectWithoutMembershipInput[]
    createMany?: GameChoiceCreateManyMembershipInputEnvelope
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
  }

  export type GameSubmissionUncheckedCreateNestedManyWithoutMembershipInput = {
    create?: XOR<GameSubmissionCreateWithoutMembershipInput, GameSubmissionUncheckedCreateWithoutMembershipInput> | GameSubmissionCreateWithoutMembershipInput[] | GameSubmissionUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameSubmissionCreateOrConnectWithoutMembershipInput | GameSubmissionCreateOrConnectWithoutMembershipInput[]
    createMany?: GameSubmissionCreateManyMembershipInputEnvelope
    connect?: GameSubmissionWhereUniqueInput | GameSubmissionWhereUniqueInput[]
  }

  export type TransactionsUncheckedCreateNestedManyWithoutMembershipInput = {
    create?: XOR<TransactionsCreateWithoutMembershipInput, TransactionsUncheckedCreateWithoutMembershipInput> | TransactionsCreateWithoutMembershipInput[] | TransactionsUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutMembershipInput | TransactionsCreateOrConnectWithoutMembershipInput[]
    createMany?: TransactionsCreateManyMembershipInputEnvelope
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GameAssignmentUpdateManyWithoutMembershipNestedInput = {
    create?: XOR<GameAssignmentCreateWithoutMembershipInput, GameAssignmentUncheckedCreateWithoutMembershipInput> | GameAssignmentCreateWithoutMembershipInput[] | GameAssignmentUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameAssignmentCreateOrConnectWithoutMembershipInput | GameAssignmentCreateOrConnectWithoutMembershipInput[]
    upsert?: GameAssignmentUpsertWithWhereUniqueWithoutMembershipInput | GameAssignmentUpsertWithWhereUniqueWithoutMembershipInput[]
    createMany?: GameAssignmentCreateManyMembershipInputEnvelope
    set?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    disconnect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    delete?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    connect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    update?: GameAssignmentUpdateWithWhereUniqueWithoutMembershipInput | GameAssignmentUpdateWithWhereUniqueWithoutMembershipInput[]
    updateMany?: GameAssignmentUpdateManyWithWhereWithoutMembershipInput | GameAssignmentUpdateManyWithWhereWithoutMembershipInput[]
    deleteMany?: GameAssignmentScalarWhereInput | GameAssignmentScalarWhereInput[]
  }

  export type GameChoiceUpdateManyWithoutMembershipNestedInput = {
    create?: XOR<GameChoiceCreateWithoutMembershipInput, GameChoiceUncheckedCreateWithoutMembershipInput> | GameChoiceCreateWithoutMembershipInput[] | GameChoiceUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutMembershipInput | GameChoiceCreateOrConnectWithoutMembershipInput[]
    upsert?: GameChoiceUpsertWithWhereUniqueWithoutMembershipInput | GameChoiceUpsertWithWhereUniqueWithoutMembershipInput[]
    createMany?: GameChoiceCreateManyMembershipInputEnvelope
    set?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    disconnect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    delete?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    update?: GameChoiceUpdateWithWhereUniqueWithoutMembershipInput | GameChoiceUpdateWithWhereUniqueWithoutMembershipInput[]
    updateMany?: GameChoiceUpdateManyWithWhereWithoutMembershipInput | GameChoiceUpdateManyWithWhereWithoutMembershipInput[]
    deleteMany?: GameChoiceScalarWhereInput | GameChoiceScalarWhereInput[]
  }

  export type GameSubmissionUpdateManyWithoutMembershipNestedInput = {
    create?: XOR<GameSubmissionCreateWithoutMembershipInput, GameSubmissionUncheckedCreateWithoutMembershipInput> | GameSubmissionCreateWithoutMembershipInput[] | GameSubmissionUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameSubmissionCreateOrConnectWithoutMembershipInput | GameSubmissionCreateOrConnectWithoutMembershipInput[]
    upsert?: GameSubmissionUpsertWithWhereUniqueWithoutMembershipInput | GameSubmissionUpsertWithWhereUniqueWithoutMembershipInput[]
    createMany?: GameSubmissionCreateManyMembershipInputEnvelope
    set?: GameSubmissionWhereUniqueInput | GameSubmissionWhereUniqueInput[]
    disconnect?: GameSubmissionWhereUniqueInput | GameSubmissionWhereUniqueInput[]
    delete?: GameSubmissionWhereUniqueInput | GameSubmissionWhereUniqueInput[]
    connect?: GameSubmissionWhereUniqueInput | GameSubmissionWhereUniqueInput[]
    update?: GameSubmissionUpdateWithWhereUniqueWithoutMembershipInput | GameSubmissionUpdateWithWhereUniqueWithoutMembershipInput[]
    updateMany?: GameSubmissionUpdateManyWithWhereWithoutMembershipInput | GameSubmissionUpdateManyWithWhereWithoutMembershipInput[]
    deleteMany?: GameSubmissionScalarWhereInput | GameSubmissionScalarWhereInput[]
  }

  export type HotelRoomUpdateOneRequiredWithoutMembershipNestedInput = {
    create?: XOR<HotelRoomCreateWithoutMembershipInput, HotelRoomUncheckedCreateWithoutMembershipInput>
    connectOrCreate?: HotelRoomCreateOrConnectWithoutMembershipInput
    upsert?: HotelRoomUpsertWithoutMembershipInput
    connect?: HotelRoomWhereUniqueInput
    update?: XOR<XOR<HotelRoomUpdateToOneWithWhereWithoutMembershipInput, HotelRoomUpdateWithoutMembershipInput>, HotelRoomUncheckedUpdateWithoutMembershipInput>
  }

  export type UserUpdateOneRequiredWithoutMembershipNestedInput = {
    create?: XOR<UserCreateWithoutMembershipInput, UserUncheckedCreateWithoutMembershipInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembershipInput
    upsert?: UserUpsertWithoutMembershipInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMembershipInput, UserUpdateWithoutMembershipInput>, UserUncheckedUpdateWithoutMembershipInput>
  }

  export type TransactionsUpdateManyWithoutMembershipNestedInput = {
    create?: XOR<TransactionsCreateWithoutMembershipInput, TransactionsUncheckedCreateWithoutMembershipInput> | TransactionsCreateWithoutMembershipInput[] | TransactionsUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutMembershipInput | TransactionsCreateOrConnectWithoutMembershipInput[]
    upsert?: TransactionsUpsertWithWhereUniqueWithoutMembershipInput | TransactionsUpsertWithWhereUniqueWithoutMembershipInput[]
    createMany?: TransactionsCreateManyMembershipInputEnvelope
    set?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    disconnect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    delete?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    update?: TransactionsUpdateWithWhereUniqueWithoutMembershipInput | TransactionsUpdateWithWhereUniqueWithoutMembershipInput[]
    updateMany?: TransactionsUpdateManyWithWhereWithoutMembershipInput | TransactionsUpdateManyWithWhereWithoutMembershipInput[]
    deleteMany?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
  }

  export type GameAssignmentUncheckedUpdateManyWithoutMembershipNestedInput = {
    create?: XOR<GameAssignmentCreateWithoutMembershipInput, GameAssignmentUncheckedCreateWithoutMembershipInput> | GameAssignmentCreateWithoutMembershipInput[] | GameAssignmentUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameAssignmentCreateOrConnectWithoutMembershipInput | GameAssignmentCreateOrConnectWithoutMembershipInput[]
    upsert?: GameAssignmentUpsertWithWhereUniqueWithoutMembershipInput | GameAssignmentUpsertWithWhereUniqueWithoutMembershipInput[]
    createMany?: GameAssignmentCreateManyMembershipInputEnvelope
    set?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    disconnect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    delete?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    connect?: GameAssignmentWhereUniqueInput | GameAssignmentWhereUniqueInput[]
    update?: GameAssignmentUpdateWithWhereUniqueWithoutMembershipInput | GameAssignmentUpdateWithWhereUniqueWithoutMembershipInput[]
    updateMany?: GameAssignmentUpdateManyWithWhereWithoutMembershipInput | GameAssignmentUpdateManyWithWhereWithoutMembershipInput[]
    deleteMany?: GameAssignmentScalarWhereInput | GameAssignmentScalarWhereInput[]
  }

  export type GameChoiceUncheckedUpdateManyWithoutMembershipNestedInput = {
    create?: XOR<GameChoiceCreateWithoutMembershipInput, GameChoiceUncheckedCreateWithoutMembershipInput> | GameChoiceCreateWithoutMembershipInput[] | GameChoiceUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutMembershipInput | GameChoiceCreateOrConnectWithoutMembershipInput[]
    upsert?: GameChoiceUpsertWithWhereUniqueWithoutMembershipInput | GameChoiceUpsertWithWhereUniqueWithoutMembershipInput[]
    createMany?: GameChoiceCreateManyMembershipInputEnvelope
    set?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    disconnect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    delete?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    update?: GameChoiceUpdateWithWhereUniqueWithoutMembershipInput | GameChoiceUpdateWithWhereUniqueWithoutMembershipInput[]
    updateMany?: GameChoiceUpdateManyWithWhereWithoutMembershipInput | GameChoiceUpdateManyWithWhereWithoutMembershipInput[]
    deleteMany?: GameChoiceScalarWhereInput | GameChoiceScalarWhereInput[]
  }

  export type GameSubmissionUncheckedUpdateManyWithoutMembershipNestedInput = {
    create?: XOR<GameSubmissionCreateWithoutMembershipInput, GameSubmissionUncheckedCreateWithoutMembershipInput> | GameSubmissionCreateWithoutMembershipInput[] | GameSubmissionUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: GameSubmissionCreateOrConnectWithoutMembershipInput | GameSubmissionCreateOrConnectWithoutMembershipInput[]
    upsert?: GameSubmissionUpsertWithWhereUniqueWithoutMembershipInput | GameSubmissionUpsertWithWhereUniqueWithoutMembershipInput[]
    createMany?: GameSubmissionCreateManyMembershipInputEnvelope
    set?: GameSubmissionWhereUniqueInput | GameSubmissionWhereUniqueInput[]
    disconnect?: GameSubmissionWhereUniqueInput | GameSubmissionWhereUniqueInput[]
    delete?: GameSubmissionWhereUniqueInput | GameSubmissionWhereUniqueInput[]
    connect?: GameSubmissionWhereUniqueInput | GameSubmissionWhereUniqueInput[]
    update?: GameSubmissionUpdateWithWhereUniqueWithoutMembershipInput | GameSubmissionUpdateWithWhereUniqueWithoutMembershipInput[]
    updateMany?: GameSubmissionUpdateManyWithWhereWithoutMembershipInput | GameSubmissionUpdateManyWithWhereWithoutMembershipInput[]
    deleteMany?: GameSubmissionScalarWhereInput | GameSubmissionScalarWhereInput[]
  }

  export type TransactionsUncheckedUpdateManyWithoutMembershipNestedInput = {
    create?: XOR<TransactionsCreateWithoutMembershipInput, TransactionsUncheckedCreateWithoutMembershipInput> | TransactionsCreateWithoutMembershipInput[] | TransactionsUncheckedCreateWithoutMembershipInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutMembershipInput | TransactionsCreateOrConnectWithoutMembershipInput[]
    upsert?: TransactionsUpsertWithWhereUniqueWithoutMembershipInput | TransactionsUpsertWithWhereUniqueWithoutMembershipInput[]
    createMany?: TransactionsCreateManyMembershipInputEnvelope
    set?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    disconnect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    delete?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    update?: TransactionsUpdateWithWhereUniqueWithoutMembershipInput | TransactionsUpdateWithWhereUniqueWithoutMembershipInput[]
    updateMany?: TransactionsUpdateManyWithWhereWithoutMembershipInput | TransactionsUpdateManyWithWhereWithoutMembershipInput[]
    deleteMany?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type GameCreateNestedManyWithoutRoomInput = {
    create?: XOR<GameCreateWithoutRoomInput, GameUncheckedCreateWithoutRoomInput> | GameCreateWithoutRoomInput[] | GameUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: GameCreateOrConnectWithoutRoomInput | GameCreateOrConnectWithoutRoomInput[]
    createMany?: GameCreateManyRoomInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<GameCreateWithoutRoomInput, GameUncheckedCreateWithoutRoomInput> | GameCreateWithoutRoomInput[] | GameUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: GameCreateOrConnectWithoutRoomInput | GameCreateOrConnectWithoutRoomInput[]
    createMany?: GameCreateManyRoomInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUpdateManyWithoutRoomNestedInput = {
    create?: XOR<GameCreateWithoutRoomInput, GameUncheckedCreateWithoutRoomInput> | GameCreateWithoutRoomInput[] | GameUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: GameCreateOrConnectWithoutRoomInput | GameCreateOrConnectWithoutRoomInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutRoomInput | GameUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: GameCreateManyRoomInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutRoomInput | GameUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: GameUpdateManyWithWhereWithoutRoomInput | GameUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<GameCreateWithoutRoomInput, GameUncheckedCreateWithoutRoomInput> | GameCreateWithoutRoomInput[] | GameUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: GameCreateOrConnectWithoutRoomInput | GameCreateOrConnectWithoutRoomInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutRoomInput | GameUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: GameCreateManyRoomInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutRoomInput | GameUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: GameUpdateManyWithWhereWithoutRoomInput | GameUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutShirtOrderInput = {
    create?: XOR<UserCreateWithoutShirtOrderInput, UserUncheckedCreateWithoutShirtOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutShirtOrderInput
    connect?: UserWhereUniqueInput
  }

  export type ShirtOrderItemCreateNestedManyWithoutShirtOrderInput = {
    create?: XOR<ShirtOrderItemCreateWithoutShirtOrderInput, ShirtOrderItemUncheckedCreateWithoutShirtOrderInput> | ShirtOrderItemCreateWithoutShirtOrderInput[] | ShirtOrderItemUncheckedCreateWithoutShirtOrderInput[]
    connectOrCreate?: ShirtOrderItemCreateOrConnectWithoutShirtOrderInput | ShirtOrderItemCreateOrConnectWithoutShirtOrderInput[]
    createMany?: ShirtOrderItemCreateManyShirtOrderInputEnvelope
    connect?: ShirtOrderItemWhereUniqueInput | ShirtOrderItemWhereUniqueInput[]
  }

  export type ShirtOrderItemUncheckedCreateNestedManyWithoutShirtOrderInput = {
    create?: XOR<ShirtOrderItemCreateWithoutShirtOrderInput, ShirtOrderItemUncheckedCreateWithoutShirtOrderInput> | ShirtOrderItemCreateWithoutShirtOrderInput[] | ShirtOrderItemUncheckedCreateWithoutShirtOrderInput[]
    connectOrCreate?: ShirtOrderItemCreateOrConnectWithoutShirtOrderInput | ShirtOrderItemCreateOrConnectWithoutShirtOrderInput[]
    createMany?: ShirtOrderItemCreateManyShirtOrderInputEnvelope
    connect?: ShirtOrderItemWhereUniqueInput | ShirtOrderItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutShirtOrderNestedInput = {
    create?: XOR<UserCreateWithoutShirtOrderInput, UserUncheckedCreateWithoutShirtOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutShirtOrderInput
    upsert?: UserUpsertWithoutShirtOrderInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShirtOrderInput, UserUpdateWithoutShirtOrderInput>, UserUncheckedUpdateWithoutShirtOrderInput>
  }

  export type ShirtOrderItemUpdateManyWithoutShirtOrderNestedInput = {
    create?: XOR<ShirtOrderItemCreateWithoutShirtOrderInput, ShirtOrderItemUncheckedCreateWithoutShirtOrderInput> | ShirtOrderItemCreateWithoutShirtOrderInput[] | ShirtOrderItemUncheckedCreateWithoutShirtOrderInput[]
    connectOrCreate?: ShirtOrderItemCreateOrConnectWithoutShirtOrderInput | ShirtOrderItemCreateOrConnectWithoutShirtOrderInput[]
    upsert?: ShirtOrderItemUpsertWithWhereUniqueWithoutShirtOrderInput | ShirtOrderItemUpsertWithWhereUniqueWithoutShirtOrderInput[]
    createMany?: ShirtOrderItemCreateManyShirtOrderInputEnvelope
    set?: ShirtOrderItemWhereUniqueInput | ShirtOrderItemWhereUniqueInput[]
    disconnect?: ShirtOrderItemWhereUniqueInput | ShirtOrderItemWhereUniqueInput[]
    delete?: ShirtOrderItemWhereUniqueInput | ShirtOrderItemWhereUniqueInput[]
    connect?: ShirtOrderItemWhereUniqueInput | ShirtOrderItemWhereUniqueInput[]
    update?: ShirtOrderItemUpdateWithWhereUniqueWithoutShirtOrderInput | ShirtOrderItemUpdateWithWhereUniqueWithoutShirtOrderInput[]
    updateMany?: ShirtOrderItemUpdateManyWithWhereWithoutShirtOrderInput | ShirtOrderItemUpdateManyWithWhereWithoutShirtOrderInput[]
    deleteMany?: ShirtOrderItemScalarWhereInput | ShirtOrderItemScalarWhereInput[]
  }

  export type ShirtOrderItemUncheckedUpdateManyWithoutShirtOrderNestedInput = {
    create?: XOR<ShirtOrderItemCreateWithoutShirtOrderInput, ShirtOrderItemUncheckedCreateWithoutShirtOrderInput> | ShirtOrderItemCreateWithoutShirtOrderInput[] | ShirtOrderItemUncheckedCreateWithoutShirtOrderInput[]
    connectOrCreate?: ShirtOrderItemCreateOrConnectWithoutShirtOrderInput | ShirtOrderItemCreateOrConnectWithoutShirtOrderInput[]
    upsert?: ShirtOrderItemUpsertWithWhereUniqueWithoutShirtOrderInput | ShirtOrderItemUpsertWithWhereUniqueWithoutShirtOrderInput[]
    createMany?: ShirtOrderItemCreateManyShirtOrderInputEnvelope
    set?: ShirtOrderItemWhereUniqueInput | ShirtOrderItemWhereUniqueInput[]
    disconnect?: ShirtOrderItemWhereUniqueInput | ShirtOrderItemWhereUniqueInput[]
    delete?: ShirtOrderItemWhereUniqueInput | ShirtOrderItemWhereUniqueInput[]
    connect?: ShirtOrderItemWhereUniqueInput | ShirtOrderItemWhereUniqueInput[]
    update?: ShirtOrderItemUpdateWithWhereUniqueWithoutShirtOrderInput | ShirtOrderItemUpdateWithWhereUniqueWithoutShirtOrderInput[]
    updateMany?: ShirtOrderItemUpdateManyWithWhereWithoutShirtOrderInput | ShirtOrderItemUpdateManyWithWhereWithoutShirtOrderInput[]
    deleteMany?: ShirtOrderItemScalarWhereInput | ShirtOrderItemScalarWhereInput[]
  }

  export type ShirtOrderCreateNestedOneWithoutShirtOrderItemInput = {
    create?: XOR<ShirtOrderCreateWithoutShirtOrderItemInput, ShirtOrderUncheckedCreateWithoutShirtOrderItemInput>
    connectOrCreate?: ShirtOrderCreateOrConnectWithoutShirtOrderItemInput
    connect?: ShirtOrderWhereUniqueInput
  }

  export type ShirtOrderUpdateOneRequiredWithoutShirtOrderItemNestedInput = {
    create?: XOR<ShirtOrderCreateWithoutShirtOrderItemInput, ShirtOrderUncheckedCreateWithoutShirtOrderItemInput>
    connectOrCreate?: ShirtOrderCreateOrConnectWithoutShirtOrderItemInput
    upsert?: ShirtOrderUpsertWithoutShirtOrderItemInput
    connect?: ShirtOrderWhereUniqueInput
    update?: XOR<XOR<ShirtOrderUpdateToOneWithWhereWithoutShirtOrderItemInput, ShirtOrderUpdateWithoutShirtOrderItemInput>, ShirtOrderUncheckedUpdateWithoutShirtOrderItemInput>
  }

  export type GameCreateNestedManyWithoutSlotInput = {
    create?: XOR<GameCreateWithoutSlotInput, GameUncheckedCreateWithoutSlotInput> | GameCreateWithoutSlotInput[] | GameUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: GameCreateOrConnectWithoutSlotInput | GameCreateOrConnectWithoutSlotInput[]
    createMany?: GameCreateManySlotInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameChoiceCreateNestedManyWithoutSlotInput = {
    create?: XOR<GameChoiceCreateWithoutSlotInput, GameChoiceUncheckedCreateWithoutSlotInput> | GameChoiceCreateWithoutSlotInput[] | GameChoiceUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutSlotInput | GameChoiceCreateOrConnectWithoutSlotInput[]
    createMany?: GameChoiceCreateManySlotInputEnvelope
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutSlotInput = {
    create?: XOR<GameCreateWithoutSlotInput, GameUncheckedCreateWithoutSlotInput> | GameCreateWithoutSlotInput[] | GameUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: GameCreateOrConnectWithoutSlotInput | GameCreateOrConnectWithoutSlotInput[]
    createMany?: GameCreateManySlotInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameChoiceUncheckedCreateNestedManyWithoutSlotInput = {
    create?: XOR<GameChoiceCreateWithoutSlotInput, GameChoiceUncheckedCreateWithoutSlotInput> | GameChoiceCreateWithoutSlotInput[] | GameChoiceUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutSlotInput | GameChoiceCreateOrConnectWithoutSlotInput[]
    createMany?: GameChoiceCreateManySlotInputEnvelope
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
  }

  export type GameUpdateManyWithoutSlotNestedInput = {
    create?: XOR<GameCreateWithoutSlotInput, GameUncheckedCreateWithoutSlotInput> | GameCreateWithoutSlotInput[] | GameUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: GameCreateOrConnectWithoutSlotInput | GameCreateOrConnectWithoutSlotInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutSlotInput | GameUpsertWithWhereUniqueWithoutSlotInput[]
    createMany?: GameCreateManySlotInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutSlotInput | GameUpdateWithWhereUniqueWithoutSlotInput[]
    updateMany?: GameUpdateManyWithWhereWithoutSlotInput | GameUpdateManyWithWhereWithoutSlotInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameChoiceUpdateManyWithoutSlotNestedInput = {
    create?: XOR<GameChoiceCreateWithoutSlotInput, GameChoiceUncheckedCreateWithoutSlotInput> | GameChoiceCreateWithoutSlotInput[] | GameChoiceUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutSlotInput | GameChoiceCreateOrConnectWithoutSlotInput[]
    upsert?: GameChoiceUpsertWithWhereUniqueWithoutSlotInput | GameChoiceUpsertWithWhereUniqueWithoutSlotInput[]
    createMany?: GameChoiceCreateManySlotInputEnvelope
    set?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    disconnect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    delete?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    update?: GameChoiceUpdateWithWhereUniqueWithoutSlotInput | GameChoiceUpdateWithWhereUniqueWithoutSlotInput[]
    updateMany?: GameChoiceUpdateManyWithWhereWithoutSlotInput | GameChoiceUpdateManyWithWhereWithoutSlotInput[]
    deleteMany?: GameChoiceScalarWhereInput | GameChoiceScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutSlotNestedInput = {
    create?: XOR<GameCreateWithoutSlotInput, GameUncheckedCreateWithoutSlotInput> | GameCreateWithoutSlotInput[] | GameUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: GameCreateOrConnectWithoutSlotInput | GameCreateOrConnectWithoutSlotInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutSlotInput | GameUpsertWithWhereUniqueWithoutSlotInput[]
    createMany?: GameCreateManySlotInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutSlotInput | GameUpdateWithWhereUniqueWithoutSlotInput[]
    updateMany?: GameUpdateManyWithWhereWithoutSlotInput | GameUpdateManyWithWhereWithoutSlotInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameChoiceUncheckedUpdateManyWithoutSlotNestedInput = {
    create?: XOR<GameChoiceCreateWithoutSlotInput, GameChoiceUncheckedCreateWithoutSlotInput> | GameChoiceCreateWithoutSlotInput[] | GameChoiceUncheckedCreateWithoutSlotInput[]
    connectOrCreate?: GameChoiceCreateOrConnectWithoutSlotInput | GameChoiceCreateOrConnectWithoutSlotInput[]
    upsert?: GameChoiceUpsertWithWhereUniqueWithoutSlotInput | GameChoiceUpsertWithWhereUniqueWithoutSlotInput[]
    createMany?: GameChoiceCreateManySlotInputEnvelope
    set?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    disconnect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    delete?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    connect?: GameChoiceWhereUniqueInput | GameChoiceWhereUniqueInput[]
    update?: GameChoiceUpdateWithWhereUniqueWithoutSlotInput | GameChoiceUpdateWithWhereUniqueWithoutSlotInput[]
    updateMany?: GameChoiceUpdateManyWithWhereWithoutSlotInput | GameChoiceUpdateManyWithWhereWithoutSlotInput[]
    deleteMany?: GameChoiceScalarWhereInput | GameChoiceScalarWhereInput[]
  }

  export type MembershipCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<MembershipCreateWithoutTransactionsInput, MembershipUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: MembershipCreateOrConnectWithoutTransactionsInput
    connect?: MembershipWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransactionsTransactionsOriginTouserInput = {
    create?: XOR<UserCreateWithoutTransactionsTransactionsOriginTouserInput, UserUncheckedCreateWithoutTransactionsTransactionsOriginTouserInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsTransactionsOriginTouserInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransactionsTransactionsUserIdTouserInput = {
    create?: XOR<UserCreateWithoutTransactionsTransactionsUserIdTouserInput, UserUncheckedCreateWithoutTransactionsTransactionsUserIdTouserInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsTransactionsUserIdTouserInput
    connect?: UserWhereUniqueInput
  }

  export type MembershipUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<MembershipCreateWithoutTransactionsInput, MembershipUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: MembershipCreateOrConnectWithoutTransactionsInput
    upsert?: MembershipUpsertWithoutTransactionsInput
    disconnect?: MembershipWhereInput | boolean
    delete?: MembershipWhereInput | boolean
    connect?: MembershipWhereUniqueInput
    update?: XOR<XOR<MembershipUpdateToOneWithWhereWithoutTransactionsInput, MembershipUpdateWithoutTransactionsInput>, MembershipUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateOneWithoutTransactionsTransactionsOriginTouserNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsTransactionsOriginTouserInput, UserUncheckedCreateWithoutTransactionsTransactionsOriginTouserInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsTransactionsOriginTouserInput
    upsert?: UserUpsertWithoutTransactionsTransactionsOriginTouserInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsTransactionsOriginTouserInput, UserUpdateWithoutTransactionsTransactionsOriginTouserInput>, UserUncheckedUpdateWithoutTransactionsTransactionsOriginTouserInput>
  }

  export type UserUpdateOneRequiredWithoutTransactionsTransactionsUserIdTouserNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsTransactionsUserIdTouserInput, UserUncheckedCreateWithoutTransactionsTransactionsUserIdTouserInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsTransactionsUserIdTouserInput
    upsert?: UserUpsertWithoutTransactionsTransactionsUserIdTouserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsTransactionsUserIdTouserInput, UserUpdateWithoutTransactionsTransactionsUserIdTouserInput>, UserUncheckedUpdateWithoutTransactionsTransactionsUserIdTouserInput>
  }

  export type GameCreateNestedManyWithoutUserInput = {
    create?: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput> | GameCreateWithoutUserInput[] | GameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameCreateOrConnectWithoutUserInput | GameCreateOrConnectWithoutUserInput[]
    createMany?: GameCreateManyUserInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type MembershipCreateNestedManyWithoutUserInput = {
    create?: XOR<MembershipCreateWithoutUserInput, MembershipUncheckedCreateWithoutUserInput> | MembershipCreateWithoutUserInput[] | MembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MembershipCreateOrConnectWithoutUserInput | MembershipCreateOrConnectWithoutUserInput[]
    createMany?: MembershipCreateManyUserInputEnvelope
    connect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
  }

  export type ProfileCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type ShirtOrderCreateNestedManyWithoutUserInput = {
    create?: XOR<ShirtOrderCreateWithoutUserInput, ShirtOrderUncheckedCreateWithoutUserInput> | ShirtOrderCreateWithoutUserInput[] | ShirtOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShirtOrderCreateOrConnectWithoutUserInput | ShirtOrderCreateOrConnectWithoutUserInput[]
    createMany?: ShirtOrderCreateManyUserInputEnvelope
    connect?: ShirtOrderWhereUniqueInput | ShirtOrderWhereUniqueInput[]
  }

  export type TransactionsCreateNestedManyWithoutUserTransactionsOriginTouserInput = {
    create?: XOR<TransactionsCreateWithoutUserTransactionsOriginTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsOriginTouserInput> | TransactionsCreateWithoutUserTransactionsOriginTouserInput[] | TransactionsUncheckedCreateWithoutUserTransactionsOriginTouserInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUserTransactionsOriginTouserInput | TransactionsCreateOrConnectWithoutUserTransactionsOriginTouserInput[]
    createMany?: TransactionsCreateManyUserTransactionsOriginTouserInputEnvelope
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
  }

  export type TransactionsCreateNestedManyWithoutUserTransactionsUserIdTouserInput = {
    create?: XOR<TransactionsCreateWithoutUserTransactionsUserIdTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsUserIdTouserInput> | TransactionsCreateWithoutUserTransactionsUserIdTouserInput[] | TransactionsUncheckedCreateWithoutUserTransactionsUserIdTouserInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUserTransactionsUserIdTouserInput | TransactionsCreateOrConnectWithoutUserTransactionsUserIdTouserInput[]
    createMany?: TransactionsCreateManyUserTransactionsUserIdTouserInputEnvelope
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput> | GameCreateWithoutUserInput[] | GameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameCreateOrConnectWithoutUserInput | GameCreateOrConnectWithoutUserInput[]
    createMany?: GameCreateManyUserInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type MembershipUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MembershipCreateWithoutUserInput, MembershipUncheckedCreateWithoutUserInput> | MembershipCreateWithoutUserInput[] | MembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MembershipCreateOrConnectWithoutUserInput | MembershipCreateOrConnectWithoutUserInput[]
    createMany?: MembershipCreateManyUserInputEnvelope
    connect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type ShirtOrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShirtOrderCreateWithoutUserInput, ShirtOrderUncheckedCreateWithoutUserInput> | ShirtOrderCreateWithoutUserInput[] | ShirtOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShirtOrderCreateOrConnectWithoutUserInput | ShirtOrderCreateOrConnectWithoutUserInput[]
    createMany?: ShirtOrderCreateManyUserInputEnvelope
    connect?: ShirtOrderWhereUniqueInput | ShirtOrderWhereUniqueInput[]
  }

  export type TransactionsUncheckedCreateNestedManyWithoutUserTransactionsOriginTouserInput = {
    create?: XOR<TransactionsCreateWithoutUserTransactionsOriginTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsOriginTouserInput> | TransactionsCreateWithoutUserTransactionsOriginTouserInput[] | TransactionsUncheckedCreateWithoutUserTransactionsOriginTouserInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUserTransactionsOriginTouserInput | TransactionsCreateOrConnectWithoutUserTransactionsOriginTouserInput[]
    createMany?: TransactionsCreateManyUserTransactionsOriginTouserInputEnvelope
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
  }

  export type TransactionsUncheckedCreateNestedManyWithoutUserTransactionsUserIdTouserInput = {
    create?: XOR<TransactionsCreateWithoutUserTransactionsUserIdTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsUserIdTouserInput> | TransactionsCreateWithoutUserTransactionsUserIdTouserInput[] | TransactionsUncheckedCreateWithoutUserTransactionsUserIdTouserInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUserTransactionsUserIdTouserInput | TransactionsCreateOrConnectWithoutUserTransactionsUserIdTouserInput[]
    createMany?: TransactionsCreateManyUserTransactionsUserIdTouserInputEnvelope
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type GameUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput> | GameCreateWithoutUserInput[] | GameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameCreateOrConnectWithoutUserInput | GameCreateOrConnectWithoutUserInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutUserInput | GameUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameCreateManyUserInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutUserInput | GameUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameUpdateManyWithWhereWithoutUserInput | GameUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type MembershipUpdateManyWithoutUserNestedInput = {
    create?: XOR<MembershipCreateWithoutUserInput, MembershipUncheckedCreateWithoutUserInput> | MembershipCreateWithoutUserInput[] | MembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MembershipCreateOrConnectWithoutUserInput | MembershipCreateOrConnectWithoutUserInput[]
    upsert?: MembershipUpsertWithWhereUniqueWithoutUserInput | MembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MembershipCreateManyUserInputEnvelope
    set?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    disconnect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    delete?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    connect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    update?: MembershipUpdateWithWhereUniqueWithoutUserInput | MembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MembershipUpdateManyWithWhereWithoutUserInput | MembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MembershipScalarWhereInput | MembershipScalarWhereInput[]
  }

  export type ProfileUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUserInput | ProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUserInput | ProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUserInput | ProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type ShirtOrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShirtOrderCreateWithoutUserInput, ShirtOrderUncheckedCreateWithoutUserInput> | ShirtOrderCreateWithoutUserInput[] | ShirtOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShirtOrderCreateOrConnectWithoutUserInput | ShirtOrderCreateOrConnectWithoutUserInput[]
    upsert?: ShirtOrderUpsertWithWhereUniqueWithoutUserInput | ShirtOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShirtOrderCreateManyUserInputEnvelope
    set?: ShirtOrderWhereUniqueInput | ShirtOrderWhereUniqueInput[]
    disconnect?: ShirtOrderWhereUniqueInput | ShirtOrderWhereUniqueInput[]
    delete?: ShirtOrderWhereUniqueInput | ShirtOrderWhereUniqueInput[]
    connect?: ShirtOrderWhereUniqueInput | ShirtOrderWhereUniqueInput[]
    update?: ShirtOrderUpdateWithWhereUniqueWithoutUserInput | ShirtOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShirtOrderUpdateManyWithWhereWithoutUserInput | ShirtOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShirtOrderScalarWhereInput | ShirtOrderScalarWhereInput[]
  }

  export type TransactionsUpdateManyWithoutUserTransactionsOriginTouserNestedInput = {
    create?: XOR<TransactionsCreateWithoutUserTransactionsOriginTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsOriginTouserInput> | TransactionsCreateWithoutUserTransactionsOriginTouserInput[] | TransactionsUncheckedCreateWithoutUserTransactionsOriginTouserInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUserTransactionsOriginTouserInput | TransactionsCreateOrConnectWithoutUserTransactionsOriginTouserInput[]
    upsert?: TransactionsUpsertWithWhereUniqueWithoutUserTransactionsOriginTouserInput | TransactionsUpsertWithWhereUniqueWithoutUserTransactionsOriginTouserInput[]
    createMany?: TransactionsCreateManyUserTransactionsOriginTouserInputEnvelope
    set?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    disconnect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    delete?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    update?: TransactionsUpdateWithWhereUniqueWithoutUserTransactionsOriginTouserInput | TransactionsUpdateWithWhereUniqueWithoutUserTransactionsOriginTouserInput[]
    updateMany?: TransactionsUpdateManyWithWhereWithoutUserTransactionsOriginTouserInput | TransactionsUpdateManyWithWhereWithoutUserTransactionsOriginTouserInput[]
    deleteMany?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
  }

  export type TransactionsUpdateManyWithoutUserTransactionsUserIdTouserNestedInput = {
    create?: XOR<TransactionsCreateWithoutUserTransactionsUserIdTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsUserIdTouserInput> | TransactionsCreateWithoutUserTransactionsUserIdTouserInput[] | TransactionsUncheckedCreateWithoutUserTransactionsUserIdTouserInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUserTransactionsUserIdTouserInput | TransactionsCreateOrConnectWithoutUserTransactionsUserIdTouserInput[]
    upsert?: TransactionsUpsertWithWhereUniqueWithoutUserTransactionsUserIdTouserInput | TransactionsUpsertWithWhereUniqueWithoutUserTransactionsUserIdTouserInput[]
    createMany?: TransactionsCreateManyUserTransactionsUserIdTouserInputEnvelope
    set?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    disconnect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    delete?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    update?: TransactionsUpdateWithWhereUniqueWithoutUserTransactionsUserIdTouserInput | TransactionsUpdateWithWhereUniqueWithoutUserTransactionsUserIdTouserInput[]
    updateMany?: TransactionsUpdateManyWithWhereWithoutUserTransactionsUserIdTouserInput | TransactionsUpdateManyWithWhereWithoutUserTransactionsUserIdTouserInput[]
    deleteMany?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput> | GameCreateWithoutUserInput[] | GameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameCreateOrConnectWithoutUserInput | GameCreateOrConnectWithoutUserInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutUserInput | GameUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameCreateManyUserInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutUserInput | GameUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameUpdateManyWithWhereWithoutUserInput | GameUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type MembershipUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MembershipCreateWithoutUserInput, MembershipUncheckedCreateWithoutUserInput> | MembershipCreateWithoutUserInput[] | MembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MembershipCreateOrConnectWithoutUserInput | MembershipCreateOrConnectWithoutUserInput[]
    upsert?: MembershipUpsertWithWhereUniqueWithoutUserInput | MembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MembershipCreateManyUserInputEnvelope
    set?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    disconnect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    delete?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    connect?: MembershipWhereUniqueInput | MembershipWhereUniqueInput[]
    update?: MembershipUpdateWithWhereUniqueWithoutUserInput | MembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MembershipUpdateManyWithWhereWithoutUserInput | MembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MembershipScalarWhereInput | MembershipScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUserInput | ProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUserInput | ProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUserInput | ProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type ShirtOrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShirtOrderCreateWithoutUserInput, ShirtOrderUncheckedCreateWithoutUserInput> | ShirtOrderCreateWithoutUserInput[] | ShirtOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShirtOrderCreateOrConnectWithoutUserInput | ShirtOrderCreateOrConnectWithoutUserInput[]
    upsert?: ShirtOrderUpsertWithWhereUniqueWithoutUserInput | ShirtOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShirtOrderCreateManyUserInputEnvelope
    set?: ShirtOrderWhereUniqueInput | ShirtOrderWhereUniqueInput[]
    disconnect?: ShirtOrderWhereUniqueInput | ShirtOrderWhereUniqueInput[]
    delete?: ShirtOrderWhereUniqueInput | ShirtOrderWhereUniqueInput[]
    connect?: ShirtOrderWhereUniqueInput | ShirtOrderWhereUniqueInput[]
    update?: ShirtOrderUpdateWithWhereUniqueWithoutUserInput | ShirtOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShirtOrderUpdateManyWithWhereWithoutUserInput | ShirtOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShirtOrderScalarWhereInput | ShirtOrderScalarWhereInput[]
  }

  export type TransactionsUncheckedUpdateManyWithoutUserTransactionsOriginTouserNestedInput = {
    create?: XOR<TransactionsCreateWithoutUserTransactionsOriginTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsOriginTouserInput> | TransactionsCreateWithoutUserTransactionsOriginTouserInput[] | TransactionsUncheckedCreateWithoutUserTransactionsOriginTouserInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUserTransactionsOriginTouserInput | TransactionsCreateOrConnectWithoutUserTransactionsOriginTouserInput[]
    upsert?: TransactionsUpsertWithWhereUniqueWithoutUserTransactionsOriginTouserInput | TransactionsUpsertWithWhereUniqueWithoutUserTransactionsOriginTouserInput[]
    createMany?: TransactionsCreateManyUserTransactionsOriginTouserInputEnvelope
    set?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    disconnect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    delete?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    update?: TransactionsUpdateWithWhereUniqueWithoutUserTransactionsOriginTouserInput | TransactionsUpdateWithWhereUniqueWithoutUserTransactionsOriginTouserInput[]
    updateMany?: TransactionsUpdateManyWithWhereWithoutUserTransactionsOriginTouserInput | TransactionsUpdateManyWithWhereWithoutUserTransactionsOriginTouserInput[]
    deleteMany?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
  }

  export type TransactionsUncheckedUpdateManyWithoutUserTransactionsUserIdTouserNestedInput = {
    create?: XOR<TransactionsCreateWithoutUserTransactionsUserIdTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsUserIdTouserInput> | TransactionsCreateWithoutUserTransactionsUserIdTouserInput[] | TransactionsUncheckedCreateWithoutUserTransactionsUserIdTouserInput[]
    connectOrCreate?: TransactionsCreateOrConnectWithoutUserTransactionsUserIdTouserInput | TransactionsCreateOrConnectWithoutUserTransactionsUserIdTouserInput[]
    upsert?: TransactionsUpsertWithWhereUniqueWithoutUserTransactionsUserIdTouserInput | TransactionsUpsertWithWhereUniqueWithoutUserTransactionsUserIdTouserInput[]
    createMany?: TransactionsCreateManyUserTransactionsUserIdTouserInputEnvelope
    set?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    disconnect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    delete?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    connect?: TransactionsWhereUniqueInput | TransactionsWhereUniqueInput[]
    update?: TransactionsUpdateWithWhereUniqueWithoutUserTransactionsUserIdTouserInput | TransactionsUpdateWithWhereUniqueWithoutUserTransactionsUserIdTouserInput[]
    updateMany?: TransactionsUpdateManyWithWhereWithoutUserTransactionsUserIdTouserInput | TransactionsUpdateManyWithWhereWithoutUserTransactionsUserIdTouserInput[]
    deleteMany?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutUserRoleInput = {
    create?: XOR<RoleCreateWithoutUserRoleInput, RoleUncheckedCreateWithoutUserRoleInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserRoleInput
    connect?: RoleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserRoleInput = {
    create?: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRoleInput
    connect?: UserWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutUserRoleNestedInput = {
    create?: XOR<RoleCreateWithoutUserRoleInput, RoleUncheckedCreateWithoutUserRoleInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserRoleInput
    upsert?: RoleUpsertWithoutUserRoleInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUserRoleInput, RoleUpdateWithoutUserRoleInput>, RoleUncheckedUpdateWithoutUserRoleInput>
  }

  export type UserUpdateOneRequiredWithoutUserRoleNestedInput = {
    create?: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRoleInput
    upsert?: UserUpsertWithoutUserRoleInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserRoleInput, UserUpdateWithoutUserRoleInput>, UserUncheckedUpdateWithoutUserRoleInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserCreateWithoutGameInput = {
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    membership?: MembershipCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGameInput = {
    id?: number
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    membership?: MembershipUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderUncheckedCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGameInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
  }

  export type RoomCreateWithoutGameInput = {
    description: string
    size: number
    type: string
    updated: boolean
  }

  export type RoomUncheckedCreateWithoutGameInput = {
    id?: number
    description: string
    size: number
    type: string
    updated: boolean
  }

  export type RoomCreateOrConnectWithoutGameInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutGameInput, RoomUncheckedCreateWithoutGameInput>
  }

  export type SlotCreateWithoutGameInput = {
    slot: number
    day: string
    formattedDate: string
    length: string
    time: string
    gameChoice?: GameChoiceCreateNestedManyWithoutSlotInput
  }

  export type SlotUncheckedCreateWithoutGameInput = {
    id?: number
    slot: number
    day: string
    formattedDate: string
    length: string
    time: string
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutSlotInput
  }

  export type SlotCreateOrConnectWithoutGameInput = {
    where: SlotWhereUniqueInput
    create: XOR<SlotCreateWithoutGameInput, SlotUncheckedCreateWithoutGameInput>
  }

  export type GameAssignmentCreateWithoutGameInput = {
    gm: number
    year: number
    membership: MembershipCreateNestedOneWithoutGameAssignmentInput
  }

  export type GameAssignmentUncheckedCreateWithoutGameInput = {
    memberId: number
    gm: number
    year: number
  }

  export type GameAssignmentCreateOrConnectWithoutGameInput = {
    where: GameAssignmentWhereUniqueInput
    create: XOR<GameAssignmentCreateWithoutGameInput, GameAssignmentUncheckedCreateWithoutGameInput>
  }

  export type GameAssignmentCreateManyGameInputEnvelope = {
    data: GameAssignmentCreateManyGameInput | GameAssignmentCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type GameChoiceCreateWithoutGameInput = {
    rank: number
    year: number
    returningPlayer: boolean
    membership: MembershipCreateNestedOneWithoutGameChoiceInput
    slot: SlotCreateNestedOneWithoutGameChoiceInput
  }

  export type GameChoiceUncheckedCreateWithoutGameInput = {
    id?: number
    memberId: number
    rank: number
    slotId: number
    year: number
    returningPlayer: boolean
  }

  export type GameChoiceCreateOrConnectWithoutGameInput = {
    where: GameChoiceWhereUniqueInput
    create: XOR<GameChoiceCreateWithoutGameInput, GameChoiceUncheckedCreateWithoutGameInput>
  }

  export type GameChoiceCreateManyGameInputEnvelope = {
    data: GameChoiceCreateManyGameInput | GameChoiceCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutGameInput = {
    update: XOR<UserUpdateWithoutGameInput, UserUncheckedUpdateWithoutGameInput>
    create: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGameInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGameInput, UserUncheckedUpdateWithoutGameInput>
  }

  export type UserUpdateWithoutGameInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    membership?: MembershipUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    membership?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUncheckedUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoomUpsertWithoutGameInput = {
    update: XOR<RoomUpdateWithoutGameInput, RoomUncheckedUpdateWithoutGameInput>
    create: XOR<RoomCreateWithoutGameInput, RoomUncheckedCreateWithoutGameInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutGameInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutGameInput, RoomUncheckedUpdateWithoutGameInput>
  }

  export type RoomUpdateWithoutGameInput = {
    description?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SlotUpsertWithoutGameInput = {
    update: XOR<SlotUpdateWithoutGameInput, SlotUncheckedUpdateWithoutGameInput>
    create: XOR<SlotCreateWithoutGameInput, SlotUncheckedCreateWithoutGameInput>
    where?: SlotWhereInput
  }

  export type SlotUpdateToOneWithWhereWithoutGameInput = {
    where?: SlotWhereInput
    data: XOR<SlotUpdateWithoutGameInput, SlotUncheckedUpdateWithoutGameInput>
  }

  export type SlotUpdateWithoutGameInput = {
    slot?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    formattedDate?: StringFieldUpdateOperationsInput | string
    length?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    gameChoice?: GameChoiceUpdateManyWithoutSlotNestedInput
  }

  export type SlotUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    slot?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    formattedDate?: StringFieldUpdateOperationsInput | string
    length?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutSlotNestedInput
  }

  export type GameAssignmentUpsertWithWhereUniqueWithoutGameInput = {
    where: GameAssignmentWhereUniqueInput
    update: XOR<GameAssignmentUpdateWithoutGameInput, GameAssignmentUncheckedUpdateWithoutGameInput>
    create: XOR<GameAssignmentCreateWithoutGameInput, GameAssignmentUncheckedCreateWithoutGameInput>
  }

  export type GameAssignmentUpdateWithWhereUniqueWithoutGameInput = {
    where: GameAssignmentWhereUniqueInput
    data: XOR<GameAssignmentUpdateWithoutGameInput, GameAssignmentUncheckedUpdateWithoutGameInput>
  }

  export type GameAssignmentUpdateManyWithWhereWithoutGameInput = {
    where: GameAssignmentScalarWhereInput
    data: XOR<GameAssignmentUpdateManyMutationInput, GameAssignmentUncheckedUpdateManyWithoutGameInput>
  }

  export type GameAssignmentScalarWhereInput = {
    AND?: GameAssignmentScalarWhereInput | GameAssignmentScalarWhereInput[]
    OR?: GameAssignmentScalarWhereInput[]
    NOT?: GameAssignmentScalarWhereInput | GameAssignmentScalarWhereInput[]
    memberId?: IntFilter<"GameAssignment"> | number
    gameId?: IntFilter<"GameAssignment"> | number
    gm?: IntFilter<"GameAssignment"> | number
    year?: IntFilter<"GameAssignment"> | number
  }

  export type GameChoiceUpsertWithWhereUniqueWithoutGameInput = {
    where: GameChoiceWhereUniqueInput
    update: XOR<GameChoiceUpdateWithoutGameInput, GameChoiceUncheckedUpdateWithoutGameInput>
    create: XOR<GameChoiceCreateWithoutGameInput, GameChoiceUncheckedCreateWithoutGameInput>
  }

  export type GameChoiceUpdateWithWhereUniqueWithoutGameInput = {
    where: GameChoiceWhereUniqueInput
    data: XOR<GameChoiceUpdateWithoutGameInput, GameChoiceUncheckedUpdateWithoutGameInput>
  }

  export type GameChoiceUpdateManyWithWhereWithoutGameInput = {
    where: GameChoiceScalarWhereInput
    data: XOR<GameChoiceUpdateManyMutationInput, GameChoiceUncheckedUpdateManyWithoutGameInput>
  }

  export type GameChoiceScalarWhereInput = {
    AND?: GameChoiceScalarWhereInput | GameChoiceScalarWhereInput[]
    OR?: GameChoiceScalarWhereInput[]
    NOT?: GameChoiceScalarWhereInput | GameChoiceScalarWhereInput[]
    id?: IntFilter<"GameChoice"> | number
    gameId?: IntNullableFilter<"GameChoice"> | number | null
    memberId?: IntFilter<"GameChoice"> | number
    rank?: IntFilter<"GameChoice"> | number
    slotId?: IntFilter<"GameChoice"> | number
    year?: IntFilter<"GameChoice"> | number
    returningPlayer?: BoolFilter<"GameChoice"> | boolean
  }

  export type GameCreateWithoutGameAssignmentInput = {
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    shortName?: string | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    full?: boolean | null
    user?: UserCreateNestedOneWithoutGameInput
    room?: RoomCreateNestedOneWithoutGameInput
    slot?: SlotCreateNestedOneWithoutGameInput
    gameChoice?: GameChoiceCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutGameAssignmentInput = {
    id?: number
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    roomId?: number | null
    shortName?: string | null
    slotId?: number | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    authorId?: number | null
    full?: boolean | null
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutGameAssignmentInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameAssignmentInput, GameUncheckedCreateWithoutGameAssignmentInput>
  }

  export type MembershipCreateWithoutGameAssignmentInput = {
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameChoice?: GameChoiceCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionCreateNestedManyWithoutMembershipInput
    hotelRoom: HotelRoomCreateNestedOneWithoutMembershipInput
    user: UserCreateNestedOneWithoutMembershipInput
    transactions?: TransactionsCreateNestedManyWithoutMembershipInput
  }

  export type MembershipUncheckedCreateWithoutGameAssignmentInput = {
    id?: number
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    hotelRoomId: number
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    userId: number
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionUncheckedCreateNestedManyWithoutMembershipInput
    transactions?: TransactionsUncheckedCreateNestedManyWithoutMembershipInput
  }

  export type MembershipCreateOrConnectWithoutGameAssignmentInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutGameAssignmentInput, MembershipUncheckedCreateWithoutGameAssignmentInput>
  }

  export type GameUpsertWithoutGameAssignmentInput = {
    update: XOR<GameUpdateWithoutGameAssignmentInput, GameUncheckedUpdateWithoutGameAssignmentInput>
    create: XOR<GameCreateWithoutGameAssignmentInput, GameUncheckedCreateWithoutGameAssignmentInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutGameAssignmentInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutGameAssignmentInput, GameUncheckedUpdateWithoutGameAssignmentInput>
  }

  export type GameUpdateWithoutGameAssignmentInput = {
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneWithoutGameNestedInput
    room?: RoomUpdateOneWithoutGameNestedInput
    slot?: SlotUpdateOneWithoutGameNestedInput
    gameChoice?: GameChoiceUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutGameAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    roomId?: NullableIntFieldUpdateOperationsInput | number | null
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slotId?: NullableIntFieldUpdateOperationsInput | number | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutGameNestedInput
  }

  export type MembershipUpsertWithoutGameAssignmentInput = {
    update: XOR<MembershipUpdateWithoutGameAssignmentInput, MembershipUncheckedUpdateWithoutGameAssignmentInput>
    create: XOR<MembershipCreateWithoutGameAssignmentInput, MembershipUncheckedCreateWithoutGameAssignmentInput>
    where?: MembershipWhereInput
  }

  export type MembershipUpdateToOneWithWhereWithoutGameAssignmentInput = {
    where?: MembershipWhereInput
    data: XOR<MembershipUpdateWithoutGameAssignmentInput, MembershipUncheckedUpdateWithoutGameAssignmentInput>
  }

  export type MembershipUpdateWithoutGameAssignmentInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameChoice?: GameChoiceUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUpdateManyWithoutMembershipNestedInput
    hotelRoom?: HotelRoomUpdateOneRequiredWithoutMembershipNestedInput
    user?: UserUpdateOneRequiredWithoutMembershipNestedInput
    transactions?: TransactionsUpdateManyWithoutMembershipNestedInput
  }

  export type MembershipUncheckedUpdateWithoutGameAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hotelRoomId?: IntFieldUpdateOperationsInput | number
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUncheckedUpdateManyWithoutMembershipNestedInput
    transactions?: TransactionsUncheckedUpdateManyWithoutMembershipNestedInput
  }

  export type GameCreateWithoutGameChoiceInput = {
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    shortName?: string | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    full?: boolean | null
    user?: UserCreateNestedOneWithoutGameInput
    room?: RoomCreateNestedOneWithoutGameInput
    slot?: SlotCreateNestedOneWithoutGameInput
    gameAssignment?: GameAssignmentCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutGameChoiceInput = {
    id?: number
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    roomId?: number | null
    shortName?: string | null
    slotId?: number | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    authorId?: number | null
    full?: boolean | null
    gameAssignment?: GameAssignmentUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutGameChoiceInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameChoiceInput, GameUncheckedCreateWithoutGameChoiceInput>
  }

  export type MembershipCreateWithoutGameChoiceInput = {
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionCreateNestedManyWithoutMembershipInput
    hotelRoom: HotelRoomCreateNestedOneWithoutMembershipInput
    user: UserCreateNestedOneWithoutMembershipInput
    transactions?: TransactionsCreateNestedManyWithoutMembershipInput
  }

  export type MembershipUncheckedCreateWithoutGameChoiceInput = {
    id?: number
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    hotelRoomId: number
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    userId: number
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentUncheckedCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionUncheckedCreateNestedManyWithoutMembershipInput
    transactions?: TransactionsUncheckedCreateNestedManyWithoutMembershipInput
  }

  export type MembershipCreateOrConnectWithoutGameChoiceInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutGameChoiceInput, MembershipUncheckedCreateWithoutGameChoiceInput>
  }

  export type SlotCreateWithoutGameChoiceInput = {
    slot: number
    day: string
    formattedDate: string
    length: string
    time: string
    game?: GameCreateNestedManyWithoutSlotInput
  }

  export type SlotUncheckedCreateWithoutGameChoiceInput = {
    id?: number
    slot: number
    day: string
    formattedDate: string
    length: string
    time: string
    game?: GameUncheckedCreateNestedManyWithoutSlotInput
  }

  export type SlotCreateOrConnectWithoutGameChoiceInput = {
    where: SlotWhereUniqueInput
    create: XOR<SlotCreateWithoutGameChoiceInput, SlotUncheckedCreateWithoutGameChoiceInput>
  }

  export type GameUpsertWithoutGameChoiceInput = {
    update: XOR<GameUpdateWithoutGameChoiceInput, GameUncheckedUpdateWithoutGameChoiceInput>
    create: XOR<GameCreateWithoutGameChoiceInput, GameUncheckedCreateWithoutGameChoiceInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutGameChoiceInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutGameChoiceInput, GameUncheckedUpdateWithoutGameChoiceInput>
  }

  export type GameUpdateWithoutGameChoiceInput = {
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneWithoutGameNestedInput
    room?: RoomUpdateOneWithoutGameNestedInput
    slot?: SlotUpdateOneWithoutGameNestedInput
    gameAssignment?: GameAssignmentUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutGameChoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    roomId?: NullableIntFieldUpdateOperationsInput | number | null
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slotId?: NullableIntFieldUpdateOperationsInput | number | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameAssignment?: GameAssignmentUncheckedUpdateManyWithoutGameNestedInput
  }

  export type MembershipUpsertWithoutGameChoiceInput = {
    update: XOR<MembershipUpdateWithoutGameChoiceInput, MembershipUncheckedUpdateWithoutGameChoiceInput>
    create: XOR<MembershipCreateWithoutGameChoiceInput, MembershipUncheckedCreateWithoutGameChoiceInput>
    where?: MembershipWhereInput
  }

  export type MembershipUpdateToOneWithWhereWithoutGameChoiceInput = {
    where?: MembershipWhereInput
    data: XOR<MembershipUpdateWithoutGameChoiceInput, MembershipUncheckedUpdateWithoutGameChoiceInput>
  }

  export type MembershipUpdateWithoutGameChoiceInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUpdateManyWithoutMembershipNestedInput
    hotelRoom?: HotelRoomUpdateOneRequiredWithoutMembershipNestedInput
    user?: UserUpdateOneRequiredWithoutMembershipNestedInput
    transactions?: TransactionsUpdateManyWithoutMembershipNestedInput
  }

  export type MembershipUncheckedUpdateWithoutGameChoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hotelRoomId?: IntFieldUpdateOperationsInput | number
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUncheckedUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUncheckedUpdateManyWithoutMembershipNestedInput
    transactions?: TransactionsUncheckedUpdateManyWithoutMembershipNestedInput
  }

  export type SlotUpsertWithoutGameChoiceInput = {
    update: XOR<SlotUpdateWithoutGameChoiceInput, SlotUncheckedUpdateWithoutGameChoiceInput>
    create: XOR<SlotCreateWithoutGameChoiceInput, SlotUncheckedCreateWithoutGameChoiceInput>
    where?: SlotWhereInput
  }

  export type SlotUpdateToOneWithWhereWithoutGameChoiceInput = {
    where?: SlotWhereInput
    data: XOR<SlotUpdateWithoutGameChoiceInput, SlotUncheckedUpdateWithoutGameChoiceInput>
  }

  export type SlotUpdateWithoutGameChoiceInput = {
    slot?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    formattedDate?: StringFieldUpdateOperationsInput | string
    length?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    game?: GameUpdateManyWithoutSlotNestedInput
  }

  export type SlotUncheckedUpdateWithoutGameChoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    slot?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    formattedDate?: StringFieldUpdateOperationsInput | string
    length?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    game?: GameUncheckedUpdateManyWithoutSlotNestedInput
  }

  export type MembershipCreateWithoutGameSubmissionInput = {
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentCreateNestedManyWithoutMembershipInput
    gameChoice?: GameChoiceCreateNestedManyWithoutMembershipInput
    hotelRoom: HotelRoomCreateNestedOneWithoutMembershipInput
    user: UserCreateNestedOneWithoutMembershipInput
    transactions?: TransactionsCreateNestedManyWithoutMembershipInput
  }

  export type MembershipUncheckedCreateWithoutGameSubmissionInput = {
    id?: number
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    hotelRoomId: number
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    userId: number
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentUncheckedCreateNestedManyWithoutMembershipInput
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutMembershipInput
    transactions?: TransactionsUncheckedCreateNestedManyWithoutMembershipInput
  }

  export type MembershipCreateOrConnectWithoutGameSubmissionInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutGameSubmissionInput, MembershipUncheckedCreateWithoutGameSubmissionInput>
  }

  export type MembershipUpsertWithoutGameSubmissionInput = {
    update: XOR<MembershipUpdateWithoutGameSubmissionInput, MembershipUncheckedUpdateWithoutGameSubmissionInput>
    create: XOR<MembershipCreateWithoutGameSubmissionInput, MembershipUncheckedCreateWithoutGameSubmissionInput>
    where?: MembershipWhereInput
  }

  export type MembershipUpdateToOneWithWhereWithoutGameSubmissionInput = {
    where?: MembershipWhereInput
    data: XOR<MembershipUpdateWithoutGameSubmissionInput, MembershipUncheckedUpdateWithoutGameSubmissionInput>
  }

  export type MembershipUpdateWithoutGameSubmissionInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUpdateManyWithoutMembershipNestedInput
    gameChoice?: GameChoiceUpdateManyWithoutMembershipNestedInput
    hotelRoom?: HotelRoomUpdateOneRequiredWithoutMembershipNestedInput
    user?: UserUpdateOneRequiredWithoutMembershipNestedInput
    transactions?: TransactionsUpdateManyWithoutMembershipNestedInput
  }

  export type MembershipUncheckedUpdateWithoutGameSubmissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hotelRoomId?: IntFieldUpdateOperationsInput | number
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUncheckedUpdateManyWithoutMembershipNestedInput
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutMembershipNestedInput
    transactions?: TransactionsUncheckedUpdateManyWithoutMembershipNestedInput
  }

  export type MembershipCreateWithoutHotelRoomInput = {
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentCreateNestedManyWithoutMembershipInput
    gameChoice?: GameChoiceCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionCreateNestedManyWithoutMembershipInput
    user: UserCreateNestedOneWithoutMembershipInput
    transactions?: TransactionsCreateNestedManyWithoutMembershipInput
  }

  export type MembershipUncheckedCreateWithoutHotelRoomInput = {
    id?: number
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    userId: number
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentUncheckedCreateNestedManyWithoutMembershipInput
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionUncheckedCreateNestedManyWithoutMembershipInput
    transactions?: TransactionsUncheckedCreateNestedManyWithoutMembershipInput
  }

  export type MembershipCreateOrConnectWithoutHotelRoomInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutHotelRoomInput, MembershipUncheckedCreateWithoutHotelRoomInput>
  }

  export type MembershipCreateManyHotelRoomInputEnvelope = {
    data: MembershipCreateManyHotelRoomInput | MembershipCreateManyHotelRoomInput[]
    skipDuplicates?: boolean
  }

  export type MembershipUpsertWithWhereUniqueWithoutHotelRoomInput = {
    where: MembershipWhereUniqueInput
    update: XOR<MembershipUpdateWithoutHotelRoomInput, MembershipUncheckedUpdateWithoutHotelRoomInput>
    create: XOR<MembershipCreateWithoutHotelRoomInput, MembershipUncheckedCreateWithoutHotelRoomInput>
  }

  export type MembershipUpdateWithWhereUniqueWithoutHotelRoomInput = {
    where: MembershipWhereUniqueInput
    data: XOR<MembershipUpdateWithoutHotelRoomInput, MembershipUncheckedUpdateWithoutHotelRoomInput>
  }

  export type MembershipUpdateManyWithWhereWithoutHotelRoomInput = {
    where: MembershipScalarWhereInput
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyWithoutHotelRoomInput>
  }

  export type MembershipScalarWhereInput = {
    AND?: MembershipScalarWhereInput | MembershipScalarWhereInput[]
    OR?: MembershipScalarWhereInput[]
    NOT?: MembershipScalarWhereInput | MembershipScalarWhereInput[]
    id?: IntFilter<"Membership"> | number
    arrivalDate?: DateTimeFilter<"Membership"> | Date | string
    attendance?: StringFilter<"Membership"> | string
    attending?: BoolFilter<"Membership"> | boolean
    departureDate?: DateTimeFilter<"Membership"> | Date | string
    hotelRoomId?: IntFilter<"Membership"> | number
    interestLevel?: StringFilter<"Membership"> | string
    message?: StringFilter<"Membership"> | string
    roomPreferenceAndNotes?: StringFilter<"Membership"> | string
    roomingPreferences?: StringFilter<"Membership"> | string
    roomingWith?: StringFilter<"Membership"> | string
    userId?: IntFilter<"Membership"> | number
    volunteer?: BoolFilter<"Membership"> | boolean
    year?: IntFilter<"Membership"> | number
    offerSubsidy?: BoolFilter<"Membership"> | boolean
    requestOldPrice?: BoolFilter<"Membership"> | boolean
    slotsAttending?: StringNullableFilter<"Membership"> | string | null
  }

  export type LookupValueCreateWithoutLookupInput = {
    code: string
    numericSequencer: number
    sequencer: number
    stringSequencer: string
    value: string
  }

  export type LookupValueUncheckedCreateWithoutLookupInput = {
    id?: number
    code: string
    numericSequencer: number
    sequencer: number
    stringSequencer: string
    value: string
  }

  export type LookupValueCreateOrConnectWithoutLookupInput = {
    where: LookupValueWhereUniqueInput
    create: XOR<LookupValueCreateWithoutLookupInput, LookupValueUncheckedCreateWithoutLookupInput>
  }

  export type LookupValueCreateManyLookupInputEnvelope = {
    data: LookupValueCreateManyLookupInput | LookupValueCreateManyLookupInput[]
    skipDuplicates?: boolean
  }

  export type LookupValueUpsertWithWhereUniqueWithoutLookupInput = {
    where: LookupValueWhereUniqueInput
    update: XOR<LookupValueUpdateWithoutLookupInput, LookupValueUncheckedUpdateWithoutLookupInput>
    create: XOR<LookupValueCreateWithoutLookupInput, LookupValueUncheckedCreateWithoutLookupInput>
  }

  export type LookupValueUpdateWithWhereUniqueWithoutLookupInput = {
    where: LookupValueWhereUniqueInput
    data: XOR<LookupValueUpdateWithoutLookupInput, LookupValueUncheckedUpdateWithoutLookupInput>
  }

  export type LookupValueUpdateManyWithWhereWithoutLookupInput = {
    where: LookupValueScalarWhereInput
    data: XOR<LookupValueUpdateManyMutationInput, LookupValueUncheckedUpdateManyWithoutLookupInput>
  }

  export type LookupValueScalarWhereInput = {
    AND?: LookupValueScalarWhereInput | LookupValueScalarWhereInput[]
    OR?: LookupValueScalarWhereInput[]
    NOT?: LookupValueScalarWhereInput | LookupValueScalarWhereInput[]
    id?: IntFilter<"LookupValue"> | number
    code?: StringFilter<"LookupValue"> | string
    lookupId?: IntFilter<"LookupValue"> | number
    numericSequencer?: FloatFilter<"LookupValue"> | number
    sequencer?: IntFilter<"LookupValue"> | number
    stringSequencer?: StringFilter<"LookupValue"> | string
    value?: StringFilter<"LookupValue"> | string
  }

  export type LookupCreateWithoutLookupValueInput = {
    codeMaximum?: string | null
    codeMinimum?: string | null
    codeScale?: number | null
    codeType: string
    internationalize: boolean
    ordering: string
    realm: string
    valueMaximum?: string | null
    valueMinimum?: string | null
    valueScale?: number | null
    valueType: string
  }

  export type LookupUncheckedCreateWithoutLookupValueInput = {
    id?: number
    codeMaximum?: string | null
    codeMinimum?: string | null
    codeScale?: number | null
    codeType: string
    internationalize: boolean
    ordering: string
    realm: string
    valueMaximum?: string | null
    valueMinimum?: string | null
    valueScale?: number | null
    valueType: string
  }

  export type LookupCreateOrConnectWithoutLookupValueInput = {
    where: LookupWhereUniqueInput
    create: XOR<LookupCreateWithoutLookupValueInput, LookupUncheckedCreateWithoutLookupValueInput>
  }

  export type LookupUpsertWithoutLookupValueInput = {
    update: XOR<LookupUpdateWithoutLookupValueInput, LookupUncheckedUpdateWithoutLookupValueInput>
    create: XOR<LookupCreateWithoutLookupValueInput, LookupUncheckedCreateWithoutLookupValueInput>
    where?: LookupWhereInput
  }

  export type LookupUpdateToOneWithWhereWithoutLookupValueInput = {
    where?: LookupWhereInput
    data: XOR<LookupUpdateWithoutLookupValueInput, LookupUncheckedUpdateWithoutLookupValueInput>
  }

  export type LookupUpdateWithoutLookupValueInput = {
    codeMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    codeMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    codeScale?: NullableIntFieldUpdateOperationsInput | number | null
    codeType?: StringFieldUpdateOperationsInput | string
    internationalize?: BoolFieldUpdateOperationsInput | boolean
    ordering?: StringFieldUpdateOperationsInput | string
    realm?: StringFieldUpdateOperationsInput | string
    valueMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    valueMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    valueScale?: NullableIntFieldUpdateOperationsInput | number | null
    valueType?: StringFieldUpdateOperationsInput | string
  }

  export type LookupUncheckedUpdateWithoutLookupValueInput = {
    id?: IntFieldUpdateOperationsInput | number
    codeMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    codeMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    codeScale?: NullableIntFieldUpdateOperationsInput | number | null
    codeType?: StringFieldUpdateOperationsInput | string
    internationalize?: BoolFieldUpdateOperationsInput | boolean
    ordering?: StringFieldUpdateOperationsInput | string
    realm?: StringFieldUpdateOperationsInput | string
    valueMaximum?: NullableStringFieldUpdateOperationsInput | string | null
    valueMinimum?: NullableStringFieldUpdateOperationsInput | string | null
    valueScale?: NullableIntFieldUpdateOperationsInput | number | null
    valueType?: StringFieldUpdateOperationsInput | string
  }

  export type GameAssignmentCreateWithoutMembershipInput = {
    gm: number
    year: number
    game: GameCreateNestedOneWithoutGameAssignmentInput
  }

  export type GameAssignmentUncheckedCreateWithoutMembershipInput = {
    gameId: number
    gm: number
    year: number
  }

  export type GameAssignmentCreateOrConnectWithoutMembershipInput = {
    where: GameAssignmentWhereUniqueInput
    create: XOR<GameAssignmentCreateWithoutMembershipInput, GameAssignmentUncheckedCreateWithoutMembershipInput>
  }

  export type GameAssignmentCreateManyMembershipInputEnvelope = {
    data: GameAssignmentCreateManyMembershipInput | GameAssignmentCreateManyMembershipInput[]
    skipDuplicates?: boolean
  }

  export type GameChoiceCreateWithoutMembershipInput = {
    rank: number
    year: number
    returningPlayer: boolean
    game?: GameCreateNestedOneWithoutGameChoiceInput
    slot: SlotCreateNestedOneWithoutGameChoiceInput
  }

  export type GameChoiceUncheckedCreateWithoutMembershipInput = {
    id?: number
    gameId?: number | null
    rank: number
    slotId: number
    year: number
    returningPlayer: boolean
  }

  export type GameChoiceCreateOrConnectWithoutMembershipInput = {
    where: GameChoiceWhereUniqueInput
    create: XOR<GameChoiceCreateWithoutMembershipInput, GameChoiceUncheckedCreateWithoutMembershipInput>
  }

  export type GameChoiceCreateManyMembershipInputEnvelope = {
    data: GameChoiceCreateManyMembershipInput | GameChoiceCreateManyMembershipInput[]
    skipDuplicates?: boolean
  }

  export type GameSubmissionCreateWithoutMembershipInput = {
    message: string
    year: number
  }

  export type GameSubmissionUncheckedCreateWithoutMembershipInput = {
    id?: number
    message: string
    year: number
  }

  export type GameSubmissionCreateOrConnectWithoutMembershipInput = {
    where: GameSubmissionWhereUniqueInput
    create: XOR<GameSubmissionCreateWithoutMembershipInput, GameSubmissionUncheckedCreateWithoutMembershipInput>
  }

  export type GameSubmissionCreateManyMembershipInputEnvelope = {
    data: GameSubmissionCreateManyMembershipInput | GameSubmissionCreateManyMembershipInput[]
    skipDuplicates?: boolean
  }

  export type HotelRoomCreateWithoutMembershipInput = {
    description: string
    gamingRoom: boolean
    occupancy: string
    quantity: number
    rate: string
    bathroomType: string
    type: string
  }

  export type HotelRoomUncheckedCreateWithoutMembershipInput = {
    id?: number
    description: string
    gamingRoom: boolean
    occupancy: string
    quantity: number
    rate: string
    bathroomType: string
    type: string
  }

  export type HotelRoomCreateOrConnectWithoutMembershipInput = {
    where: HotelRoomWhereUniqueInput
    create: XOR<HotelRoomCreateWithoutMembershipInput, HotelRoomUncheckedCreateWithoutMembershipInput>
  }

  export type UserCreateWithoutMembershipInput = {
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMembershipInput = {
    id?: number
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderUncheckedCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMembershipInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMembershipInput, UserUncheckedCreateWithoutMembershipInput>
  }

  export type TransactionsCreateWithoutMembershipInput = {
    id?: bigint | number
    year: number
    timestamp?: Date | string
    amount: number
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
    userTransactionsOriginTouser?: UserCreateNestedOneWithoutTransactionsTransactionsOriginTouserInput
    userTransactionsUserIdTouser: UserCreateNestedOneWithoutTransactionsTransactionsUserIdTouserInput
  }

  export type TransactionsUncheckedCreateWithoutMembershipInput = {
    id?: bigint | number
    userId: number
    year: number
    timestamp?: Date | string
    amount: number
    origin?: number | null
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsCreateOrConnectWithoutMembershipInput = {
    where: TransactionsWhereUniqueInput
    create: XOR<TransactionsCreateWithoutMembershipInput, TransactionsUncheckedCreateWithoutMembershipInput>
  }

  export type TransactionsCreateManyMembershipInputEnvelope = {
    data: TransactionsCreateManyMembershipInput | TransactionsCreateManyMembershipInput[]
    skipDuplicates?: boolean
  }

  export type GameAssignmentUpsertWithWhereUniqueWithoutMembershipInput = {
    where: GameAssignmentWhereUniqueInput
    update: XOR<GameAssignmentUpdateWithoutMembershipInput, GameAssignmentUncheckedUpdateWithoutMembershipInput>
    create: XOR<GameAssignmentCreateWithoutMembershipInput, GameAssignmentUncheckedCreateWithoutMembershipInput>
  }

  export type GameAssignmentUpdateWithWhereUniqueWithoutMembershipInput = {
    where: GameAssignmentWhereUniqueInput
    data: XOR<GameAssignmentUpdateWithoutMembershipInput, GameAssignmentUncheckedUpdateWithoutMembershipInput>
  }

  export type GameAssignmentUpdateManyWithWhereWithoutMembershipInput = {
    where: GameAssignmentScalarWhereInput
    data: XOR<GameAssignmentUpdateManyMutationInput, GameAssignmentUncheckedUpdateManyWithoutMembershipInput>
  }

  export type GameChoiceUpsertWithWhereUniqueWithoutMembershipInput = {
    where: GameChoiceWhereUniqueInput
    update: XOR<GameChoiceUpdateWithoutMembershipInput, GameChoiceUncheckedUpdateWithoutMembershipInput>
    create: XOR<GameChoiceCreateWithoutMembershipInput, GameChoiceUncheckedCreateWithoutMembershipInput>
  }

  export type GameChoiceUpdateWithWhereUniqueWithoutMembershipInput = {
    where: GameChoiceWhereUniqueInput
    data: XOR<GameChoiceUpdateWithoutMembershipInput, GameChoiceUncheckedUpdateWithoutMembershipInput>
  }

  export type GameChoiceUpdateManyWithWhereWithoutMembershipInput = {
    where: GameChoiceScalarWhereInput
    data: XOR<GameChoiceUpdateManyMutationInput, GameChoiceUncheckedUpdateManyWithoutMembershipInput>
  }

  export type GameSubmissionUpsertWithWhereUniqueWithoutMembershipInput = {
    where: GameSubmissionWhereUniqueInput
    update: XOR<GameSubmissionUpdateWithoutMembershipInput, GameSubmissionUncheckedUpdateWithoutMembershipInput>
    create: XOR<GameSubmissionCreateWithoutMembershipInput, GameSubmissionUncheckedCreateWithoutMembershipInput>
  }

  export type GameSubmissionUpdateWithWhereUniqueWithoutMembershipInput = {
    where: GameSubmissionWhereUniqueInput
    data: XOR<GameSubmissionUpdateWithoutMembershipInput, GameSubmissionUncheckedUpdateWithoutMembershipInput>
  }

  export type GameSubmissionUpdateManyWithWhereWithoutMembershipInput = {
    where: GameSubmissionScalarWhereInput
    data: XOR<GameSubmissionUpdateManyMutationInput, GameSubmissionUncheckedUpdateManyWithoutMembershipInput>
  }

  export type GameSubmissionScalarWhereInput = {
    AND?: GameSubmissionScalarWhereInput | GameSubmissionScalarWhereInput[]
    OR?: GameSubmissionScalarWhereInput[]
    NOT?: GameSubmissionScalarWhereInput | GameSubmissionScalarWhereInput[]
    id?: IntFilter<"GameSubmission"> | number
    memberId?: IntFilter<"GameSubmission"> | number
    message?: StringFilter<"GameSubmission"> | string
    year?: IntFilter<"GameSubmission"> | number
  }

  export type HotelRoomUpsertWithoutMembershipInput = {
    update: XOR<HotelRoomUpdateWithoutMembershipInput, HotelRoomUncheckedUpdateWithoutMembershipInput>
    create: XOR<HotelRoomCreateWithoutMembershipInput, HotelRoomUncheckedCreateWithoutMembershipInput>
    where?: HotelRoomWhereInput
  }

  export type HotelRoomUpdateToOneWithWhereWithoutMembershipInput = {
    where?: HotelRoomWhereInput
    data: XOR<HotelRoomUpdateWithoutMembershipInput, HotelRoomUncheckedUpdateWithoutMembershipInput>
  }

  export type HotelRoomUpdateWithoutMembershipInput = {
    description?: StringFieldUpdateOperationsInput | string
    gamingRoom?: BoolFieldUpdateOperationsInput | boolean
    occupancy?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    rate?: StringFieldUpdateOperationsInput | string
    bathroomType?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type HotelRoomUncheckedUpdateWithoutMembershipInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    gamingRoom?: BoolFieldUpdateOperationsInput | boolean
    occupancy?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    rate?: StringFieldUpdateOperationsInput | string
    bathroomType?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutMembershipInput = {
    update: XOR<UserUpdateWithoutMembershipInput, UserUncheckedUpdateWithoutMembershipInput>
    create: XOR<UserCreateWithoutMembershipInput, UserUncheckedCreateWithoutMembershipInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMembershipInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMembershipInput, UserUncheckedUpdateWithoutMembershipInput>
  }

  export type UserUpdateWithoutMembershipInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMembershipInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUncheckedUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TransactionsUpsertWithWhereUniqueWithoutMembershipInput = {
    where: TransactionsWhereUniqueInput
    update: XOR<TransactionsUpdateWithoutMembershipInput, TransactionsUncheckedUpdateWithoutMembershipInput>
    create: XOR<TransactionsCreateWithoutMembershipInput, TransactionsUncheckedCreateWithoutMembershipInput>
  }

  export type TransactionsUpdateWithWhereUniqueWithoutMembershipInput = {
    where: TransactionsWhereUniqueInput
    data: XOR<TransactionsUpdateWithoutMembershipInput, TransactionsUncheckedUpdateWithoutMembershipInput>
  }

  export type TransactionsUpdateManyWithWhereWithoutMembershipInput = {
    where: TransactionsScalarWhereInput
    data: XOR<TransactionsUpdateManyMutationInput, TransactionsUncheckedUpdateManyWithoutMembershipInput>
  }

  export type TransactionsScalarWhereInput = {
    AND?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
    OR?: TransactionsScalarWhereInput[]
    NOT?: TransactionsScalarWhereInput | TransactionsScalarWhereInput[]
    id?: BigIntFilter<"Transactions"> | bigint | number
    userId?: IntFilter<"Transactions"> | number
    memberId?: IntNullableFilter<"Transactions"> | number | null
    year?: IntFilter<"Transactions"> | number
    timestamp?: DateTimeFilter<"Transactions"> | Date | string
    amount?: FloatFilter<"Transactions"> | number
    origin?: IntNullableFilter<"Transactions"> | number | null
    stripe?: BoolFilter<"Transactions"> | boolean
    notes?: StringFilter<"Transactions"> | string
    data?: JsonFilter<"Transactions">
  }

  export type UserCreateWithoutProfileInput = {
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameCreateNestedManyWithoutUserInput
    membership?: MembershipCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameUncheckedCreateNestedManyWithoutUserInput
    membership?: MembershipUncheckedCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderUncheckedCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUpdateManyWithoutUserNestedInput
    membership?: MembershipUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUncheckedUpdateManyWithoutUserNestedInput
    membership?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUncheckedUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserRoleCreateWithoutRoleInput = {
    user: UserCreateNestedOneWithoutUserRoleInput
  }

  export type UserRoleUncheckedCreateWithoutRoleInput = {
    userId: number
  }

  export type UserRoleCreateOrConnectWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleCreateManyRoleInputEnvelope = {
    data: UserRoleCreateManyRoleInput | UserRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutRoleInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserRoleScalarWhereInput = {
    AND?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    OR?: UserRoleScalarWhereInput[]
    NOT?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    roleId?: IntFilter<"UserRole"> | number
    userId?: IntFilter<"UserRole"> | number
  }

  export type GameCreateWithoutRoomInput = {
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    shortName?: string | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    full?: boolean | null
    user?: UserCreateNestedOneWithoutGameInput
    slot?: SlotCreateNestedOneWithoutGameInput
    gameAssignment?: GameAssignmentCreateNestedManyWithoutGameInput
    gameChoice?: GameChoiceCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutRoomInput = {
    id?: number
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    shortName?: string | null
    slotId?: number | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    authorId?: number | null
    full?: boolean | null
    gameAssignment?: GameAssignmentUncheckedCreateNestedManyWithoutGameInput
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutRoomInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutRoomInput, GameUncheckedCreateWithoutRoomInput>
  }

  export type GameCreateManyRoomInputEnvelope = {
    data: GameCreateManyRoomInput | GameCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutRoomInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutRoomInput, GameUncheckedUpdateWithoutRoomInput>
    create: XOR<GameCreateWithoutRoomInput, GameUncheckedCreateWithoutRoomInput>
  }

  export type GameUpdateWithWhereUniqueWithoutRoomInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutRoomInput, GameUncheckedUpdateWithoutRoomInput>
  }

  export type GameUpdateManyWithWhereWithoutRoomInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutRoomInput>
  }

  export type GameScalarWhereInput = {
    AND?: GameScalarWhereInput | GameScalarWhereInput[]
    OR?: GameScalarWhereInput[]
    NOT?: GameScalarWhereInput | GameScalarWhereInput[]
    id?: IntFilter<"Game"> | number
    description?: StringFilter<"Game"> | string
    lateFinish?: BoolNullableFilter<"Game"> | boolean | null
    lateStart?: StringNullableFilter<"Game"> | string | null
    name?: StringFilter<"Game"> | string
    playerMax?: IntFilter<"Game"> | number
    playerMin?: IntFilter<"Game"> | number
    roomId?: IntNullableFilter<"Game"> | number | null
    shortName?: StringNullableFilter<"Game"> | string | null
    slotId?: IntNullableFilter<"Game"> | number | null
    charInstructions?: StringFilter<"Game"> | string
    estimatedLength?: StringFilter<"Game"> | string
    gameContactEmail?: StringFilter<"Game"> | string
    genre?: StringFilter<"Game"> | string
    gmNames?: StringNullableFilter<"Game"> | string | null
    message?: StringFilter<"Game"> | string
    playerPreference?: StringFilter<"Game"> | string
    playersContactGm?: BoolFilter<"Game"> | boolean
    returningPlayers?: StringFilter<"Game"> | string
    setting?: StringFilter<"Game"> | string
    slotConflicts?: StringFilter<"Game"> | string
    slotPreference?: IntFilter<"Game"> | number
    teenFriendly?: BoolFilter<"Game"> | boolean
    type?: StringFilter<"Game"> | string
    year?: IntFilter<"Game"> | number
    authorId?: IntNullableFilter<"Game"> | number | null
    full?: BoolNullableFilter<"Game"> | boolean | null
  }

  export type UserCreateWithoutShirtOrderInput = {
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameCreateNestedManyWithoutUserInput
    membership?: MembershipCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutShirtOrderInput = {
    id?: number
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameUncheckedCreateNestedManyWithoutUserInput
    membership?: MembershipUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShirtOrderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShirtOrderInput, UserUncheckedCreateWithoutShirtOrderInput>
  }

  export type ShirtOrderItemCreateWithoutShirtOrderInput = {
    quantity: number
    size: string
    style: string
    itemsIdx?: number | null
  }

  export type ShirtOrderItemUncheckedCreateWithoutShirtOrderInput = {
    id?: number
    quantity: number
    size: string
    style: string
    itemsIdx?: number | null
  }

  export type ShirtOrderItemCreateOrConnectWithoutShirtOrderInput = {
    where: ShirtOrderItemWhereUniqueInput
    create: XOR<ShirtOrderItemCreateWithoutShirtOrderInput, ShirtOrderItemUncheckedCreateWithoutShirtOrderInput>
  }

  export type ShirtOrderItemCreateManyShirtOrderInputEnvelope = {
    data: ShirtOrderItemCreateManyShirtOrderInput | ShirtOrderItemCreateManyShirtOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutShirtOrderInput = {
    update: XOR<UserUpdateWithoutShirtOrderInput, UserUncheckedUpdateWithoutShirtOrderInput>
    create: XOR<UserCreateWithoutShirtOrderInput, UserUncheckedCreateWithoutShirtOrderInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShirtOrderInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShirtOrderInput, UserUncheckedUpdateWithoutShirtOrderInput>
  }

  export type UserUpdateWithoutShirtOrderInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUpdateManyWithoutUserNestedInput
    membership?: MembershipUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutShirtOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUncheckedUpdateManyWithoutUserNestedInput
    membership?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ShirtOrderItemUpsertWithWhereUniqueWithoutShirtOrderInput = {
    where: ShirtOrderItemWhereUniqueInput
    update: XOR<ShirtOrderItemUpdateWithoutShirtOrderInput, ShirtOrderItemUncheckedUpdateWithoutShirtOrderInput>
    create: XOR<ShirtOrderItemCreateWithoutShirtOrderInput, ShirtOrderItemUncheckedCreateWithoutShirtOrderInput>
  }

  export type ShirtOrderItemUpdateWithWhereUniqueWithoutShirtOrderInput = {
    where: ShirtOrderItemWhereUniqueInput
    data: XOR<ShirtOrderItemUpdateWithoutShirtOrderInput, ShirtOrderItemUncheckedUpdateWithoutShirtOrderInput>
  }

  export type ShirtOrderItemUpdateManyWithWhereWithoutShirtOrderInput = {
    where: ShirtOrderItemScalarWhereInput
    data: XOR<ShirtOrderItemUpdateManyMutationInput, ShirtOrderItemUncheckedUpdateManyWithoutShirtOrderInput>
  }

  export type ShirtOrderItemScalarWhereInput = {
    AND?: ShirtOrderItemScalarWhereInput | ShirtOrderItemScalarWhereInput[]
    OR?: ShirtOrderItemScalarWhereInput[]
    NOT?: ShirtOrderItemScalarWhereInput | ShirtOrderItemScalarWhereInput[]
    id?: IntFilter<"ShirtOrderItem"> | number
    orderId?: IntFilter<"ShirtOrderItem"> | number
    quantity?: IntFilter<"ShirtOrderItem"> | number
    size?: StringFilter<"ShirtOrderItem"> | string
    style?: StringFilter<"ShirtOrderItem"> | string
    itemsIdx?: IntNullableFilter<"ShirtOrderItem"> | number | null
  }

  export type ShirtOrderCreateWithoutShirtOrderItemInput = {
    deliveryMethod: string
    message: string
    year: number
    user: UserCreateNestedOneWithoutShirtOrderInput
  }

  export type ShirtOrderUncheckedCreateWithoutShirtOrderItemInput = {
    id?: number
    deliveryMethod: string
    message: string
    userId: number
    year: number
  }

  export type ShirtOrderCreateOrConnectWithoutShirtOrderItemInput = {
    where: ShirtOrderWhereUniqueInput
    create: XOR<ShirtOrderCreateWithoutShirtOrderItemInput, ShirtOrderUncheckedCreateWithoutShirtOrderItemInput>
  }

  export type ShirtOrderUpsertWithoutShirtOrderItemInput = {
    update: XOR<ShirtOrderUpdateWithoutShirtOrderItemInput, ShirtOrderUncheckedUpdateWithoutShirtOrderItemInput>
    create: XOR<ShirtOrderCreateWithoutShirtOrderItemInput, ShirtOrderUncheckedCreateWithoutShirtOrderItemInput>
    where?: ShirtOrderWhereInput
  }

  export type ShirtOrderUpdateToOneWithWhereWithoutShirtOrderItemInput = {
    where?: ShirtOrderWhereInput
    data: XOR<ShirtOrderUpdateWithoutShirtOrderItemInput, ShirtOrderUncheckedUpdateWithoutShirtOrderItemInput>
  }

  export type ShirtOrderUpdateWithoutShirtOrderItemInput = {
    deliveryMethod?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutShirtOrderNestedInput
  }

  export type ShirtOrderUncheckedUpdateWithoutShirtOrderItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryMethod?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameCreateWithoutSlotInput = {
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    shortName?: string | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    full?: boolean | null
    user?: UserCreateNestedOneWithoutGameInput
    room?: RoomCreateNestedOneWithoutGameInput
    gameAssignment?: GameAssignmentCreateNestedManyWithoutGameInput
    gameChoice?: GameChoiceCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutSlotInput = {
    id?: number
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    roomId?: number | null
    shortName?: string | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    authorId?: number | null
    full?: boolean | null
    gameAssignment?: GameAssignmentUncheckedCreateNestedManyWithoutGameInput
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutSlotInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutSlotInput, GameUncheckedCreateWithoutSlotInput>
  }

  export type GameCreateManySlotInputEnvelope = {
    data: GameCreateManySlotInput | GameCreateManySlotInput[]
    skipDuplicates?: boolean
  }

  export type GameChoiceCreateWithoutSlotInput = {
    rank: number
    year: number
    returningPlayer: boolean
    game?: GameCreateNestedOneWithoutGameChoiceInput
    membership: MembershipCreateNestedOneWithoutGameChoiceInput
  }

  export type GameChoiceUncheckedCreateWithoutSlotInput = {
    id?: number
    gameId?: number | null
    memberId: number
    rank: number
    year: number
    returningPlayer: boolean
  }

  export type GameChoiceCreateOrConnectWithoutSlotInput = {
    where: GameChoiceWhereUniqueInput
    create: XOR<GameChoiceCreateWithoutSlotInput, GameChoiceUncheckedCreateWithoutSlotInput>
  }

  export type GameChoiceCreateManySlotInputEnvelope = {
    data: GameChoiceCreateManySlotInput | GameChoiceCreateManySlotInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutSlotInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutSlotInput, GameUncheckedUpdateWithoutSlotInput>
    create: XOR<GameCreateWithoutSlotInput, GameUncheckedCreateWithoutSlotInput>
  }

  export type GameUpdateWithWhereUniqueWithoutSlotInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutSlotInput, GameUncheckedUpdateWithoutSlotInput>
  }

  export type GameUpdateManyWithWhereWithoutSlotInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutSlotInput>
  }

  export type GameChoiceUpsertWithWhereUniqueWithoutSlotInput = {
    where: GameChoiceWhereUniqueInput
    update: XOR<GameChoiceUpdateWithoutSlotInput, GameChoiceUncheckedUpdateWithoutSlotInput>
    create: XOR<GameChoiceCreateWithoutSlotInput, GameChoiceUncheckedCreateWithoutSlotInput>
  }

  export type GameChoiceUpdateWithWhereUniqueWithoutSlotInput = {
    where: GameChoiceWhereUniqueInput
    data: XOR<GameChoiceUpdateWithoutSlotInput, GameChoiceUncheckedUpdateWithoutSlotInput>
  }

  export type GameChoiceUpdateManyWithWhereWithoutSlotInput = {
    where: GameChoiceScalarWhereInput
    data: XOR<GameChoiceUpdateManyMutationInput, GameChoiceUncheckedUpdateManyWithoutSlotInput>
  }

  export type MembershipCreateWithoutTransactionsInput = {
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentCreateNestedManyWithoutMembershipInput
    gameChoice?: GameChoiceCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionCreateNestedManyWithoutMembershipInput
    hotelRoom: HotelRoomCreateNestedOneWithoutMembershipInput
    user: UserCreateNestedOneWithoutMembershipInput
  }

  export type MembershipUncheckedCreateWithoutTransactionsInput = {
    id?: number
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    hotelRoomId: number
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    userId: number
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentUncheckedCreateNestedManyWithoutMembershipInput
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionUncheckedCreateNestedManyWithoutMembershipInput
  }

  export type MembershipCreateOrConnectWithoutTransactionsInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutTransactionsInput, MembershipUncheckedCreateWithoutTransactionsInput>
  }

  export type UserCreateWithoutTransactionsTransactionsOriginTouserInput = {
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameCreateNestedManyWithoutUserInput
    membership?: MembershipCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderCreateNestedManyWithoutUserInput
    transactionsTransactionsUserIdTouser?: TransactionsCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionsTransactionsOriginTouserInput = {
    id?: number
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameUncheckedCreateNestedManyWithoutUserInput
    membership?: MembershipUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderUncheckedCreateNestedManyWithoutUserInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsUserIdTouserInput
    userRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsTransactionsOriginTouserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsTransactionsOriginTouserInput, UserUncheckedCreateWithoutTransactionsTransactionsOriginTouserInput>
  }

  export type UserCreateWithoutTransactionsTransactionsUserIdTouserInput = {
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameCreateNestedManyWithoutUserInput
    membership?: MembershipCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsCreateNestedManyWithoutUserTransactionsOriginTouserInput
    userRole?: UserRoleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionsTransactionsUserIdTouserInput = {
    id?: number
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameUncheckedCreateNestedManyWithoutUserInput
    membership?: MembershipUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderUncheckedCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsOriginTouserInput
    userRole?: UserRoleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsTransactionsUserIdTouserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsTransactionsUserIdTouserInput, UserUncheckedCreateWithoutTransactionsTransactionsUserIdTouserInput>
  }

  export type MembershipUpsertWithoutTransactionsInput = {
    update: XOR<MembershipUpdateWithoutTransactionsInput, MembershipUncheckedUpdateWithoutTransactionsInput>
    create: XOR<MembershipCreateWithoutTransactionsInput, MembershipUncheckedCreateWithoutTransactionsInput>
    where?: MembershipWhereInput
  }

  export type MembershipUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: MembershipWhereInput
    data: XOR<MembershipUpdateWithoutTransactionsInput, MembershipUncheckedUpdateWithoutTransactionsInput>
  }

  export type MembershipUpdateWithoutTransactionsInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUpdateManyWithoutMembershipNestedInput
    gameChoice?: GameChoiceUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUpdateManyWithoutMembershipNestedInput
    hotelRoom?: HotelRoomUpdateOneRequiredWithoutMembershipNestedInput
    user?: UserUpdateOneRequiredWithoutMembershipNestedInput
  }

  export type MembershipUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hotelRoomId?: IntFieldUpdateOperationsInput | number
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUncheckedUpdateManyWithoutMembershipNestedInput
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUncheckedUpdateManyWithoutMembershipNestedInput
  }

  export type UserUpsertWithoutTransactionsTransactionsOriginTouserInput = {
    update: XOR<UserUpdateWithoutTransactionsTransactionsOriginTouserInput, UserUncheckedUpdateWithoutTransactionsTransactionsOriginTouserInput>
    create: XOR<UserCreateWithoutTransactionsTransactionsOriginTouserInput, UserUncheckedCreateWithoutTransactionsTransactionsOriginTouserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsTransactionsOriginTouserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsTransactionsOriginTouserInput, UserUncheckedUpdateWithoutTransactionsTransactionsOriginTouserInput>
  }

  export type UserUpdateWithoutTransactionsTransactionsOriginTouserInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUpdateManyWithoutUserNestedInput
    membership?: MembershipUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUpdateManyWithoutUserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsTransactionsOriginTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUncheckedUpdateManyWithoutUserNestedInput
    membership?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUncheckedUpdateManyWithoutUserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
    userRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutTransactionsTransactionsUserIdTouserInput = {
    update: XOR<UserUpdateWithoutTransactionsTransactionsUserIdTouserInput, UserUncheckedUpdateWithoutTransactionsTransactionsUserIdTouserInput>
    create: XOR<UserCreateWithoutTransactionsTransactionsUserIdTouserInput, UserUncheckedCreateWithoutTransactionsTransactionsUserIdTouserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsTransactionsUserIdTouserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsTransactionsUserIdTouserInput, UserUncheckedUpdateWithoutTransactionsTransactionsUserIdTouserInput>
  }

  export type UserUpdateWithoutTransactionsTransactionsUserIdTouserInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUpdateManyWithoutUserNestedInput
    membership?: MembershipUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    userRole?: UserRoleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsTransactionsUserIdTouserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUncheckedUpdateManyWithoutUserNestedInput
    membership?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUncheckedUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    userRole?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameCreateWithoutUserInput = {
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    shortName?: string | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    full?: boolean | null
    room?: RoomCreateNestedOneWithoutGameInput
    slot?: SlotCreateNestedOneWithoutGameInput
    gameAssignment?: GameAssignmentCreateNestedManyWithoutGameInput
    gameChoice?: GameChoiceCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutUserInput = {
    id?: number
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    roomId?: number | null
    shortName?: string | null
    slotId?: number | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    full?: boolean | null
    gameAssignment?: GameAssignmentUncheckedCreateNestedManyWithoutGameInput
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutUserInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
  }

  export type GameCreateManyUserInputEnvelope = {
    data: GameCreateManyUserInput | GameCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MembershipCreateWithoutUserInput = {
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentCreateNestedManyWithoutMembershipInput
    gameChoice?: GameChoiceCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionCreateNestedManyWithoutMembershipInput
    hotelRoom: HotelRoomCreateNestedOneWithoutMembershipInput
    transactions?: TransactionsCreateNestedManyWithoutMembershipInput
  }

  export type MembershipUncheckedCreateWithoutUserInput = {
    id?: number
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    hotelRoomId: number
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
    gameAssignment?: GameAssignmentUncheckedCreateNestedManyWithoutMembershipInput
    gameChoice?: GameChoiceUncheckedCreateNestedManyWithoutMembershipInput
    gameSubmission?: GameSubmissionUncheckedCreateNestedManyWithoutMembershipInput
    transactions?: TransactionsUncheckedCreateNestedManyWithoutMembershipInput
  }

  export type MembershipCreateOrConnectWithoutUserInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutUserInput, MembershipUncheckedCreateWithoutUserInput>
  }

  export type MembershipCreateManyUserInputEnvelope = {
    data: MembershipCreateManyUserInput | MembershipCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUserInput = {
    snailMailAddress?: string | null
    phoneNumber?: string | null
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: number
    snailMailAddress?: string | null
    phoneNumber?: string | null
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileCreateManyUserInputEnvelope = {
    data: ProfileCreateManyUserInput | ProfileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ShirtOrderCreateWithoutUserInput = {
    deliveryMethod: string
    message: string
    year: number
    shirtOrderItem?: ShirtOrderItemCreateNestedManyWithoutShirtOrderInput
  }

  export type ShirtOrderUncheckedCreateWithoutUserInput = {
    id?: number
    deliveryMethod: string
    message: string
    year: number
    shirtOrderItem?: ShirtOrderItemUncheckedCreateNestedManyWithoutShirtOrderInput
  }

  export type ShirtOrderCreateOrConnectWithoutUserInput = {
    where: ShirtOrderWhereUniqueInput
    create: XOR<ShirtOrderCreateWithoutUserInput, ShirtOrderUncheckedCreateWithoutUserInput>
  }

  export type ShirtOrderCreateManyUserInputEnvelope = {
    data: ShirtOrderCreateManyUserInput | ShirtOrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TransactionsCreateWithoutUserTransactionsOriginTouserInput = {
    id?: bigint | number
    year: number
    timestamp?: Date | string
    amount: number
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
    membership?: MembershipCreateNestedOneWithoutTransactionsInput
    userTransactionsUserIdTouser: UserCreateNestedOneWithoutTransactionsTransactionsUserIdTouserInput
  }

  export type TransactionsUncheckedCreateWithoutUserTransactionsOriginTouserInput = {
    id?: bigint | number
    userId: number
    memberId?: number | null
    year: number
    timestamp?: Date | string
    amount: number
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsCreateOrConnectWithoutUserTransactionsOriginTouserInput = {
    where: TransactionsWhereUniqueInput
    create: XOR<TransactionsCreateWithoutUserTransactionsOriginTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsOriginTouserInput>
  }

  export type TransactionsCreateManyUserTransactionsOriginTouserInputEnvelope = {
    data: TransactionsCreateManyUserTransactionsOriginTouserInput | TransactionsCreateManyUserTransactionsOriginTouserInput[]
    skipDuplicates?: boolean
  }

  export type TransactionsCreateWithoutUserTransactionsUserIdTouserInput = {
    id?: bigint | number
    year: number
    timestamp?: Date | string
    amount: number
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
    membership?: MembershipCreateNestedOneWithoutTransactionsInput
    userTransactionsOriginTouser?: UserCreateNestedOneWithoutTransactionsTransactionsOriginTouserInput
  }

  export type TransactionsUncheckedCreateWithoutUserTransactionsUserIdTouserInput = {
    id?: bigint | number
    memberId?: number | null
    year: number
    timestamp?: Date | string
    amount: number
    origin?: number | null
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsCreateOrConnectWithoutUserTransactionsUserIdTouserInput = {
    where: TransactionsWhereUniqueInput
    create: XOR<TransactionsCreateWithoutUserTransactionsUserIdTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsUserIdTouserInput>
  }

  export type TransactionsCreateManyUserTransactionsUserIdTouserInputEnvelope = {
    data: TransactionsCreateManyUserTransactionsUserIdTouserInput | TransactionsCreateManyUserTransactionsUserIdTouserInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleCreateWithoutUserInput = {
    role: RoleCreateNestedOneWithoutUserRoleInput
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    roleId: number
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleCreateManyUserInputEnvelope = {
    data: UserRoleCreateManyUserInput | UserRoleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutUserInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutUserInput, GameUncheckedUpdateWithoutUserInput>
    create: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
  }

  export type GameUpdateWithWhereUniqueWithoutUserInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutUserInput, GameUncheckedUpdateWithoutUserInput>
  }

  export type GameUpdateManyWithWhereWithoutUserInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutUserInput>
  }

  export type MembershipUpsertWithWhereUniqueWithoutUserInput = {
    where: MembershipWhereUniqueInput
    update: XOR<MembershipUpdateWithoutUserInput, MembershipUncheckedUpdateWithoutUserInput>
    create: XOR<MembershipCreateWithoutUserInput, MembershipUncheckedCreateWithoutUserInput>
  }

  export type MembershipUpdateWithWhereUniqueWithoutUserInput = {
    where: MembershipWhereUniqueInput
    data: XOR<MembershipUpdateWithoutUserInput, MembershipUncheckedUpdateWithoutUserInput>
  }

  export type MembershipUpdateManyWithWhereWithoutUserInput = {
    where: MembershipScalarWhereInput
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyWithoutUserInput>
  }

  export type ProfileUpsertWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateManyWithWhereWithoutUserInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutUserInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    OR?: ProfileScalarWhereInput[]
    NOT?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    id?: IntFilter<"Profile"> | number
    userId?: IntFilter<"Profile"> | number
    snailMailAddress?: StringNullableFilter<"Profile"> | string | null
    phoneNumber?: StringNullableFilter<"Profile"> | string | null
  }

  export type ShirtOrderUpsertWithWhereUniqueWithoutUserInput = {
    where: ShirtOrderWhereUniqueInput
    update: XOR<ShirtOrderUpdateWithoutUserInput, ShirtOrderUncheckedUpdateWithoutUserInput>
    create: XOR<ShirtOrderCreateWithoutUserInput, ShirtOrderUncheckedCreateWithoutUserInput>
  }

  export type ShirtOrderUpdateWithWhereUniqueWithoutUserInput = {
    where: ShirtOrderWhereUniqueInput
    data: XOR<ShirtOrderUpdateWithoutUserInput, ShirtOrderUncheckedUpdateWithoutUserInput>
  }

  export type ShirtOrderUpdateManyWithWhereWithoutUserInput = {
    where: ShirtOrderScalarWhereInput
    data: XOR<ShirtOrderUpdateManyMutationInput, ShirtOrderUncheckedUpdateManyWithoutUserInput>
  }

  export type ShirtOrderScalarWhereInput = {
    AND?: ShirtOrderScalarWhereInput | ShirtOrderScalarWhereInput[]
    OR?: ShirtOrderScalarWhereInput[]
    NOT?: ShirtOrderScalarWhereInput | ShirtOrderScalarWhereInput[]
    id?: IntFilter<"ShirtOrder"> | number
    deliveryMethod?: StringFilter<"ShirtOrder"> | string
    message?: StringFilter<"ShirtOrder"> | string
    userId?: IntFilter<"ShirtOrder"> | number
    year?: IntFilter<"ShirtOrder"> | number
  }

  export type TransactionsUpsertWithWhereUniqueWithoutUserTransactionsOriginTouserInput = {
    where: TransactionsWhereUniqueInput
    update: XOR<TransactionsUpdateWithoutUserTransactionsOriginTouserInput, TransactionsUncheckedUpdateWithoutUserTransactionsOriginTouserInput>
    create: XOR<TransactionsCreateWithoutUserTransactionsOriginTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsOriginTouserInput>
  }

  export type TransactionsUpdateWithWhereUniqueWithoutUserTransactionsOriginTouserInput = {
    where: TransactionsWhereUniqueInput
    data: XOR<TransactionsUpdateWithoutUserTransactionsOriginTouserInput, TransactionsUncheckedUpdateWithoutUserTransactionsOriginTouserInput>
  }

  export type TransactionsUpdateManyWithWhereWithoutUserTransactionsOriginTouserInput = {
    where: TransactionsScalarWhereInput
    data: XOR<TransactionsUpdateManyMutationInput, TransactionsUncheckedUpdateManyWithoutUserTransactionsOriginTouserInput>
  }

  export type TransactionsUpsertWithWhereUniqueWithoutUserTransactionsUserIdTouserInput = {
    where: TransactionsWhereUniqueInput
    update: XOR<TransactionsUpdateWithoutUserTransactionsUserIdTouserInput, TransactionsUncheckedUpdateWithoutUserTransactionsUserIdTouserInput>
    create: XOR<TransactionsCreateWithoutUserTransactionsUserIdTouserInput, TransactionsUncheckedCreateWithoutUserTransactionsUserIdTouserInput>
  }

  export type TransactionsUpdateWithWhereUniqueWithoutUserTransactionsUserIdTouserInput = {
    where: TransactionsWhereUniqueInput
    data: XOR<TransactionsUpdateWithoutUserTransactionsUserIdTouserInput, TransactionsUncheckedUpdateWithoutUserTransactionsUserIdTouserInput>
  }

  export type TransactionsUpdateManyWithWhereWithoutUserTransactionsUserIdTouserInput = {
    where: TransactionsScalarWhereInput
    data: XOR<TransactionsUpdateManyMutationInput, TransactionsUncheckedUpdateManyWithoutUserTransactionsUserIdTouserInput>
  }

  export type UserRoleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutUserInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutUserInput>
  }

  export type RoleCreateWithoutUserRoleInput = {
    authority: string
  }

  export type RoleUncheckedCreateWithoutUserRoleInput = {
    id?: number
    authority: string
  }

  export type RoleCreateOrConnectWithoutUserRoleInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUserRoleInput, RoleUncheckedCreateWithoutUserRoleInput>
  }

  export type UserCreateWithoutUserRoleInput = {
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameCreateNestedManyWithoutUserInput
    membership?: MembershipCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsCreateNestedManyWithoutUserTransactionsUserIdTouserInput
  }

  export type UserUncheckedCreateWithoutUserRoleInput = {
    id?: number
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    displayName?: string | null
    balance?: number
    game?: GameUncheckedCreateNestedManyWithoutUserInput
    membership?: MembershipUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedManyWithoutUserInput
    shirtOrder?: ShirtOrderUncheckedCreateNestedManyWithoutUserInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsOriginTouserInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedCreateNestedManyWithoutUserTransactionsUserIdTouserInput
  }

  export type UserCreateOrConnectWithoutUserRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput>
  }

  export type RoleUpsertWithoutUserRoleInput = {
    update: XOR<RoleUpdateWithoutUserRoleInput, RoleUncheckedUpdateWithoutUserRoleInput>
    create: XOR<RoleCreateWithoutUserRoleInput, RoleUncheckedCreateWithoutUserRoleInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUserRoleInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUserRoleInput, RoleUncheckedUpdateWithoutUserRoleInput>
  }

  export type RoleUpdateWithoutUserRoleInput = {
    authority?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUserRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    authority?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutUserRoleInput = {
    update: XOR<UserUpdateWithoutUserRoleInput, UserUncheckedUpdateWithoutUserRoleInput>
    create: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserRoleInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserRoleInput, UserUncheckedUpdateWithoutUserRoleInput>
  }

  export type UserUpdateWithoutUserRoleInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUpdateManyWithoutUserNestedInput
    membership?: MembershipUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: FloatFieldUpdateOperationsInput | number
    game?: GameUncheckedUpdateManyWithoutUserNestedInput
    membership?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    shirtOrder?: ShirtOrderUncheckedUpdateManyWithoutUserNestedInput
    transactionsTransactionsOriginTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsOriginTouserNestedInput
    transactionsTransactionsUserIdTouser?: TransactionsUncheckedUpdateManyWithoutUserTransactionsUserIdTouserNestedInput
  }

  export type GameAssignmentCreateManyGameInput = {
    memberId: number
    gm: number
    year: number
  }

  export type GameChoiceCreateManyGameInput = {
    id?: number
    memberId: number
    rank: number
    slotId: number
    year: number
    returningPlayer: boolean
  }

  export type GameAssignmentUpdateWithoutGameInput = {
    gm?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    membership?: MembershipUpdateOneRequiredWithoutGameAssignmentNestedInput
  }

  export type GameAssignmentUncheckedUpdateWithoutGameInput = {
    memberId?: IntFieldUpdateOperationsInput | number
    gm?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameAssignmentUncheckedUpdateManyWithoutGameInput = {
    memberId?: IntFieldUpdateOperationsInput | number
    gm?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameChoiceUpdateWithoutGameInput = {
    rank?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
    membership?: MembershipUpdateOneRequiredWithoutGameChoiceNestedInput
    slot?: SlotUpdateOneRequiredWithoutGameChoiceNestedInput
  }

  export type GameChoiceUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    slotId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameChoiceUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    slotId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MembershipCreateManyHotelRoomInput = {
    id?: number
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    userId: number
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
  }

  export type MembershipUpdateWithoutHotelRoomInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUpdateManyWithoutMembershipNestedInput
    gameChoice?: GameChoiceUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUpdateManyWithoutMembershipNestedInput
    user?: UserUpdateOneRequiredWithoutMembershipNestedInput
    transactions?: TransactionsUpdateManyWithoutMembershipNestedInput
  }

  export type MembershipUncheckedUpdateWithoutHotelRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUncheckedUpdateManyWithoutMembershipNestedInput
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUncheckedUpdateManyWithoutMembershipNestedInput
    transactions?: TransactionsUncheckedUpdateManyWithoutMembershipNestedInput
  }

  export type MembershipUncheckedUpdateManyWithoutHotelRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LookupValueCreateManyLookupInput = {
    id?: number
    code: string
    numericSequencer: number
    sequencer: number
    stringSequencer: string
    value: string
  }

  export type LookupValueUpdateWithoutLookupInput = {
    code?: StringFieldUpdateOperationsInput | string
    numericSequencer?: FloatFieldUpdateOperationsInput | number
    sequencer?: IntFieldUpdateOperationsInput | number
    stringSequencer?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type LookupValueUncheckedUpdateWithoutLookupInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    numericSequencer?: FloatFieldUpdateOperationsInput | number
    sequencer?: IntFieldUpdateOperationsInput | number
    stringSequencer?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type LookupValueUncheckedUpdateManyWithoutLookupInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    numericSequencer?: FloatFieldUpdateOperationsInput | number
    sequencer?: IntFieldUpdateOperationsInput | number
    stringSequencer?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type GameAssignmentCreateManyMembershipInput = {
    gameId: number
    gm: number
    year: number
  }

  export type GameChoiceCreateManyMembershipInput = {
    id?: number
    gameId?: number | null
    rank: number
    slotId: number
    year: number
    returningPlayer: boolean
  }

  export type GameSubmissionCreateManyMembershipInput = {
    id?: number
    message: string
    year: number
  }

  export type TransactionsCreateManyMembershipInput = {
    id?: bigint | number
    userId: number
    year: number
    timestamp?: Date | string
    amount: number
    origin?: number | null
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type GameAssignmentUpdateWithoutMembershipInput = {
    gm?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    game?: GameUpdateOneRequiredWithoutGameAssignmentNestedInput
  }

  export type GameAssignmentUncheckedUpdateWithoutMembershipInput = {
    gameId?: IntFieldUpdateOperationsInput | number
    gm?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameAssignmentUncheckedUpdateManyWithoutMembershipInput = {
    gameId?: IntFieldUpdateOperationsInput | number
    gm?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameChoiceUpdateWithoutMembershipInput = {
    rank?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
    game?: GameUpdateOneWithoutGameChoiceNestedInput
    slot?: SlotUpdateOneRequiredWithoutGameChoiceNestedInput
  }

  export type GameChoiceUncheckedUpdateWithoutMembershipInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
    rank?: IntFieldUpdateOperationsInput | number
    slotId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameChoiceUncheckedUpdateManyWithoutMembershipInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
    rank?: IntFieldUpdateOperationsInput | number
    slotId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameSubmissionUpdateWithoutMembershipInput = {
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameSubmissionUncheckedUpdateWithoutMembershipInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
  }

  export type GameSubmissionUncheckedUpdateManyWithoutMembershipInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionsUpdateWithoutMembershipInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    userTransactionsOriginTouser?: UserUpdateOneWithoutTransactionsTransactionsOriginTouserNestedInput
    userTransactionsUserIdTouser?: UserUpdateOneRequiredWithoutTransactionsTransactionsUserIdTouserNestedInput
  }

  export type TransactionsUncheckedUpdateWithoutMembershipInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    origin?: NullableIntFieldUpdateOperationsInput | number | null
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsUncheckedUpdateManyWithoutMembershipInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    origin?: NullableIntFieldUpdateOperationsInput | number | null
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type UserRoleCreateManyRoleInput = {
    userId: number
  }

  export type UserRoleUpdateWithoutRoleInput = {
    user?: UserUpdateOneRequiredWithoutUserRoleNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutRoleInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type GameCreateManyRoomInput = {
    id?: number
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    shortName?: string | null
    slotId?: number | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    authorId?: number | null
    full?: boolean | null
  }

  export type GameUpdateWithoutRoomInput = {
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneWithoutGameNestedInput
    slot?: SlotUpdateOneWithoutGameNestedInput
    gameAssignment?: GameAssignmentUpdateManyWithoutGameNestedInput
    gameChoice?: GameChoiceUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slotId?: NullableIntFieldUpdateOperationsInput | number | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameAssignment?: GameAssignmentUncheckedUpdateManyWithoutGameNestedInput
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slotId?: NullableIntFieldUpdateOperationsInput | number | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ShirtOrderItemCreateManyShirtOrderInput = {
    id?: number
    quantity: number
    size: string
    style: string
    itemsIdx?: number | null
  }

  export type ShirtOrderItemUpdateWithoutShirtOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    size?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    itemsIdx?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShirtOrderItemUncheckedUpdateWithoutShirtOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    size?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    itemsIdx?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShirtOrderItemUncheckedUpdateManyWithoutShirtOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    size?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    itemsIdx?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GameCreateManySlotInput = {
    id?: number
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    roomId?: number | null
    shortName?: string | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    authorId?: number | null
    full?: boolean | null
  }

  export type GameChoiceCreateManySlotInput = {
    id?: number
    gameId?: number | null
    memberId: number
    rank: number
    year: number
    returningPlayer: boolean
  }

  export type GameUpdateWithoutSlotInput = {
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneWithoutGameNestedInput
    room?: RoomUpdateOneWithoutGameNestedInput
    gameAssignment?: GameAssignmentUpdateManyWithoutGameNestedInput
    gameChoice?: GameChoiceUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutSlotInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    roomId?: NullableIntFieldUpdateOperationsInput | number | null
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameAssignment?: GameAssignmentUncheckedUpdateManyWithoutGameNestedInput
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutSlotInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    roomId?: NullableIntFieldUpdateOperationsInput | number | null
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type GameChoiceUpdateWithoutSlotInput = {
    rank?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
    game?: GameUpdateOneWithoutGameChoiceNestedInput
    membership?: MembershipUpdateOneRequiredWithoutGameChoiceNestedInput
  }

  export type GameChoiceUncheckedUpdateWithoutSlotInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
    memberId?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameChoiceUncheckedUpdateManyWithoutSlotInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
    memberId?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    returningPlayer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameCreateManyUserInput = {
    id?: number
    description: string
    lateFinish?: boolean | null
    lateStart?: string | null
    name: string
    playerMax: number
    playerMin: number
    roomId?: number | null
    shortName?: string | null
    slotId?: number | null
    charInstructions: string
    estimatedLength: string
    gameContactEmail: string
    genre: string
    gmNames?: string | null
    message: string
    playerPreference: string
    playersContactGm: boolean
    returningPlayers: string
    setting: string
    slotConflicts: string
    slotPreference: number
    teenFriendly: boolean
    type: string
    year: number
    full?: boolean | null
  }

  export type MembershipCreateManyUserInput = {
    id?: number
    arrivalDate: Date | string
    attendance: string
    attending: boolean
    departureDate: Date | string
    hotelRoomId: number
    interestLevel: string
    message: string
    roomPreferenceAndNotes: string
    roomingPreferences: string
    roomingWith: string
    volunteer: boolean
    year: number
    offerSubsidy: boolean
    requestOldPrice: boolean
    slotsAttending?: string | null
  }

  export type ProfileCreateManyUserInput = {
    id?: number
    snailMailAddress?: string | null
    phoneNumber?: string | null
  }

  export type ShirtOrderCreateManyUserInput = {
    id?: number
    deliveryMethod: string
    message: string
    year: number
  }

  export type TransactionsCreateManyUserTransactionsOriginTouserInput = {
    id?: bigint | number
    userId: number
    memberId?: number | null
    year: number
    timestamp?: Date | string
    amount: number
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsCreateManyUserTransactionsUserIdTouserInput = {
    id?: bigint | number
    memberId?: number | null
    year: number
    timestamp?: Date | string
    amount: number
    origin?: number | null
    stripe?: boolean
    notes?: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type UserRoleCreateManyUserInput = {
    roleId: number
  }

  export type GameUpdateWithoutUserInput = {
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    room?: RoomUpdateOneWithoutGameNestedInput
    slot?: SlotUpdateOneWithoutGameNestedInput
    gameAssignment?: GameAssignmentUpdateManyWithoutGameNestedInput
    gameChoice?: GameChoiceUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    roomId?: NullableIntFieldUpdateOperationsInput | number | null
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slotId?: NullableIntFieldUpdateOperationsInput | number | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
    gameAssignment?: GameAssignmentUncheckedUpdateManyWithoutGameNestedInput
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    lateFinish?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lateStart?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    playerMax?: IntFieldUpdateOperationsInput | number
    playerMin?: IntFieldUpdateOperationsInput | number
    roomId?: NullableIntFieldUpdateOperationsInput | number | null
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slotId?: NullableIntFieldUpdateOperationsInput | number | null
    charInstructions?: StringFieldUpdateOperationsInput | string
    estimatedLength?: StringFieldUpdateOperationsInput | string
    gameContactEmail?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    gmNames?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    playerPreference?: StringFieldUpdateOperationsInput | string
    playersContactGm?: BoolFieldUpdateOperationsInput | boolean
    returningPlayers?: StringFieldUpdateOperationsInput | string
    setting?: StringFieldUpdateOperationsInput | string
    slotConflicts?: StringFieldUpdateOperationsInput | string
    slotPreference?: IntFieldUpdateOperationsInput | number
    teenFriendly?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    full?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MembershipUpdateWithoutUserInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUpdateManyWithoutMembershipNestedInput
    gameChoice?: GameChoiceUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUpdateManyWithoutMembershipNestedInput
    hotelRoom?: HotelRoomUpdateOneRequiredWithoutMembershipNestedInput
    transactions?: TransactionsUpdateManyWithoutMembershipNestedInput
  }

  export type MembershipUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hotelRoomId?: IntFieldUpdateOperationsInput | number
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
    gameAssignment?: GameAssignmentUncheckedUpdateManyWithoutMembershipNestedInput
    gameChoice?: GameChoiceUncheckedUpdateManyWithoutMembershipNestedInput
    gameSubmission?: GameSubmissionUncheckedUpdateManyWithoutMembershipNestedInput
    transactions?: TransactionsUncheckedUpdateManyWithoutMembershipNestedInput
  }

  export type MembershipUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: StringFieldUpdateOperationsInput | string
    attending?: BoolFieldUpdateOperationsInput | boolean
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hotelRoomId?: IntFieldUpdateOperationsInput | number
    interestLevel?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    roomPreferenceAndNotes?: StringFieldUpdateOperationsInput | string
    roomingPreferences?: StringFieldUpdateOperationsInput | string
    roomingWith?: StringFieldUpdateOperationsInput | string
    volunteer?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    offerSubsidy?: BoolFieldUpdateOperationsInput | boolean
    requestOldPrice?: BoolFieldUpdateOperationsInput | boolean
    slotsAttending?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUpdateWithoutUserInput = {
    snailMailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    snailMailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    snailMailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShirtOrderUpdateWithoutUserInput = {
    deliveryMethod?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    shirtOrderItem?: ShirtOrderItemUpdateManyWithoutShirtOrderNestedInput
  }

  export type ShirtOrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryMethod?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    shirtOrderItem?: ShirtOrderItemUncheckedUpdateManyWithoutShirtOrderNestedInput
  }

  export type ShirtOrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryMethod?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionsUpdateWithoutUserTransactionsOriginTouserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    membership?: MembershipUpdateOneWithoutTransactionsNestedInput
    userTransactionsUserIdTouser?: UserUpdateOneRequiredWithoutTransactionsTransactionsUserIdTouserNestedInput
  }

  export type TransactionsUncheckedUpdateWithoutUserTransactionsOriginTouserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsUncheckedUpdateManyWithoutUserTransactionsOriginTouserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsUpdateWithoutUserTransactionsUserIdTouserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    membership?: MembershipUpdateOneWithoutTransactionsNestedInput
    userTransactionsOriginTouser?: UserUpdateOneWithoutTransactionsTransactionsOriginTouserNestedInput
  }

  export type TransactionsUncheckedUpdateWithoutUserTransactionsUserIdTouserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    origin?: NullableIntFieldUpdateOperationsInput | number | null
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type TransactionsUncheckedUpdateManyWithoutUserTransactionsUserIdTouserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    memberId?: NullableIntFieldUpdateOperationsInput | number | null
    year?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    origin?: NullableIntFieldUpdateOperationsInput | number | null
    stripe?: BoolFieldUpdateOperationsInput | boolean
    notes?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type UserRoleUpdateWithoutUserInput = {
    role?: RoleUpdateOneRequiredWithoutUserRoleNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type UserRoleUncheckedUpdateManyWithoutUserInput = {
    roleId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}