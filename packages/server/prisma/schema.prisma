generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model game {
  id                 Int               @id @default(autoincrement())
  description        String
  late_finish        Boolean?
  late_start         String?           @db.VarChar(50)
  name               String            @db.VarChar(100)
  player_max         Int
  player_min         Int
  room_id            Int?
  short_name         String?           @db.VarChar(60)
  slot_id            Int?
  char_instructions  String
  estimated_length   String            @db.VarChar(3)
  game_contact_email String            @db.VarChar(64)
  genre              String            @db.VarChar(19)
  gm_names           String?           @db.VarChar(255)
  message            String
  player_preference  String            @db.VarChar(8)
  players_contact_gm Boolean
  returning_players  String
  setting            String
  slot_conflicts     String
  slot_preference    Int
  teen_friendly      Boolean
  type               String            @db.VarChar(18)
  year               Int
  author_id          Int?
  full               Boolean?          @default(false)
  user               user?             @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_author_id_foreign")
  room               room?             @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_room_id_foreign")
  slot               slot?             @relation(fields: [slot_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_slot_id_foreign")
  game_assignment    game_assignment[]
  game_choice        game_choice[]

  @@index([author_id], map: "game_author_id_index")
  @@index([room_id], map: "game_room_id_index")
  @@index([slot_id], map: "game_slot_id_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model game_assignment {
  member_id  Int
  game_id    Int
  gm         Int
  year       Int
  game       game       @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "game_assignment_game_id_foreign")
  membership membership @relation(fields: [member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_assignment_member_id_foreign")

  @@id([member_id, game_id, gm, year])
  @@index([game_id], map: "game_assignment_game_id_index")
  @@index([member_id], map: "game_assignment_member_id_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model game_choice {
  id               Int        @id @default(autoincrement())
  game_id          Int?
  member_id        Int
  rank             Int
  slot_id          Int
  year             Int
  returning_player Boolean
  game             game?      @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_choice_game_id_foreign")
  membership       membership @relation(fields: [member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_choice_member_id_foreign")
  slot             slot       @relation(fields: [slot_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_choice_slot_id_foreign")

  @@index([game_id], map: "game_choice_game_id_index")
  @@index([member_id], map: "game_choice_member_id_index")
  @@index([slot_id], map: "game_choice_slot_id_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model game_submission {
  id         Int        @id @default(autoincrement())
  member_id  Int
  message    String     @db.VarChar(1024)
  year       Int
  membership membership @relation(fields: [member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_submission_member_id_foreign")

  @@index([member_id], map: "game_submission_member_id_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model hotel_room {
  id            Int          @id @default(autoincrement())
  description   String       @db.VarChar(150)
  gaming_room   Boolean
  occupancy     String       @db.VarChar(255)
  quantity      Int
  rate          String       @db.VarChar(255)
  bathroom_type String       @db.VarChar(255)
  type          String       @db.VarChar(255)
  membership    membership[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model hotel_room_details {
  id                  BigInt  @id @default(autoincrement())
  version             BigInt
  bathroom_type       String  @db.VarChar(255)
  comment             String  @db.VarChar(100)
  enabled             Boolean
  gaming_room         Boolean
  internal_room_type  String  @db.VarChar(100)
  name                String  @db.VarChar(50)
  reserved            Boolean
  reserved_for        String  @db.VarChar(50)
  room_type           String  @db.VarChar(255)
  formatted_room_type String  @db.VarChar(255)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model lookup {
  id               Int            @id @default(autoincrement())
  code_maximum     String?        @db.VarChar(255)
  code_minimum     String?        @db.VarChar(255)
  code_scale       Int?
  code_type        String         @db.VarChar(7)
  internationalize Boolean
  ordering         String         @db.VarChar(9)
  realm            String         @unique(map: "lookup_realm_unique") @db.VarChar(100)
  value_maximum    String?        @db.VarChar(255)
  value_minimum    String?        @db.VarChar(255)
  value_scale      Int?
  value_type       String         @db.VarChar(7)
  lookup_value     lookup_value[]

  @@index([realm], map: "lookup_realm_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model lookup_value {
  id                Int     @id @default(autoincrement())
  code              String  @db.VarChar(255)
  lookup_id         Int
  numeric_sequencer Decimal @db.Decimal(19, 2)
  sequencer         Int
  string_sequencer  String  @db.VarChar(255)
  value             String  @db.VarChar(255)
  lookup            lookup  @relation(fields: [lookup_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lookup_value_lookup_id_foreign")

  @@unique([lookup_id, code], map: "lookup_value_lookup_id_code_unique")
  @@index([code], map: "lookup_value_code_index")
  @@index([lookup_id], map: "lookup_value_lookup_id_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model membership {
  id                        Int               @id @default(autoincrement())
  arrival_date              DateTime          @db.Timestamptz(6)
  attendance                String            @db.VarChar(255)
  attending                 Boolean
  departure_date            DateTime          @db.Timestamptz(6)
  hotel_room_id             Int
  interest_level            String            @db.VarChar(255)
  message                   String            @db.VarChar(1024)
  room_preference_and_notes String            @db.VarChar(1024)
  rooming_preferences       String            @db.VarChar(255)
  rooming_with              String            @db.VarChar(250)
  user_id                   Int
  volunteer                 Boolean
  year                      Int
  offer_subsidy             Boolean
  request_old_price         Boolean
  slots_attending           String?           @db.VarChar(20)
  game_assignment           game_assignment[]
  game_choice               game_choice[]
  game_submission           game_submission[]
  hotel_room                hotel_room        @relation(fields: [hotel_room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "membership_hotel_room_id_foreign")
  user                      user              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "membership_user_id_foreign")
  transactions              transactions[]

  @@index([hotel_room_id], map: "membership_hotel_room_id_index")
  @@index([user_id], map: "membership_user_id_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profile {
  id                 Int     @id @default(autoincrement())
  user_id            Int
  snail_mail_address String? @db.VarChar(250)
  phone_number       String? @db.VarChar(32)
  user               user    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "profile_user_id_foreign")

  @@index([user_id], map: "profile_user_id_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model role {
  id        Int         @id @default(autoincrement())
  authority String      @unique(map: "role_authority_unique") @db.VarChar(40)
  user_role user_role[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model room {
  id          Int     @id @default(autoincrement())
  description String  @db.VarChar(50)
  size        Int
  type        String  @db.VarChar(50)
  updated     Boolean
  game        game[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model setting {
  id    Int    @id @default(autoincrement())
  code  String @db.VarChar(100)
  type  String @db.VarChar(15)
  value String @db.VarChar(100)

  @@index([code], map: "setting_code_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model shirt_order {
  id               Int                @id @default(autoincrement())
  delivery_method  String             @db.VarChar(255)
  message          String             @db.VarChar(255)
  user_id          Int
  year             Int
  user             user               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "shirt_order_user_id_foreign")
  shirt_order_item shirt_order_item[]

  @@index([user_id], map: "shirt_order_user_id_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model shirt_order_item {
  id          Int         @id @default(autoincrement())
  order_id    Int
  quantity    Int
  size        String      @db.VarChar(255)
  style       String      @db.VarChar(255)
  items_idx   Int?
  shirt_order shirt_order @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "shirt_order_item_order_id_foreign")

  @@index([order_id], map: "shirt_order_item_order_id_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model slot {
  id             Int           @id @default(autoincrement())
  slot           Int
  day            String        @db.VarChar(20)
  formatted_date String        @db.VarChar(30)
  length         String        @db.VarChar(20)
  time           String        @db.VarChar(30)
  game           game[]
  game_choice    game_choice[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model stripe {
  id   Int  @id @default(autoincrement())
  data Json
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model transactions {
  id                              BigInt      @id @default(autoincrement())
  user_id                         Int
  member_id                       Int?
  year                            Int
  timestamp                       DateTime    @default(now()) @db.Timestamptz(6)
  amount                          Decimal     @db.Decimal(8, 2)
  origin                          Int?
  stripe                          Boolean     @default(false)
  notes                           String      @default("") @db.VarChar(1044)
  data                            Json
  membership                      membership? @relation(fields: [member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_member_id_foreign")
  user_transactions_originTouser  user?       @relation("transactions_originTouser", fields: [origin], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_origin_foreign")
  user_transactions_user_idTouser user        @relation("transactions_user_idTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_user_id_foreign")

  @@index([member_id], map: "transactions_member_id_index")
  @@index([origin], map: "transactions_origin_index")
  @@index([user_id], map: "transactions_user_id_index")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user {
  id                                      Int            @id @default(autoincrement())
  email                                   String         @unique(map: "user_email_unique") @db.VarChar(64)
  full_name                               String?        @db.VarChar(64)
  first_name                              String?        @db.VarChar(20)
  last_name                               String?        @db.VarChar(40)
  display_name                            String?        @db.VarChar(40)
  balance                                 Decimal        @default(0) @db.Decimal(8, 2)
  game                                    game[]
  membership                              membership[]
  profile                                 profile[]
  shirt_order                             shirt_order[]
  transactions_transactions_originTouser  transactions[] @relation("transactions_originTouser")
  transactions_transactions_user_idTouser transactions[] @relation("transactions_user_idTouser")
  user_role                               user_role[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_role {
  role_id Int
  user_id Int
  role    role @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_role_role_id_foreign")
  user    user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_role_user_id_foreign")

  @@id([role_id, user_id])
  @@index([role_id], map: "user_role_role_id_index")
  @@index([user_id], map: "user_role_user_id_index")
}
