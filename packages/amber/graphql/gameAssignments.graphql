#import "./gameAssignmentFragment.graphql"
#import "./gameFragment.graphql"

query getGameAssignmentsByYear($year: Int!) {
  gameAssignments(condition: { year: $year }) {
    nodes {
      ...gameAssignmentFields
    }
  }
}

query getGameAssignmentsByGameId($gameId: Int!) {
  gameAssignments(condition: { gameId: $gameId }) {
    nodes {
      ...gameAssignmentFields
    }
  }
}

query getGameAssignmentsByMemberId($memberId: Int!) {
  gameAssignments(condition: { memberId: $memberId }) {
    nodes {
      ...gameAssignmentFields
    }
  }
}

mutation updateGameAssignmentByNodeId($input: UpdateGameAssignmentByNodeIdInput!) {
  updateGameAssignmentByNodeId(input: $input) {
    gameAssignment {
      ...gameAssignmentFields
    }
  }
}

mutation createGameAssignment($input: CreateGameAssignmentInput!) {
  createGameAssignment(input: $input) {
    gameAssignment {
      ...gameAssignmentFields
    }
  }
}

mutation deleteGameAssignment($input: DeleteGameAssignmentByNodeIdInput!) {
  deleteGameAssignmentByNodeId(input: $input) {
    clientMutationId
    deletedGameAssignmentNodeId
  }
}

# note that gm < 0 is offering to run, gm = 0 is player, gm > 0 is scheduled to run
query getSchedule($memberId: Int!) {
  gameAssignments(condition: { memberId: $memberId }, filter: { gm: { greaterThanOrEqualTo: 0 } }) {
    nodes {
      game {
        ...gameFields
        gameAssignments(filter: { gm: { greaterThanOrEqualTo: 0 } }) {
          nodes {
            ...assignmentFields
          }
        }
      }
      ...gameAssignmentFields
    }
  }
}
