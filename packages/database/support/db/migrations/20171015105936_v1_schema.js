// create a base schema that is import compatible with the Grails-created on in the V1 site
//
// fyi the biggest difference is that this just uses increments as keys, these are unsigned int(10)
// grails used signed bigint(20).

exports.up = function (knex) {
  return knex.schema
    .createTable('async_mail_bcc', (table) => {
      table.integer('message_id').notNullable()
      table.string('bcc_string', 320).defaultTo(null)
      table.integer('bcc_idx', 11).defaultTo(null)
    })
    .createTable('async_mail_cc', (table) => {
      table.integer('message_id').notNullable()
      table.string('cc_string', 320).defaultTo(null)
      table.integer('cc_idx', 11).defaultTo(null)
    })
    .createTable('async_mail_header', (table) => {
      table.integer('message_id').notNullable()
      table.string('header_name', 255).defaultTo(null)
      table.string('header_value', 255).notNullable()
    })
    .createTable('async_mail_mess', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.integer('attempt_interval').notNullable()
      table.integer('attempts_count', 11).notNullable()
      table.dateTime('begin_date').notNullable()
      table.dateTime('create_date').notNullable()
      table.dateTime('end_date').notNullable()
      table.string('from_column', 320).defaultTo(null)
      table.boolean('html').notNullable()
      table.dateTime('last_attempt_date').defaultTo(null)
      table.boolean('mark_delete').notNullable()
      table.integer('max_attempts_count', 11).notNullable()
      table.integer('priority', 11).notNullable()
      table.string('reply_to', 320).defaultTo(null)
      table.dateTime('sent_date').defaultTo(null)
      table.string('status', 255).notNullable()
      table.string('subject', 988).notNullable()
      table.text('text', 'longtext').notNullable()
      table.string('envelope_from', 256).defaultTo(null)
    })
    .createTable('async_mail_attachment', (table) => {
      table.increments().primary()
      table.string('attachment_name', 255).notNullable()
      table.binary('content').notNullable()
      table.boolean('inline').notNullable()
      table.integer('message_id').notNullable().references('async_mail_mess.id').unsigned().index()
      table.string('mime_type', 255).notNullable()
      table.integer('attachments_idx', 11).defaultTo(null)
    })
    .createTable('async_mail_to', (table) => {
      table.integer('message_id').notNullable()
      table.string('to_string', 320).defaultTo(null)
      table.integer('to_idx', 11).defaultTo(null)
    })
    .createTable('databasechangelog', (table) => {
      table.string('id', 63).notNullable()
      table.string('author', 63).notNullable()
      table.string('filename', 200).notNullable()
      table.dateTime('dateexecuted').notNullable()
      table.integer('orderexecuted', 11).notNullable()
      table.string('exectype', 10).notNullable()
      table.string('md5sum', 35).defaultTo(null)
      table.string('description', 255).defaultTo(null)
      table.string('comments', 255).defaultTo(null)
      table.string('tag', 255).defaultTo(null)
      table.string('liquibase', 20).defaultTo(null)
      table.primary([`id`, `author`, `filename`])
    })
    .createTable('databasechangeloglock', (table) => {
      table.integer('id', 11).primary().notNullable()
      table.boolean('locked').notNullable()
      table.dateTime('lockgranted').defaultTo(null)
      table.string('lockedby', 255).defaultTo(null)
    })
    .createTable('email_code', (table) => {
      table.increments().primary()
      table.dateTime('date_created').notNullable()
      table.string('email', 64).notNullable().unique()
      table.string('token', 255).notNullable()
      table.string('unverified_email', 64).notNullable().unique()
    })
    .createTable('slot', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.integer('slot', 11).notNullable()
      table.string('day', 20).notNullable()
      table.string('formatted_date', 30).notNullable()
      table.string('length', 20).notNullable()
      table.string('time', 30).notNullable()
    })
    .createTable('room', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.string('description', 50).notNullable()
      table.integer('size', 11).notNullable()
      table.string('type', 50).notNullable()
      table.boolean('updated').notNullable()
    })
    .createTable('profile', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.dateTime('date_created').notNullable()
      table.string('email', 64).notNullable().unique()
      table.string('email_hash', 255).defaultTo(null)
      table.string('full_name', 64).notNullable()
      table.dateTime('last_updated').notNullable()
      table.string('phone_number', 32).defaultTo(null)
      table.string('snail_mail_address', 250).defaultTo(null)
    })
    .createTable('user', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.boolean('account_expired').notNullable()
      table.boolean('account_locked').notNullable()
      table.string('action_hash', 64).defaultTo(null)
      table.dateTime('date_created').notNullable()
      table.boolean('enabled').notNullable()
      table.dateTime('last_updated').notNullable()
      table.string('password', 64).notNullable()
      table.boolean('password_expired').notNullable()
      table.integer('profile_id').notNullable().references('profile.id').unsigned().index()
      table.string('username', 32).notNullable().unique()
    })
    .createTable('game', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.dateTime('date_created').notNullable()
      table.text('description', 'longtext').notNullable()
      table.dateTime('last_updated').notNullable()
      table.boolean('late_finish').defaultTo(null)
      table.string('late_start', 50).defaultTo(null)
      table.string('name', 100).notNullable()
      table.integer('player_max', 11).notNullable()
      table.integer('player_min', 11).notNullable()
      table.integer('room_id').defaultTo(null).references('room.id').unsigned().index()
      table.string('short_name', 60).defaultTo(null)
      table.integer('slot_id').defaultTo(null).references('slot.id').unsigned().index()
      table.text('char_instructions', 'longtext').notNullable()
      table.string('estimated_length', 3).notNullable()
      table.string('game_contact_email', 64).notNullable()
      table.string('genre', 19).notNullable()
      table.string('gm_names', 255).defaultTo(null)
      table.text('message', 'longtext').notNullable()
      table.string('player_preference', 8).notNullable()
      table.boolean('players_contact_gm').notNullable()
      table.text('returning_players', 'longtext').notNullable()
      table.text('setting', 'longtext').notNullable()
      table.text('slot_conflicts', 'longtext').notNullable()
      table.integer('slot_preference', 11).notNullable()
      table.boolean('teen_friendly').notNullable()
      table.string('type', 18).notNullable()
      table.integer('year', 11).notNullable()
      table.integer('author_id').defaultTo(null).references('user.id').unsigned().index()
    })
    .createTable('hotel_room', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.string('description', 150).notNullable()
      table.boolean('gaming_room').notNullable()
      table.string('occupancy', 255).notNullable()
      table.integer('quantity', 11).notNullable()
      table.string('rate', 255).notNullable()
      table.string('type', 255).notNullable()
    })
    .createTable('membership', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.dateTime('arrival_date').notNullable()
      table.string('attendance', 255).notNullable()
      table.boolean('attending').notNullable()
      table.dateTime('date_created').notNullable()
      table.dateTime('departure_date').notNullable()
      table.integer('hotel_room_id').notNullable().references('hotel_room.id').unsigned().index()
      table.string('interest_level', 255).notNullable()
      table.dateTime('last_updated').notNullable()
      table.string('message', 1024).notNullable()
      table.string('room_preference_and_notes', 1024).notNullable()
      table.string('rooming_preferences', 255).notNullable()
      table.string('rooming_with', 250).notNullable()
      table.integer('user_id').notNullable().references('user.id').unsigned().index()
      table.boolean('volunteer').notNullable()
      table.integer('year', 11).notNullable()
    })
    .createTable('game_assignment', (table) => {
      table.integer('member_id').notNullable().references('membership.id').unsigned().index()
      table.integer('game_id').notNullable().references('game.id').unsigned().index()
      table.dateTime('date_created').notNullable()
      table.integer('gm', 11).notNullable()
      table.dateTime('last_updated').notNullable()
      table.integer('year', 11).notNullable()
      table.primary([`member_id`, `game_id`, `gm`])
    })
    .createTable('game_choice', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.integer('game_id').defaultTo(null).references('game.id').unsigned().index()
      table.integer('member_id').notNullable().references('membership.id').unsigned().index()
      table.integer('rank', 11).notNullable()
      table.integer('slot_id').notNullable().references('slot.id').unsigned().index()
      table.integer('year', 11).notNullable()
      table.boolean('returning_player').notNullable()
    })
    .createTable('game_submission', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.dateTime('date_created').notNullable()
      table.integer('member_id').notNullable().references('membership.id').unsigned().index()
      table.string('message', 1024).notNullable()
      table.integer('year', 11).notNullable()
    })
    .createTable('login_record', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.dateTime('date_created').defaultTo(null)
      table.dateTime('last_updated').defaultTo(null)
      table.integer('owner_id').notNullable().references('user.id').unsigned().index()
      table.string('remote_addr', 255).notNullable()
      table.string('remote_host', 255).notNullable()
      table.string('user_agent', 255).notNullable()
    })
    .createTable('lookup', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.string('code_maximum', 255).defaultTo(null)
      table.string('code_minimum', 255).defaultTo(null)
      table.integer('code_scale', 11).defaultTo(null)
      table.string('code_type', 7).notNullable()
      table.dateTime('date_created').notNullable()
      table.boolean('internationalize').notNullable()
      table.dateTime('last_updated').notNullable()
      table.string('ordering', 9).notNullable()
      table.string('realm', 100).notNullable().index().unique()
      table.string('value_maximum', 255).defaultTo(null)
      table.string('value_minimum', 255).defaultTo(null)
      table.integer('value_scale', 11).defaultTo(null)
      table.string('value_type', 7).notNullable()
    })
    .createTable('lookup_value', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.string('code', 255).notNullable().index()
      table.dateTime('date_created').notNullable()
      table.dateTime('last_updated').notNullable()
      table.integer('lookup_id').notNullable().references('lookup.id').unsigned().index()
      table.decimal('numeric_sequencer', 19, 2).notNullable()
      table.integer('sequencer', 11).notNullable()
      table.string('string_sequencer', 255).notNullable()
      table.string('value', 255).notNullable()
      table.unique(['lookup_id', 'code'])
    })
    .createTable('registration_code', (table) => {
      table.increments().primary()
      table.dateTime('date_created').notNullable()
      table.string('token', 255).notNullable()
      table.string('username', 255).notNullable()
    })
    .createTable('role', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.string('authority', 40).notNullable().unique()
    })
    .createTable('setting', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.string('code', 100).notNullable().index()
      table.dateTime('date_created').notNullable()
      table.dateTime('last_updated').notNullable()
      table.string('type', 7).notNullable()
      table.string('value', 100).notNullable()
    })
    .createTable('shirt_order', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.string('delivery_method', 255).notNullable()
      table.string('message', 255).notNullable()
      table.integer('user_id').notNullable().references('user.id').unsigned().index().onDelete('cascade')
      table.integer('year', 11).notNullable()
    })
    .createTable('shirt_order_item', (table) => {
      table.increments().primary()
      table.integer('version').notNullable()
      table.integer('order_id').notNullable().references('shirt_order.id').unsigned().index().onDelete('cascade')
      table.integer('quantity', 11).notNullable()
      table.string('size', 255).notNullable()
      table.string('style', 255).notNullable()
      table.integer('items_idx', 11).defaultTo(null)
    })
    .createTable('user_role', (table) => {
      table.integer('role_id').notNullable().references('role.id').unsigned().index()
      table.integer('user_id').notNullable().references('user.id').unsigned().index().onDelete('cascade')
      table.primary([`role_id`, `user_id`])
    })
}

exports.down = function (knex) {
  return knex.schema
    .dropTableIfExists('async_mail_attachment')
    .dropTableIfExists('async_mail_bcc')
    .dropTableIfExists('async_mail_cc')
    .dropTableIfExists('async_mail_header')
    .dropTableIfExists('async_mail_mess')
    .dropTableIfExists('async_mail_to')
    .dropTableIfExists('databasechangelog')
    .dropTableIfExists('databasechangeloglock')
    .dropTableIfExists('email_code')
    .dropTableIfExists('game_assignment')
    .dropTableIfExists('game_choice')
    .dropTableIfExists('game_submission')
    .dropTableIfExists('game')
    .dropTableIfExists('hotel_room')
    .dropTableIfExists('login_record')
    .dropTableIfExists('lookup_value')
    .dropTableIfExists('lookup')
    .dropTableIfExists('membership')
    .dropTableIfExists('profile')
    .dropTableIfExists('registration_code')
    .dropTableIfExists('role')
    .dropTableIfExists('room')
    .dropTableIfExists('setting')
    .dropTableIfExists('shirt_order_item')
    .dropTableIfExists('shirt_order')
    .dropTableIfExists('slot')
    .dropTableIfExists('user_role')
    .dropTableIfExists('user')
}
